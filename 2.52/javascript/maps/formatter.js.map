{"version":3,"sources":["formatter.js"],"names":["Transmission","fmt","speed_K","speed_K_str","speed_M_str","speed_G_str","size_K","size_B_str","size_K_str","size_M_str","size_G_str","size_T_str","mem_K","mem_B_str","mem_K_str","mem_M_str","mem_G_str","mem_T_str","updateUnits","u","percentString","x","toTruncFixed","ratioString","this","mem","bytes","join","convertedSize","unit","Math","pow","size","speedBps","Bps","speed","toKBps","floor","KBps","timeInterval","seconds","days","hours","minutes","d","h","m","s","timestamp","myDate","Date","now","date","time","sameYear","getFullYear","sameMonth","getMonth","dateDiff","getDate","abs","toDateString","getHours","period","getMinutes","getSeconds","plural","i","word","toStringWithCommas","peerStatus","flagStr","flag","formattedFlags","explanation","push"],"mappings":"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","file":"formatter.js","sourcesContent":["/**\n * Copyright Â© Mnemosyne LLC\n *\n * This file is licensed under the GPLv2.\n * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n */\n\nTransmission.fmt = (function()\n{\n\tvar speed_K = 1000;\n\tvar speed_B_str =  'B/s';\n\tvar speed_K_str = 'kB/s';\n\tvar speed_M_str = 'MB/s';\n\tvar speed_G_str = 'GB/s';\n\tvar speed_T_str = 'TB/s';\n\n\tvar size_K = 1000;\n\tvar size_B_str =  'B';\n\tvar size_K_str = 'kB';\n\tvar size_M_str = 'MB';\n\tvar size_G_str = 'GB';\n\tvar size_T_str = 'TB';\n\n\tvar mem_K = 1024;\n\tvar mem_B_str =   'B';\n\tvar mem_K_str = 'KiB';\n\tvar mem_M_str = 'MiB';\n\tvar mem_G_str = 'GiB';\n\tvar mem_T_str = 'TiB';\n\n\treturn {\n\n\t\tupdateUnits: function(u)\n\t\t{\n/*\n\t\t\tspeed_K     = u['speed-bytes'];\n\t\t\tspeed_K_str = u['speed-units'][0];\n\t\t\tspeed_M_str = u['speed-units'][1];\n\t\t\tspeed_G_str = u['speed-units'][2];\n\t\t\tspeed_T_str = u['speed-units'][3];\n\n\t\t\tsize_K     = u['size-bytes'];\n\t\t\tsize_K_str = u['size-units'][0];\n\t\t\tsize_M_str = u['size-units'][1];\n\t\t\tsize_G_str = u['size-units'][2];\n\t\t\tsize_T_str = u['size-units'][3];\n\n\t\t\tmem_K     = u['memory-bytes'];\n\t\t\tmem_K_str = u['memory-units'][0];\n\t\t\tmem_M_str = u['memory-units'][1];\n\t\t\tmem_G_str = u['memory-units'][2];\n\t\t\tmem_T_str = u['memory-units'][3];\n*/\n\t\t},\n\n\t\t/*\n\t\t *   Format a percentage to a string\n\t\t */\n\t\tpercentString: function(x) {\n\t\t\tif (x < 10.0)\n\t\t\t\treturn x.toTruncFixed(2);\n\t\t\telse if (x < 100.0)\n\t\t\t\treturn x.toTruncFixed(1);\n\t\t\telse\n\t\t\t\treturn x.toTruncFixed(0);\n\t\t},\n\n\t\t/*\n\t\t *   Format a ratio to a string\n\t\t */\n\t\tratioString: function(x) {\n\t\t\tif (x === -1)\n\t\t\t\treturn \"None\";\n\t\t\tif (x === -2)\n\t\t\t\treturn '&infin;';\n\t\t\treturn this.percentString(x);\n\t\t},\n\n\t\t/**\n\t\t * Formats the a memory size into a human-readable string\n\t\t * @param {Number} bytes the filesize in bytes\n\t\t * @return {String} human-readable string\n\t\t */\n\t\tmem: function(bytes)\n\t\t{\n\t\t\tif (bytes < mem_K)\n\t\t\t\treturn [ bytes, mem_B_str ].join(' ');\n\n\t\t\tvar convertedSize;\n\t\t\tvar unit;\n\n\t\t\tif (bytes < Math.pow(mem_K, 2))\n\t\t\t{\n\t\t\t\tconvertedSize = bytes / mem_K;\n\t\t\t\tunit = mem_K_str;\n\t\t\t}\n\t\t\telse if (bytes < Math.pow(mem_K, 3))\n\t\t\t{\n\t\t\t\tconvertedSize = bytes / Math.pow(mem_K, 2);\n\t\t\t\tunit = mem_M_str;\n\t\t\t}\n\t\t\telse if (bytes < Math.pow(mem_K, 4))\n\t\t\t{\n\t\t\t\tconvertedSize = bytes / Math.pow(mem_K, 3);\n\t\t\t\tunit = mem_G_str;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconvertedSize = bytes / Math.pow(mem_K, 4);\n\t\t\t\tunit = mem_T_str;\n\t\t\t}\n\n\t\t\t// try to have at least 3 digits and at least 1 decimal\n\t\t\treturn convertedSize <= 9.995 ? [ convertedSize.toTruncFixed(2), unit ].join(' ')\n\t\t\t                              : [ convertedSize.toTruncFixed(1), unit ].join(' ');\n\t\t},\n\n\t\t/**\n\t\t * Formats the a disk capacity or file size into a human-readable string\n\t\t * @param {Number} bytes the filesize in bytes\n\t\t * @return {String} human-readable string\n\t\t */\n\t\tsize: function(bytes)\n\t\t{\n\t\t\tif (bytes < size_K)\n\t\t\t\treturn [ bytes, size_B_str ].join(' ');\n\n\t\t\tvar convertedSize;\n\t\t\tvar unit;\n\n\t\t\tif (bytes < Math.pow(size_K, 2))\n\t\t\t{\n\t\t\t\tconvertedSize = bytes / size_K;\n\t\t\t\tunit = size_K_str;\n\t\t\t}\n\t\t\telse if (bytes < Math.pow(size_K, 3))\n\t\t\t{\n\t\t\t\tconvertedSize = bytes / Math.pow(size_K, 2);\n\t\t\t\tunit = size_M_str;\n\t\t\t}\n\t\t\telse if (bytes < Math.pow(size_K, 4))\n\t\t\t{\n\t\t\t\tconvertedSize = bytes / Math.pow(size_K, 3);\n\t\t\t\tunit = size_G_str;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconvertedSize = bytes / Math.pow(size_K, 4);\n\t\t\t\tunit = size_T_str;\n\t\t\t}\n\n\t\t\t// try to have at least 3 digits and at least 1 decimal\n\t\t\treturn convertedSize <= 9.995 ? [ convertedSize.toTruncFixed(2), unit ].join(' ')\n\t\t\t                              : [ convertedSize.toTruncFixed(1), unit ].join(' ');\n\t\t},\n\n\t\tspeedBps: function(Bps)\n\t\t{\n\t\t\treturn this.speed(this.toKBps(Bps));\n\t\t},\n\n\t\ttoKBps: function(Bps)\n\t\t{\n\t\t\treturn Math.floor(Bps / speed_K);\n\t\t},\n\n\t\tspeed: function(KBps)\n\t\t{\n\t\t\tvar speed = KBps;\n\n\t\t\tif (speed <= 999.95) // 0 KBps to 999 K\n\t\t\t\treturn [ speed.toTruncFixed(0), speed_K_str ].join(' ');\n\n\t\t\tspeed /= speed_K;\n\n\t\t\tif (speed <= 99.995) // 1 M to 99.99 M\n\t\t\t\treturn [ speed.toTruncFixed(2), speed_M_str ].join(' ');\n\t\t\tif (speed <= 999.95) // 100 M to 999.9 M\n\t\t\t\treturn [ speed.toTruncFixed(1), speed_M_str ].join(' ');\n\n\t\t\t// insane speeds\n\t\t\tspeed /= speed_K;\n\t\t\treturn [ speed.toTruncFixed(2), speed_G_str ].join(' ');\n\t\t},\n\n\t\ttimeInterval: function(seconds)\n\t\t{\n\t\t\tvar days    = Math.floor (seconds / 86400),\n\t\t\t    hours   = Math.floor ((seconds % 86400) / 3600),\n\t\t\t    minutes = Math.floor ((seconds % 3600) / 60),\n\t\t\t    seconds = Math.floor (seconds % 60),\n\t\t\t    d = days    + ' ' + (days    > 1 ? 'days'    : 'day'),\n\t\t\t    h = hours   + ' ' + (hours   > 1 ? 'hours'   : 'hour'),\n\t\t\t    m = minutes + ' ' + (minutes > 1 ? 'minutes' : 'minute'),\n\t\t\t    s = seconds + ' ' + (seconds > 1 ? 'seconds' : 'second');\n\n\t\t\tif (days) {\n\t\t\t\tif (days >= 4 || !hours)\n\t\t\t\t\treturn d;\n\t\t\t\treturn d + ', ' + h;\n\t\t\t}\n\t\t\tif (hours) {\n\t\t\t\tif (hours >= 4 || !minutes)\n\t\t\t\t\treturn h;\n\t\t\t\treturn h + ', ' + m;\n\t\t\t}\n\t\t\tif (minutes) {\n\t\t\t\tif (minutes >= 4 || !seconds)\n\t\t\t\t\treturn m;\n\t\t\t\treturn m + ', ' + s;\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\n\t\ttimestamp: function(seconds)\n\t\t{\n\t\t\tif (!seconds)\n\t\t\t\treturn 'N/A';\n\n\t\t\tvar myDate = new Date(seconds*1000);\n\t\t\tvar now = new Date();\n\n\t\t\tvar date = \"\";\n\t\t\tvar time = \"\";\n\n\t\t\tvar sameYear = now.getFullYear() === myDate.getFullYear();\n\t\t\tvar sameMonth = now.getMonth() === myDate.getMonth();\n\n\t\t\tvar dateDiff = now.getDate() - myDate.getDate();\n\t\t\tif (sameYear && sameMonth && Math.abs(dateDiff) <= 1){\n\t\t\t\tif (dateDiff === 0){\n\t\t\t\t\tdate = \"Today\";\n\t\t\t\t}\n\t\t\t\telse if (dateDiff === 1){\n\t\t\t\t\tdate = \"Yesterday\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdate = \"Tomorrow\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdate = myDate.toDateString();\n\t\t\t}\n\n\t\t\tvar hours = myDate.getHours();\n\t\t\tvar period = \"AM\";\n\t\t\tif (hours > 12){\n\t\t\t\thours = hours - 12;\n\t\t\t\tperiod = \"PM\";\n\t\t\t}\n\t\t\tif (hours === 0){\n\t\t\t\thours = 12;\n\t\t\t}\n\t\t\tif (hours < 10){\n\t\t\t\thours = \"0\" + hours;\n\t\t\t}\n\t\t\tvar minutes = myDate.getMinutes();\n\t\t\tif (minutes < 10){\n\t\t\t\tminutes = \"0\" + minutes;\n\t\t\t}\n\t\t\tvar seconds = myDate.getSeconds();\n\t\t\t\tif (seconds < 10){\n\t\t\t\t\tseconds = \"0\" + seconds;\n\t\t\t}\n\n\t\t\ttime = [hours, minutes, seconds].join(':');\n\n\t\t\treturn [date, time, period].join(' ');\n\t\t},\n\n\t\tplural: function(i, word)\n\t\t{\n\t\t\treturn [ i.toStringWithCommas(), ' ', word, (i==1?'':'') ].join('');\n\t\t},\n\n\t\tpeerStatus: function( flagStr ) \n\t\t{ \n\t\t\tvar formattedFlags = []; \n\t\t\tfor (var i=0, flag; flag=flagStr[i]; ++i)\n\t\t\t{\n\t\t\t\tvar explanation = null;\n\t\t\t\tswitch (flag)\n\t\t\t\t{\n\t\t\t\t\tcase \"O\": explanation = \"Optimistic unchoke\"; break;\n\t\t\t\t\tcase \"D\": explanation = \"Downloading from this peer\"; break;\n\t\t\t\t\tcase \"d\": explanation = \"We would download from this peer if they'd let us\"; break;\n\t\t\t\t\tcase \"U\": explanation = \"Uploading to peer\"; break;\n\t\t\t\t\tcase \"u\": explanation = \"We would upload to this peer if they'd ask\"; break;\n\t\t\t\t\tcase \"K\": explanation = \"Peer has unchoked us, but we're not interested\"; break;\n\t\t\t\t\tcase \"?\": explanation = \"We unchoked this peer, but they're not interested\"; break;\n\t\t\t\t\tcase \"E\": explanation = \"Encrypted Connection\"; break;\n\t\t\t\t\tcase \"H\": explanation = \"Peer was discovered through Distributed Hash Table (DHT)\"; break;\n\t\t\t\t\tcase \"X\": explanation = \"Peer was discovered through Peer Exchange (PEX)\"; break;\n\t\t\t\t\tcase \"I\": explanation = \"Peer is an incoming connection\"; break;\n\t\t\t\t\tcase \"T\": explanation = \"Peer is connected via uTP\"; break;\n\t\t\t\t}\n\n\t\t\t\tif (!explanation) { \n\t\t\t\t\tformattedFlags.push(flag); \n\t\t\t\t} else { \n\t\t\t\t\tformattedFlags.push(\"<span title=\\\"\" + flag + ': ' + explanation + \"\\\">\" + flag + \"</span>\"); \n\t\t\t\t} \n\t\t\t} \n\t\t\treturn formattedFlags.join(''); \n\t\t}\n\t}\n})();\n"],"sourceRoot":"/source/"}