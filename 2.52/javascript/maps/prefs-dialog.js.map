{"version":3,"sources":["prefs-dialog.js"],"names":["PrefsDialog","remote","data","dialog","elements","keys","groups","alt-speed-time-enabled","blocklist-enabled","idle-seeding-limit-enabled","seedRatioLimited","speed-limit-down-enabled","speed-limit-up-enabled","initTimeDropDown","e","i","hour","mins","value","content","parseInt","options","Option","onPortChecked","response","is_open","text","root","find","setInnerHTML","setGroupEnabled","parent_key","enabled","key","attr","onBlocklistUpdateClicked","updateBlocklist","setBlocklistButtonEnabled","b","blocklist_button","val","getValue","str","type","prop","toString","parseFloat","onControlChanged","ev","o","target","id","$","savePrefs","onControlFocused","oldValue","onControlBlurred","newValue","getDefaultMobileOptions","width","window","height","position","initialize","isMobileDevice","autoOpen","show","hide","close","onDialogClosed","tabbedDialog","click","change","focus","blur","getValues","transmission","hideMobileAddressbar","trigger","this","set","toStringWithCommas","document","activeElement","checkPort","shouldAddedTorrentsStart","checked"],"mappings":"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","file":"prefs-dialog.js","sourcesContent":["/**\n * Copyright Â© Jordan Lee, Dave Perrett, Malcolm Jarvis and Bruno Bierbaumer\n *\n * This file is licensed under the GPLv2.\n * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n */\n\nfunction PrefsDialog(remote) {\n\n    var data = {\n        dialog: null,\n        remote: null,\n        elements: { },\n\n        // all the RPC session keys that we have gui controls for\n        keys: [\n            'alt-speed-down',\n            'alt-speed-time-begin',\n            'alt-speed-time-day',\n            'alt-speed-time-enabled',\n            'alt-speed-time-end',\n            'alt-speed-up',\n            'blocklist-enabled',\n            'blocklist-size',\n            'blocklist-url',\n            'dht-enabled',\n            'download-dir',\n            'encryption',\n            'idle-seeding-limit',\n            'idle-seeding-limit-enabled',\n            'lpd-enabled',\n            'peer-limit-global',\n            'peer-limit-per-torrent',\n            'peer-port',\n            'peer-port-random-on-start',\n            'pex-enabled',\n            'port-forwarding-enabled',\n            'rename-partial-files',\n            'seedRatioLimit',\n            'seedRatioLimited',\n            'speed-limit-down',\n            'speed-limit-down-enabled',\n            'speed-limit-up',\n            'speed-limit-up-enabled',\n            'start-added-torrents',\n            'utp-enabled'\n        ],\n\n        // map of keys that are enabled only if a 'parent' key is enabled\n        groups: {\n            'alt-speed-time-enabled': ['alt-speed-time-begin',\n                                       'alt-speed-time-day',\n                                       'alt-speed-time-end' ],\n            'blocklist-enabled': ['blocklist-url',\n                                  'blocklist-update-button' ],\n            'idle-seeding-limit-enabled': [ 'idle-seeding-limit' ],\n            'seedRatioLimited': [ 'seedRatioLimit' ],\n            'speed-limit-down-enabled': [ 'speed-limit-down' ],\n            'speed-limit-up-enabled': [ 'speed-limit-up' ]\n        }\n    },\n\n    initTimeDropDown = function(e)\n    {\n        var i, hour, mins, value, content;\n\n        for (i=0; i<24*4; ++i) {\n            hour = parseInt(i/4, 10);\n            mins = ((i%4) * 15);\n            value = i * 15;\n            content = hour + ':' + (mins || '00');\n            e.options[i] = new Option(content, value);\n        }\n    },\n\n    onPortChecked = function(response)\n    {\n        var is_open = response['arguments']['port-is-open'],\n            text = 'Port is <b>' + (is_open ? 'Open' : 'Closed') + '</b>',\n            e = data.elements.root.find('#port-label');\n        setInnerHTML(e[0],text);\n    },\n\n    setGroupEnabled = function(parent_key, enabled)\n    {\n        var i, key, keys, root;\n\n        if (parent_key in data.groups)\n        {\n            root = data.elements.root,\n            keys = data.groups[parent_key];\n\n            for (i=0; key=keys[i]; ++i)\n                root.find('#'+key).attr('disabled',!enabled);\n        }\n    },\n\n    onBlocklistUpdateClicked = function ()\n    {\n        data.remote.updateBlocklist();\n        setBlocklistButtonEnabled(false);\n    },\n    setBlocklistButtonEnabled = function(b)\n    {\n        var e = data.elements.blocklist_button;\n        e.attr('disabled',!b);\n        e.val(b ? 'Update' : 'Updating...');\n    },\n\n    getValue = function(e)\n    {\n        var str;\n\n        switch (e[0].type)\n        {\n            case 'checkbox':\n            case 'radio':\n                return e.prop('checked');\n\n            case 'text':\n            case 'url':\n            case 'email':\n            case 'number':\n            case 'search':\n            case 'select-one':\n                str = e.val();\n                if( parseInt(str,10).toString() === str)\n                    return parseInt(str,10);\n                if( parseFloat(str).toString() === str)\n                    return parseFloat(str);\n                return str;\n\n            default:\n                return null;\n        }\n    },\n\n    /* this callback is for controls whose changes can be applied\n       immediately, like checkboxs, radioboxes, and selects */\n    onControlChanged = function(ev)\n    {\n        var o = {};\n        o[ev.target.id] = getValue($(ev.target));\n        data.remote.savePrefs(o);\n    },\n        \n    /* these two callbacks are for controls whose changes can't be applied\n       immediately -- like a text entry field -- because it takes many\n       change events for the user to get to the desired result */\n    onControlFocused  = function(ev)\n    {\n        data.oldValue = getValue($(ev.target));\n    },\n    onControlBlurred  = function(ev)\n    {\n        var newValue = getValue($(ev.target));\n        if (newValue !== data.oldValue)\n        {\n            var o = {};\n            o[ev.target.id] = newValue;\n            data.remote.savePrefs(o);\n            delete data.oldValue;\n        }\n    },\n\n    getDefaultMobileOptions = function()\n    {\n        return {\n            width: $(window).width(),\n            height: $(window).height(),\n            position: [ 'left', 'top' ]\n        };\n    },\n\n    initialize = function (remote)\n    {\n        var i, key, e, o;\n\n        data.remote = remote;\n\n        e = $('#prefs-dialog');\n        data.elements.root = e;\n\n        initTimeDropDown(e.find('#alt-speed-time-begin')[0]);\n        initTimeDropDown(e.find('#alt-speed-time-end')[0]);\n\n        o = isMobileDevice\n          ? getDefaultMobileOptions()\n          : { width: 350, height: 400 };\n        o.autoOpen = false;\n        o.show = o.hide = 'fade';\n        o.close = onDialogClosed;\n        e.tabbedDialog(o);\n\n        e = e.find('#blocklist-update-button');\n        data.elements.blocklist_button = e;\n        e.click(onBlocklistUpdateClicked);\n\n        // listen for user input\n        for (i=0; key=data.keys[i]; ++i)\n        {\n            e = data.elements.root.find('#'+key);\n            switch (e[0].type)\n            {\n                case 'checkbox':\n                case 'radio':\n                case 'select-one':\n                    e.change(onControlChanged);\n                    break;\n\n                case 'text':\n                case 'url':\n                case 'email':\n                case 'number':\n                case 'search':\n                    e.focus(onControlFocused);\n                    e.blur(onControlBlurred);\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    getValues = function()\n    {\n        var i, key, val, o={},\n            keys = data.keys,\n            root = data.elements.root;\n\n        for (i=0; key=keys[i]; ++i) {\n            val = getValue(root.find('#'+key));\n            if (val !== null)\n                o[key] = val;\n        }\n\n        return o;\n    },\n\n    onDialogClosed = function()\n    {\n        transmission.hideMobileAddressbar();\n\n        $(data.dialog).trigger('closed', getValues());\n    };\n\n    /****\n    *****  PUBLIC FUNCTIONS\n    ****/\n\n    // update the dialog's controls\n    this.set = function (o)\n    {\n        var e, i, key, val, option,\n            keys = data.keys,\n            root = data.elements.root;\n\n        setBlocklistButtonEnabled(true);\n\n        for (i=0; key=keys[i]; ++i)\n        {\n            val = o[key];\n            e = root.find('#'+key);\n\n            if (key === 'blocklist-size')\n            {\n                // special case -- regular text area\n                e.text('' + val.toStringWithCommas());\n            }\n            else switch (e[0].type)\n            {\n                case 'checkbox':\n                case 'radio':\n                    e.prop('checked', val);\n                    setGroupEnabled(key, val);\n                    break;\n                case 'text':\n                case 'url':\n                case 'email':\n                case 'number':\n                case 'search':\n                    // don't change the text if the user's editing it.\n                    // it's very annoying when that happens!\n                    if (e[0] !== document.activeElement)\n                        e.val(val);\n                    break;\n                case 'select-one':\n                    e.val(val);\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n\n    this.show = function ()\n    {\n        transmission.hideMobileAddressbar();\n\n        setBlocklistButtonEnabled(true);\n        data.remote.checkPort(onPortChecked,this);\n        data.elements.root.dialog('open');\n    };\n\n    this.close = function ()\n    {\n        transmission.hideMobileAddressbar();\n        data.elements.root.dialog('close');\n    },\n\n    this.shouldAddedTorrentsStart = function()\n    {\n        return data.elements.root.find('#start-added-torrents')[0].checked;\n    };\n\n    data.dialog = this;\n    initialize (remote);\n};\n"],"sourceRoot":"/source/"}