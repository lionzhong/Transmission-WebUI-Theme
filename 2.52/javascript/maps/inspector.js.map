{"version":3,"sources":["inspector.js"],"names":["Inspector","controller","data","elements","torrents","needsExtraInfo","i","tor","hasExtraInfo","refreshTorrents","fields","ids","$","map","slice","t","getId","length","concat","Torrent","Fields","StatsExtra","merge","InfoExtra","updateTorrents","onTabClicked","ev","tab","currentTarget","isMobileDevice","stopPropagation","addClass","siblings","removeClass","id","replace","show","hide","updateInspector","name","e","getName","setTextContent","name_lb","na","info_page","is","updateInfoPage","peers_page","updatePeersPage","trackers_page","updateTrackersPage","files_page","updateFilesPage","isMixed","allPaused","allFinished","str","baseline","it","stateString","latest","pieces","size","pieceSize","creator","mixed_creator","date","mixed_date","v","u","f","d","fmt","Transmission","none","mixed","unknown","sizeWhenDone","leftUntilDone","available","haveVerified","haveUnverified","verifiedPieces","now","Date","getStatus","isStopped","isFinished","getStateString","state_lb","needsMetaData","getHaveUnchecked","getHaveValid","getPieceSize","getSizeWhenDone","getLeftUntilDone","getHave","getDesiredAvailable","percentString","have_lb","availability_lb","getDownloadedEver","getFailedEver","downloaded_lb","getUploadedEver","ratioString","Math","ratio","uploaded_lb","getStartDate","timeInterval","running_time_lb","getETA","remaining_time_lb","getLastActivity","last_activity_lb","getErrorString","error_lb","getPieceCount","getTotalSize","toStringWithCommas","mem","size_lb","getHashString","hash_lb","getPrivateFlag","privacy_lb","getComment","comment_lb","getCreator","getDateCreated","toDateString","origin_lb","getDownloadDir","foldername_lb","changeFileCommand","rows","command","torrentId","file_torrent","rowIndices","row","getIndex","selectAllFiles","deselectAllFiles","onFileWantedToggled","want","onFilePriorityToggled","priority","clearFileList","file_list","empty","file_rows","n","fragment","getFileCount","document","createDocumentFragment","FileRow","appendChild","getElement","bind","k","peers","peer","parity","html","peers_list","getPeers","push","sanitizeText","isEncrypted","rateToPeer","speedBps","rateToClient","floor","progress","peerStatus","flagStr","address","clientName","setInnerHTML","join","getAnnounceState","tracker","timeUntilAnnounce","s","announceState","_TrackerActive","_TrackerWaiting","nextAnnounceTime","getTime","_TrackerQueued","_TrackerInactive","isBackup","lastAnnounceStatus","lastAnnounceTime","lastAnnounceLabel","lastAnnounce","hasAnnounced","timestamp","lastAnnounceSucceeded","plural","lastAnnouncePeerCount","lastAnnounceResult","label","value","lastScrapeStatus","lastScrapeTime","lastScrapeLabel","lastScrape","hasScraped","lastScrapeSucceeded","lastScrapeResult","j","tier","trackers","lastAnnounceStatusHash","lastScrapeStatusHash","trackers_list","getTrackers","announce","host","seederCount","leecherCount","downloadCount","initialize","click","this","setTorrents","unbind","proxy","clearInterval","refreshInterval","setInterval"],"mappings":"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","file":"inspector.js","sourcesContent":["/**\n * Copyright © Jordan Lee, Dave Perrett, Malcolm Jarvis and Bruno Bierbaumer\n *\n * This file is licensed under the GPLv2.\n * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n */\n\nfunction Inspector(controller) {\n\n    var data = {\n        controller: null,\n        elements: { },\n        torrents: [ ]\n    },\n\n    needsExtraInfo = function (torrents) {\n        var i, id, tor;\n\n        for (i = 0; tor = torrents[i]; i++)\n            if (!tor.hasExtraInfo())\n                return true;\n\n        return false;\n    },\n\n    refreshTorrents = function () {\n        var fields,\n            ids = $.map(data.torrents.slice(0), function (t) {return t.getId();});\n\n        if (ids && ids.length)\n        {\n            fields = ['id'].concat(Torrent.Fields.StatsExtra);\n\n            if (needsExtraInfo(data.torrents))\n                $.merge(fields, Torrent.Fields.InfoExtra);\n\n            data.controller.updateTorrents(ids, fields);\n        }\n    },\n\n    onTabClicked = function (ev) {\n        var tab = ev.currentTarget;\n\n        if (isMobileDevice)\n            ev.stopPropagation();\n\n        // select this tab and deselect the others\n        $(tab).addClass('selected').siblings().removeClass('selected');\n\n        // show this tab and hide the others\n        $('#' + tab.id.replace('tab','page')).show().siblings('.inspector-page').hide();\n\n        updateInspector();\n    },\n\n    updateInspector = function () {\n        var e = data.elements,\n            torrents = data.torrents,\n            name;\n\n        // update the name, which is shown on all the pages\n        if (!torrents || !torrents.length)\n            name = 'No Selection';\n        else if(torrents.length === 1)\n            name = torrents[0].getName();\n        else\n            name = '' + torrents.length+' Transfers Selected';\n        setTextContent(e.name_lb, name || na);\n\n        // update the visible page\n        if ($(e.info_page).is(':visible'))\n            updateInfoPage();\n        else if ($(e.peers_page).is(':visible'))\n            updatePeersPage();\n        else if ($(e.trackers_page).is(':visible'))\n            updateTrackersPage();\n        else if ($(e.files_page).is(':visible'))\n            updateFilesPage();\n    },\n\n    /****\n    *****  GENERAL INFO PAGE\n    ****/\n\n    accumulateString = function (oldVal, newVal) {\n        if (!oldVal || !oldVal.length)\n            return newVal;\n        if (oldVal === newVal)\n            return newVal;\n        return 'Mixed';\n    },\n\n    updateInfoPage = function () {\n        var torrents = data.torrents,\n            e = data.elements,\n            fmt = Transmission.fmt,\n            none = 'None',\n            mixed = 'Mixed',\n            unknown = 'Unknown',\n            isMixed, allPaused, allFinished,\n            str,\n            baseline, it, s, i, t,\n            sizeWhenDone = 0,\n            leftUntilDone = 0,\n            available = 0,\n            haveVerified = 0,\n            haveUnverified = 0,\n            verifiedPieces = 0,\n            stateString,\n            latest,\n            pieces,\n            size,\n            pieceSize,\n            creator, mixed_creator,\n            date, mixed_date,\n            v, u, f, d, pct,\n            now = Date.now();\n\n        //\n        //  state_lb\n        //\n\n        if(torrents.length <1)\n            str = none;\n        else {\n            isMixed = false;\n            allPaused = true;\n            allFinished = true;\n\n            baseline = torrents[0].getStatus();\n            for(i=0; t=torrents[i]; ++i) {\n                it = t.getStatus();\n                if(it != baseline)\n                    isMixed = true;\n                if(!t.isStopped())\n                    allPaused = allFinished = false;\n                if(!t.isFinished())\n                    allFinished = false;\n            }\n            if( isMixed )\n                str = mixed;\n            else if( allFinished )\n                str = 'Finished';\n            else if( allPaused )\n                str = 'Paused';\n            else\n                str = torrents[0].getStateString();\n        }\n        setTextContent(e.state_lb, str);\n        stateString = str;\n\n        //\n        //  have_lb\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            baseline = torrents[0].getStatus();\n            for(i=0; t=torrents[i]; ++i) {\n                if(!t.needsMetaData()) {\n                    haveUnverified += t.getHaveUnchecked();\n                    v = t.getHaveValid();\n                    haveVerified += v;\n                    if(t.getPieceSize())\n                        verifiedPieces += v / t.getPieceSize();\n                    sizeWhenDone += t.getSizeWhenDone();\n                    leftUntilDone += t.getLeftUntilDone();\n                    available += (t.getHave()) + t.getDesiredAvailable();\n                }\n            }\n\n            d = 100.0 * ( sizeWhenDone ? ( sizeWhenDone - leftUntilDone ) / sizeWhenDone : 1 );\n            str = fmt.percentString( d );\n\n            if( !haveUnverified && !leftUntilDone )\n                str = fmt.size(haveVerified) + ' (100%)';\n            else if( !haveUnverified )\n                str = fmt.size(haveVerified) + ' of ' + fmt.size(sizeWhenDone) + ' (' + str +'%)';\n            else\n                str = fmt.size(haveVerified) + ' of ' + fmt.size(sizeWhenDone) + ' (' + str +'%), ' + fmt.size(haveUnverified) + ' Unverified';\n        }\n        setTextContent(e.have_lb, str);\n\n        //\n        //  availability_lb\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else if( sizeWhenDone == 0 )\n            str = none;\n        else\n            str = '' + fmt.percentString( ( 100.0 * available ) / sizeWhenDone ) +  '%';\n        setTextContent(e.availability_lb, str);\n\n        //\n        //  downloaded_lb\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            d = f = 0;\n            for(i=0; t=torrents[i]; ++i) {\n                d += t.getDownloadedEver();\n                f += t.getFailedEver();\n            }\n            if(f)\n                str = fmt.size(d) + ' (' + fmt.size(f) + ' corrupt)';\n            else\n                str = fmt.size(d);\n        }\n        setTextContent(e.downloaded_lb, str);\n\n        //\n        //  uploaded_lb\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            d = u = 0;\n            if(torrents.length == 1) {\n\t\t\t\td = torrents[0].getDownloadedEver();\n\t\t\t\tu = torrents[0].getUploadedEver();\n\t\t\t\t\n\t\t\t\tif (d == 0)\n\t\t\t\t\td = torrents[0].getHaveValid();\n            }\n            else {\n\t\t\t\tfor(i=0; t=torrents[i]; ++i) {\n\t\t\t\t\td += t.getDownloadedEver();\n\t\t\t\t\tu += t.getUploadedEver();\n\t\t\t\t}\n\t\t\t}\n            str = fmt.size(u) + ' (Ratio: ' + fmt.ratioString( Math.ratio(u,d))+')';\n        }\n        setTextContent(e.uploaded_lb, str);\n\n        //\n        // running time\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            allPaused = true;\n            baseline = torrents[0].getStartDate();\n            for(i=0; t=torrents[i]; ++i) {\n                if(baseline != t.getStartDate())\n                    baseline = 0;\n                if(!t.isStopped())\n                    allPaused = false;\n            }\n            if(allPaused)\n                str = stateString; // paused || finished\n            else if(!baseline)\n                str = mixed;\n            else\n                str = fmt.timeInterval(now/1000 - baseline);\n        }\n        setTextContent(e.running_time_lb, str);\n\n        //\n        // remaining time\n        //\n\n        str = '';\n        if(torrents.length < 1)\n            str = none;\n        else {\n            baseline = torrents[0].getETA();\n            for(i=0; t=torrents[i]; ++i) {\n                if(baseline != t.getETA()) {\n                    str = mixed;\n                    break;\n                }\n            }\n        }\n        if(!str.length) {\n            if(baseline < 0)\n                str = unknown;\n            else\n                str = fmt.timeInterval(baseline);\n        }\n        setTextContent(e.remaining_time_lb, str);\n\n        //\n        // last activity\n        //\n\n        latest = -1;\n        if(torrents.length < 1)\n            str = none;\n        else {\n            baseline = torrents[0].getLastActivity();\n            for(i=0; t=torrents[i]; ++i) {\n                d = t.getLastActivity();\n                if(latest < d)\n                    latest = d;\n            }\n            d = now/1000 - latest; // seconds since last activity\n            if(d < 0)\n                str = none;\n            else if(d < 5)\n                str = 'Active now';\n            else\n                str = fmt.timeInterval(d) + ' ago';\n        }\n        setTextContent(e.last_activity_lb, str);\n\n        //\n        // error\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            str = torrents[0].getErrorString();\n            for(i=0; t=torrents[i]; ++i) {\n                if(str != t.getErrorString()) {\n                    str = mixed;\n                    break;\n                }\n            }\n        }\n        setTextContent(e.error_lb, str || none);\n\n        //\n        // size\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            pieces = 0;\n            size = 0;\n            pieceSize = torrents[0].getPieceSize();\n            for(i=0; t=torrents[i]; ++i) {\n                pieces += t.getPieceCount();\n                size += t.getTotalSize();\n                if(pieceSize != t.getPieceSize())\n                    pieceSize = 0;\n            }\n            if(!size)\n                str = none;\n            else if(pieceSize > 0)\n                str = fmt.size(size) + ' (' + pieces.toStringWithCommas() + ' pieces @ ' + fmt.mem(pieceSize) + ')';\n            else\n                str = fmt.size(size) + ' (' + pieces.toStringWithCommas() + ' pieces)';\n        }\n        setTextContent(e.size_lb, str);\n\n        //\n        //  hash\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            str = torrents[0].getHashString();\n            for(i=0; t=torrents[i]; ++i) {\n                if(str != t.getHashString()) {\n                    str = mixed;\n                    break;\n                }\n            }\n        }\n        setTextContent(e.hash_lb, str);\n\n        //\n        //  privacy\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            baseline = torrents[0].getPrivateFlag();\n            str = baseline ? 'Private to this tracker -- DHT and PEX disabled' : 'Public torrent';\n            for(i=0; t=torrents[i]; ++i) {\n                if(baseline != t.getPrivateFlag()) {\n                    str = mixed;\n                    break;\n                }\n            }\n        }\n        setTextContent(e.privacy_lb, str);\n\n        //\n        //  comment\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            str = torrents[0].getComment();\n            for(i=0; t=torrents[i]; ++i) {\n                if(str != t.getComment()) {\n                    str = mixed;\n                    break;\n                }\n            }\n        }\n        if(!str)\n            str = none;  \n        setTextContent(e.comment_lb, str.replace(/(https?|ftp):\\/\\/([\\w\\-]+(\\.[\\w\\-]+)*(\\.[a-z]{2,4})?)(\\d{1,5})?(\\/([^<>\\s]*))?/g, '<a target=\"_blank\" href=\"$&\">$&</a>'));\n\n        //\n        //  origin\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            mixed_creator = false;\n            mixed_date = false;\n            creator = torrents[0].getCreator();\n            date = torrents[0].getDateCreated();\n            for(i=0; t=torrents[i]; ++i) {\n                if(creator != t.getCreator())\n                    mixed_creator = true;\n                if(date != t.getDateCreated())\n                    mixed_date = true;\n            }\n            if(mixed_creator && mixed_date)\n                str = mixed;\n            else if(mixed_date && creator.length)\n                str = 'Created by ' + creator;\n            else if(mixed_creator && date)\n                str = 'Created on ' + (new Date(date*1000)).toDateString();\n            else\n                str = 'Created by ' + creator + ' on ' + (new Date(date*1000)).toDateString();\n        }\n        setTextContent(e.origin_lb, str);\n\n        //\n        //  foldername\n        //\n\n        if(torrents.length < 1)\n            str = none;\n        else {\n            str = torrents[0].getDownloadDir();\n            for(i=0; t=torrents[i]; ++i) {\n                if(str != t.getDownloadDir()) {\n                    str = mixed;\n                    break;\n                }\n            }\n        }\n        setTextContent(e.foldername_lb, str);\n    },\n\n    /****\n    *****  FILES PAGE\n    ****/\n\n    changeFileCommand = function(rows, command) {\n        var torrentId = data.file_torrent.getId();\n        var rowIndices = $.map(rows.slice(0),function (row) {return row.getIndex();});\n        data.controller.changeFileCommand(torrentId, rowIndices, command);\n    },\n\n    selectAllFiles = function() {\n        changeFileCommand([], 'files-wanted');\n    },\n\n    deselectAllFiles = function() {\n        changeFileCommand([], 'files-unwanted');\n    },\n\n    onFileWantedToggled = function(ev, row, want) {\n        changeFileCommand([row], want?'files-wanted':'files-unwanted');\n    },\n\n    onFilePriorityToggled = function(ev, row, priority) {\n        var command;\n        switch(priority) {\n            case -1: command = 'priority-low'; break;\n            case  1: command = 'priority-high'; break;\n            default: command = 'priority-normal'; break;\n        }\n        changeFileCommand([row], command);\n    },\n\n    clearFileList = function() {\n        $(data.elements.file_list).empty();\n        delete data.file_torrent;\n        delete data.file_rows;\n    },\n\n    updateFilesPage = function() {\n        var i, n, sel, row, tor, fragment,\n            file_list = data.elements.file_list,\n            torrents = data.torrents;\n\n        if (torrents.length !== 1) {\n            clearFileList();\n            return;\n        }\n\n        // build the file list\n        tor = torrents[0];\n\n        clearFileList();\n        data.file_torrent = tor;\n        n = tor.getFileCount();\n        data.file_rows = [];\n        fragment = document.createDocumentFragment();\n\n        for (i=0; i<n; ++i) {\n            row = data.file_rows[i] = new FileRow(tor, i);\n            fragment.appendChild(row.getElement());\n                    $(row).bind('wantedToggled',onFileWantedToggled);\n                    $(row).bind('priorityToggled',onFilePriorityToggled);\n        }\n\n        file_list.appendChild(fragment);\n    },\n\n    /****\n    *****  PEERS PAGE\n    ****/\n\n    updatePeersPage = function() {\n        var i, k, tor, peers, peer, parity,\n            html = [],\n            fmt = Transmission.fmt,\n            peers_list = data.elements.peers_list,\n            torrents = data.torrents;\n\n        for (k=0; tor=torrents[k]; ++k)\n        {\n            peers = tor.getPeers();\n            html.push('<div class=\"inspector_group\">');\n            if (torrents.length > 1) {\n                html.push('<div class=\"inspector_torrent_label\">', sanitizeText(tor.getName()), '</div>');\n            }\n            if (!peers || !peers.length) {\n                html.push('<br></div>'); // firefox won't paint the top border if the div is empty\n                continue;\n            }\n            html.push('<table class=\"peer_list\">',\n                   '<tr class=\"inspector_peer_entry even\">',\n                   '<th class=\"encryptedCol\"></th>',\n                   '<th class=\"upCol\">上传</th>',\n                   '<th class=\"downCol\">下载</th>',\n                   '<th class=\"percentCol\">%</th>',\n                   '<th class=\"statusCol\">状态</th>',\n                   '<th class=\"addressCol\">地址</th>',\n                   '<th class=\"clientCol\">客户端</th>',\n                   '</tr>');\n            for (i=0; peer=peers[i]; ++i) {\n                parity = (i%2) ? 'odd' : 'even';\n                html.push('<tr class=\"inspector_peer_entry ', parity, '\">',\n                       '<td>', (peer.isEncrypted ? '<div class=\"encrypted-peer-cell\" title=\"Encrypted Connection\">'\n                                                 : '<div class=\"unencrypted-peer-cell\">'), '</div>', '</td>',\n                       '<td>', (peer.rateToPeer ? fmt.speedBps(peer.rateToPeer) : ''), '</td>',\n                       '<td>', (peer.rateToClient ? fmt.speedBps(peer.rateToClient) : ''), '</td>',\n                       '<td class=\"percentCol\">', Math.floor(peer.progress*100), '%', '</td>',\n                       '<td>', fmt.peerStatus(peer.flagStr), '</td>',\n                       '<td>', sanitizeText(peer.address), '</td>',\n                       '<td class=\"clientCol\">', sanitizeText(peer.clientName), '</td>',\n                       '</tr>');\n            }\n            html.push('</table></div>');\n        }\n\n        setInnerHTML(peers_list, html.join(''));\n    },\n\n    /****\n    *****  TRACKERS PAGE\n    ****/\n\n    getAnnounceState = function(tracker) {\n        var timeUntilAnnounce, s = '';\n        switch (tracker.announceState) {\n            case Torrent._TrackerActive:\n                s = 'Announce in progress';\n                break;\n            case Torrent._TrackerWaiting:\n                timeUntilAnnounce = tracker.nextAnnounceTime - ((new Date()).getTime() / 1000);\n                if (timeUntilAnnounce < 0) {\n                    timeUntilAnnounce = 0;\n                }\n                s = 'Next announce in ' + Transmission.fmt.timeInterval(timeUntilAnnounce);\n                break;\n            case Torrent._TrackerQueued:\n                s = 'Announce is queued';\n                break;\n            case Torrent._TrackerInactive:\n                s = tracker.isBackup ?\n                    'Tracker will be used as a backup' :\n                    'Announce not scheduled';\n                break;\n            default:\n                s = 'unknown announce state: ' + tracker.announceState;\n        }\n        return s;\n    },\n\n    lastAnnounceStatus = function(tracker) {\n\n        var lastAnnounceLabel = 'Last Announce',\n            lastAnnounce = [ 'N/A' ],\n        lastAnnounceTime;\n\n        if (tracker.hasAnnounced) {\n            lastAnnounceTime = Transmission.fmt.timestamp(tracker.lastAnnounceTime);\n            if (tracker.lastAnnounceSucceeded) {\n                lastAnnounce = [ lastAnnounceTime, ' (got ',  Transmission.fmt.plural(tracker.lastAnnouncePeerCount, 'peer'), ')' ];\n            } else {\n                lastAnnounceLabel = 'Announce error';\n                lastAnnounce = [ (tracker.lastAnnounceResult ? (tracker.lastAnnounceResult + ' - ') : ''), lastAnnounceTime ];\n            }\n        }\n        return { 'label':lastAnnounceLabel, 'value':lastAnnounce.join('') };\n    },\n\n    lastScrapeStatus = function(tracker) {\n\n        var lastScrapeLabel = 'Last Scrape',\n            lastScrape = 'N/A',\n        lastScrapeTime;\n\n        if (tracker.hasScraped) {\n            lastScrapeTime = Transmission.fmt.timestamp(tracker.lastScrapeTime);\n            if (tracker.lastScrapeSucceeded) {\n                lastScrape = lastScrapeTime;\n            } else {\n                lastScrapeLabel = 'Scrape error';\n                lastScrape = (tracker.lastScrapeResult ? tracker.lastScrapeResult + ' - ' : '') + lastScrapeTime;\n            }\n        }\n        return {'label':lastScrapeLabel, 'value':lastScrape};\n    },\n\n    updateTrackersPage = function() {\n        var i, j, tier, tracker, trackers, tor,\n            html, parity, lastAnnounceStatusHash,\n            announceState, lastScrapeStatusHash,\n            na = 'N/A',\n            trackers_list = data.elements.trackers_list,\n            torrents = data.torrents;\n\n        // By building up the HTML as as string, then have the browser\n        // turn this into a DOM tree, this is a fast operation.\n        html = [];\n        for (i=0; tor=torrents[i]; ++i)\n        {\n            html.push ('<div class=\"inspector_group\">');\n\n            if (torrents.length > 1)\n                html.push('<div class=\"inspector_torrent_label\">', tor.getName(), '</div>');\n\n            tier = -1;\n            trackers = tor.getTrackers();\n            for (j=0; tracker=trackers[j]; ++j)\n            {\n                if (tier != tracker.tier)\n                {\n                    if (tier !== -1) // close previous tier\n                        html.push('</ul></div>');\n\n                    tier = tracker.tier;\n\n                    html.push('<div class=\"inspector_group_label\">',\n                          'Tier ', tier, '</div>',\n                          '<ul class=\"tier_list\">');\n                }\n\n                // Display construction\n                lastAnnounceStatusHash = lastAnnounceStatus(tracker);\n                announceState = getAnnounceState(tracker);\n                lastScrapeStatusHash = lastScrapeStatus(tracker);\n                parity = (j%2) ? 'odd' : 'even';\n                html.push('<li class=\"inspector_tracker_entry ', parity, '\"><div class=\"tracker_host\" title=\"', sanitizeText(tracker.announce), '\">',\n                      sanitizeText(tracker.host), '</div>',\n                      '<div class=\"tracker_activity\">',\n                      '<div>', lastAnnounceStatusHash['label'], ': ', lastAnnounceStatusHash['value'], '</div>',\n                      '<div>', announceState, '</div>',\n                      '<div>', lastScrapeStatusHash['label'], ': ', lastScrapeStatusHash['value'], '</div>',\n                      '</div><table class=\"tracker_stats\">',\n                      '<tr><th>Seeders:</th><td>', (tracker.seederCount > -1 ? tracker.seederCount : na), '</td></tr>',\n                      '<tr><th>Leechers:</th><td>', (tracker.leecherCount > -1 ? tracker.leecherCount : na), '</td></tr>',\n                      '<tr><th>Downloads:</th><td>', (tracker.downloadCount > -1 ? tracker.downloadCount : na), '</td></tr>',\n                      '</table></li>');\n            }\n            if (tier !== -1) // close last tier\n                    html.push('</ul></div>');\n\n            html.push('</div>'); // inspector_group\n        }\n\n        setInnerHTML (trackers_list, html.join(''));\n    },\n\n    initialize = function (controller) {\n\n        var ti = '#torrent_inspector_';\n\n        data.controller = controller;\n\n        $('.inspector-tab').click(onTabClicked);\n\n        data.elements.info_page      = $('#inspector-page-info')[0];\n        data.elements.files_page     = $('#inspector-page-files')[0];\n        data.elements.peers_page     = $('#inspector-page-peers')[0];\n        data.elements.trackers_page  = $('#inspector-page-trackers')[0];\n\n        data.elements.file_list      = $('#inspector_file_list')[0];\n        data.elements.peers_list     = $('#inspector_peers_list')[0];\n        data.elements.trackers_list  = $('#inspector_trackers_list')[0];\n\n\tdata.elements.have_lb           = $('#inspector-info-have')[0];\n\tdata.elements.availability_lb   = $('#inspector-info-availability')[0];\n\tdata.elements.downloaded_lb     = $('#inspector-info-downloaded')[0];\n\tdata.elements.uploaded_lb       = $('#inspector-info-uploaded')[0];\n\tdata.elements.state_lb          = $('#inspector-info-state')[0];\n\tdata.elements.running_time_lb   = $('#inspector-info-running-time')[0];\n\tdata.elements.remaining_time_lb = $('#inspector-info-remaining-time')[0];\n\tdata.elements.last_activity_lb  = $('#inspector-info-last-activity')[0];\n\tdata.elements.error_lb          = $('#inspector-info-error')[0];\n\tdata.elements.size_lb           = $('#inspector-info-size')[0];\n\tdata.elements.foldername_lb     = $('#inspector-info-location')[0];\n\tdata.elements.hash_lb           = $('#inspector-info-hash')[0];\n\tdata.elements.privacy_lb        = $('#inspector-info-privacy')[0];\n\tdata.elements.origin_lb         = $('#inspector-info-origin')[0];\n\tdata.elements.comment_lb        = $('#inspector-info-comment')[0];\n        data.elements.name_lb           = $('#torrent_inspector_name')[0];\n\n        // file page's buttons\n        $('#select-all-files').click(selectAllFiles);\n        $('#deselect-all-files').click(deselectAllFiles);\n\n        // force initial 'N/A' updates on all the pages\n        updateInspector();\n        updateInfoPage();\n        updatePeersPage();\n        updateTrackersPage();\n        updateFilesPage();\n    };\n\n    /****\n    *****  PUBLIC FUNCTIONS\n    ****/\n\n    this.setTorrents = function (torrents) {\n        var d = data;\n\n        // update the inspector when a selected torrent's data changes.\n        $(d.torrents).unbind('dataChanged.inspector');\n        $(torrents).bind('dataChanged.inspector', $.proxy(updateInspector,this));\n        d.torrents = torrents;\n\n        // periodically ask for updates to the inspector's torrents\n        clearInterval(d.refreshInterval);\n        d.refreshInterval = setInterval($.proxy(refreshTorrents,this), 2000);\n        refreshTorrents();\n\n        // refresh the inspector's UI\n        updateInspector();\n    };\n\n    initialize (controller);\n};\n"],"sourceRoot":"/source/"}