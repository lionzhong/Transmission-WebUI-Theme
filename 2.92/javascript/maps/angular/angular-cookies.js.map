{"version":3,"sources":["angular/angular-cookies.js"],"names":["window","angular","$$CookieWriter","$document","$log","$browser","buildCookieString","name","value","options","path","expires","isDefined","cookiePath","isUndefined","isString","Date","str","encodeURIComponent","domain","toUTCString","secure","cookieLength","length","warn","baseHref","rawDocument","cookie","module","provider","calcOptions","extend","defaults","this","$get","$$cookieReader","$$cookieWriter","get","key","getObject","fromJson","getAll","put","putObject","toJson","remove","undefined","factory","$cookies","$inject"],"mappings":"CAKA,SAAUA,EAAQC,GAAU,YAmR5B,SAASC,GAAeC,EAAWC,EAAMC,GAIvC,QAASC,GAAkBC,EAAMC,EAAOC,GACtC,GAAIC,GAAMC,CACVF,GAAUA,MACVE,EAAUF,EAAQE,QAClBD,EAAOT,EAAQW,UAAUH,EAAQC,MAAQD,EAAQC,KAAOG,EACpDZ,EAAQa,YAAYN,KACtBG,EAAU,gCACVH,EAAQ,IAENP,EAAQc,SAASJ,KACnBA,EAAU,GAAIK,MAAKL,GAGrB,IAAIM,GAAMC,mBAAmBX,GAAQ,IAAMW,mBAAmBV,EAC9DS,IAAOP,EAAO,SAAWA,EAAO,GAChCO,GAAOR,EAAQU,OAAS,WAAaV,EAAQU,OAAS,GACtDF,GAAON,EAAU,YAAcA,EAAQS,cAAgB,GACvDH,GAAOR,EAAQY,OAAS,UAAY,EAMpC,IAAIC,GAAeL,EAAIM,OAAS,CAOhC,OANID,GAAe,MACjBlB,EAAKoB,KAAK,WAAcjB,EACtB,8DACAe,EAAe,mBAGZL,EAjCT,GAAIJ,GAAaR,EAASoB,WACtBC,EAAcvB,EAAU,EAmC5B,OAAO,UAASI,EAAMC,EAAOC,GAC3BiB,EAAYC,OAASrB,EAAkBC,EAAMC,EAAOC,IAvSxDR,EAAQ2B,OAAO,aAAc,OAO1BC,SAAS,YAAyB,WAoCjC,QAASC,GAAYrB,GACnB,MAAOA,GAAUR,EAAQ8B,UAAWC,EAAUvB,GAAWuB,EAH3D,GAAIA,GAAWC,KAAKD,WAiCpBC,MAAKC,MAAQ,iBAAkB,iBAAkB,SAASC,EAAgBC,GACxE,OAWEC,IAAK,SAASC,GACZ,MAAOH,KAAiBG,IAa1BC,UAAW,SAASD,GAClB,GAAI9B,GAAQyB,KAAKI,IAAIC,EACrB,OAAO9B,GAAQP,EAAQuC,SAAShC,GAASA,GAY3CiC,OAAQ,WACN,MAAON,MAeTO,IAAK,SAASJ,EAAK9B,EAAOC,GACxB2B,EAAeE,EAAK9B,EAAOsB,EAAYrB,KAezCkC,UAAW,SAASL,EAAK9B,EAAOC,GAC9BwB,KAAKS,IAAIJ,EAAKrC,EAAQ2C,OAAOpC,GAAQC,IAcvCoC,OAAQ,SAASP,EAAK7B,GACpB2B,EAAeE,EAAKQ,OAAWhB,EAAYrB,WAMrDR,EAAQ2B,OAAO,aA+BdmB,QAAQ,gBAAiB,WAAY,SAASC,GAE3C,OAWEX,IAAK,SAASC,GACZ,MAAOU,GAAST,UAAUD,IAa5BI,IAAK,SAASJ,EAAK9B,GACjBwC,EAASL,UAAUL,EAAK9B,IAY1BqC,OAAQ,SAASP,GACfU,EAASH,OAAOP,QA2DxBpC,EAAe+C,SAAW,YAAa,OAAQ,YAE/ChD,EAAQ2B,OAAO,aAAaC,SAAS,iBAA+B,WAClEI,KAAKC,KAAOhC,KAIXF,OAAQA,OAAOC","file":"../../angular/angular-cookies.js","sourcesContent":["/**\r\n * @license AngularJS v1.6.2\r\n * (c) 2010-2017 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular) {'use strict';\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngCookies\r\n * @description\r\n *\r\n * # ngCookies\r\n *\r\n * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.\r\n *\r\n *\r\n * <div doc-module-components=\"ngCookies\"></div>\r\n *\r\n * See {@link ngCookies.$cookies `$cookies`} for usage.\r\n */\r\n\r\n\r\nangular.module('ngCookies', ['ng']).\r\n  /**\r\n   * @ngdoc provider\r\n   * @name $cookiesProvider\r\n   * @description\r\n   * Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.\r\n   * */\r\n   provider('$cookies', [/** @this */function $CookiesProvider() {\r\n    /**\r\n     * @ngdoc property\r\n     * @name $cookiesProvider#defaults\r\n     * @description\r\n     *\r\n     * Object containing default options to pass when setting cookies.\r\n     *\r\n     * The object may have following properties:\r\n     *\r\n     * - **path** - `{string}` - The cookie will be available only for this path and its\r\n     *   sub-paths. By default, this is the URL that appears in your `<base>` tag.\r\n     * - **domain** - `{string}` - The cookie will be available only for this domain and\r\n     *   its sub-domains. For security reasons the user agent will not accept the cookie\r\n     *   if the current domain is not a sub-domain of this domain or equal to it.\r\n     * - **expires** - `{string|Date}` - String of the form \"Wdy, DD Mon YYYY HH:MM:SS GMT\"\r\n     *   or a Date object indicating the exact date/time this cookie will expire.\r\n     * - **secure** - `{boolean}` - If `true`, then the cookie will only be available through a\r\n     *   secured connection.\r\n     *\r\n     * Note: By default, the address that appears in your `<base>` tag will be used as the path.\r\n     * This is important so that cookies will be visible for all routes when html5mode is enabled.\r\n     *\r\n     * @example\r\n     *\r\n     * ```js\r\n     * angular.module('cookiesProviderExample', ['ngCookies'])\r\n     *   .config(['$cookiesProvider', function($cookiesProvider) {\r\n     *     // Setting default options\r\n     *     $cookiesProvider.defaults.domain = 'foo.com';\r\n     *     $cookiesProvider.defaults.secure = true;\r\n     *   }]);\r\n     * ```\r\n     **/\r\n    var defaults = this.defaults = {};\r\n\r\n    function calcOptions(options) {\r\n      return options ? angular.extend({}, defaults, options) : defaults;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name $cookies\r\n     *\r\n     * @description\r\n     * Provides read/write access to browser's cookies.\r\n     *\r\n     * <div class=\"alert alert-info\">\r\n     * Up until Angular 1.3, `$cookies` exposed properties that represented the\r\n     * current browser cookie values. In version 1.4, this behavior has changed, and\r\n     * `$cookies` now provides a standard api of getters, setters etc.\r\n     * </div>\r\n     *\r\n     * Requires the {@link ngCookies `ngCookies`} module to be installed.\r\n     *\r\n     * @example\r\n     *\r\n     * ```js\r\n     * angular.module('cookiesExample', ['ngCookies'])\r\n     *   .controller('ExampleController', ['$cookies', function($cookies) {\r\n     *     // Retrieving a cookie\r\n     *     var favoriteCookie = $cookies.get('myFavorite');\r\n     *     // Setting a cookie\r\n     *     $cookies.put('myFavorite', 'oatmeal');\r\n     *   }]);\r\n     * ```\r\n     */\r\n    this.$get = ['$$cookieReader', '$$cookieWriter', function($$cookieReader, $$cookieWriter) {\r\n      return {\r\n        /**\r\n         * @ngdoc method\r\n         * @name $cookies#get\r\n         *\r\n         * @description\r\n         * Returns the value of given cookie key\r\n         *\r\n         * @param {string} key Id to use for lookup.\r\n         * @returns {string} Raw cookie value.\r\n         */\r\n        get: function(key) {\r\n          return $$cookieReader()[key];\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $cookies#getObject\r\n         *\r\n         * @description\r\n         * Returns the deserialized value of given cookie key\r\n         *\r\n         * @param {string} key Id to use for lookup.\r\n         * @returns {Object} Deserialized cookie value.\r\n         */\r\n        getObject: function(key) {\r\n          var value = this.get(key);\r\n          return value ? angular.fromJson(value) : value;\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $cookies#getAll\r\n         *\r\n         * @description\r\n         * Returns a key value object with all the cookies\r\n         *\r\n         * @returns {Object} All cookies\r\n         */\r\n        getAll: function() {\r\n          return $$cookieReader();\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $cookies#put\r\n         *\r\n         * @description\r\n         * Sets a value for given cookie key\r\n         *\r\n         * @param {string} key Id for the `value`.\r\n         * @param {string} value Raw value to be stored.\r\n         * @param {Object=} options Options object.\r\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\r\n         */\r\n        put: function(key, value, options) {\r\n          $$cookieWriter(key, value, calcOptions(options));\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $cookies#putObject\r\n         *\r\n         * @description\r\n         * Serializes and sets a value for given cookie key\r\n         *\r\n         * @param {string} key Id for the `value`.\r\n         * @param {Object} value Value to be stored.\r\n         * @param {Object=} options Options object.\r\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\r\n         */\r\n        putObject: function(key, value, options) {\r\n          this.put(key, angular.toJson(value), options);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $cookies#remove\r\n         *\r\n         * @description\r\n         * Remove given cookie\r\n         *\r\n         * @param {string} key Id of the key-value pair to delete.\r\n         * @param {Object=} options Options object.\r\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\r\n         */\r\n        remove: function(key, options) {\r\n          $$cookieWriter(key, undefined, calcOptions(options));\r\n        }\r\n      };\r\n    }];\r\n  }]);\r\n\r\nangular.module('ngCookies').\r\n/**\r\n * @ngdoc service\r\n * @name $cookieStore\r\n * @deprecated\r\n * sinceVersion=\"v1.4.0\"\r\n * Please use the {@link ngCookies.$cookies `$cookies`} service instead.\r\n *\r\n * @requires $cookies\r\n *\r\n * @description\r\n * Provides a key-value (string-object) storage, that is backed by session cookies.\r\n * Objects put or retrieved from this storage are automatically serialized or\r\n * deserialized by angular's toJson/fromJson.\r\n *\r\n * Requires the {@link ngCookies `ngCookies`} module to be installed.\r\n *\r\n * @example\r\n *\r\n * ```js\r\n * angular.module('cookieStoreExample', ['ngCookies'])\r\n *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {\r\n *     // Put cookie\r\n *     $cookieStore.put('myFavorite','oatmeal');\r\n *     // Get cookie\r\n *     var favoriteCookie = $cookieStore.get('myFavorite');\r\n *     // Removing a cookie\r\n *     $cookieStore.remove('myFavorite');\r\n *   }]);\r\n * ```\r\n */\r\n factory('$cookieStore', ['$cookies', function($cookies) {\r\n\r\n    return {\r\n      /**\r\n       * @ngdoc method\r\n       * @name $cookieStore#get\r\n       *\r\n       * @description\r\n       * Returns the value of given cookie key\r\n       *\r\n       * @param {string} key Id to use for lookup.\r\n       * @returns {Object} Deserialized cookie value, undefined if the cookie does not exist.\r\n       */\r\n      get: function(key) {\r\n        return $cookies.getObject(key);\r\n      },\r\n\r\n      /**\r\n       * @ngdoc method\r\n       * @name $cookieStore#put\r\n       *\r\n       * @description\r\n       * Sets a value for given cookie key\r\n       *\r\n       * @param {string} key Id for the `value`.\r\n       * @param {Object} value Value to be stored.\r\n       */\r\n      put: function(key, value) {\r\n        $cookies.putObject(key, value);\r\n      },\r\n\r\n      /**\r\n       * @ngdoc method\r\n       * @name $cookieStore#remove\r\n       *\r\n       * @description\r\n       * Remove given cookie\r\n       *\r\n       * @param {string} key Id of the key-value pair to delete.\r\n       */\r\n      remove: function(key) {\r\n        $cookies.remove(key);\r\n      }\r\n    };\r\n\r\n  }]);\r\n\r\n/**\r\n * @name $$cookieWriter\r\n * @requires $document\r\n *\r\n * @description\r\n * This is a private service for writing cookies\r\n *\r\n * @param {string} name Cookie name\r\n * @param {string=} value Cookie value (if undefined, cookie will be deleted)\r\n * @param {Object=} options Object with options that need to be stored for the cookie.\r\n */\r\nfunction $$CookieWriter($document, $log, $browser) {\r\n  var cookiePath = $browser.baseHref();\r\n  var rawDocument = $document[0];\r\n\r\n  function buildCookieString(name, value, options) {\r\n    var path, expires;\r\n    options = options || {};\r\n    expires = options.expires;\r\n    path = angular.isDefined(options.path) ? options.path : cookiePath;\r\n    if (angular.isUndefined(value)) {\r\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\r\n      value = '';\r\n    }\r\n    if (angular.isString(expires)) {\r\n      expires = new Date(expires);\r\n    }\r\n\r\n    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);\r\n    str += path ? ';path=' + path : '';\r\n    str += options.domain ? ';domain=' + options.domain : '';\r\n    str += expires ? ';expires=' + expires.toUTCString() : '';\r\n    str += options.secure ? ';secure' : '';\r\n\r\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\r\n    // - 300 cookies\r\n    // - 20 cookies per unique domain\r\n    // - 4096 bytes per cookie\r\n    var cookieLength = str.length + 1;\r\n    if (cookieLength > 4096) {\r\n      $log.warn('Cookie \\'' + name +\r\n        '\\' possibly not set or overflowed because it was too large (' +\r\n        cookieLength + ' > 4096 bytes)!');\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n  return function(name, value, options) {\r\n    rawDocument.cookie = buildCookieString(name, value, options);\r\n  };\r\n}\r\n\r\n$$CookieWriter.$inject = ['$document', '$log', '$browser'];\r\n\r\nangular.module('ngCookies').provider('$$cookieWriter', /** @this */ function $$CookieWriterProvider() {\r\n  this.$get = $$CookieWriter;\r\n});\r\n\r\n\r\n})(window, window.angular);\r\n"]}