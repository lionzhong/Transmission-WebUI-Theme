{"version":3,"sources":["angular/angular-animate.js"],"names":["window","angular","assertArg","arg","name","reason","ngMinErr","mergeClasses","a","b","isArray","join","packageStyles","options","styles","to","from","pendClasses","classes","fix","isPrefix","className","isString","length","split","forEach","klass","i","removeFromArray","arr","val","index","indexOf","splice","stripCommentsFromElement","element","jqLite","nodeType","ELEMENT_NODE","extractElementNode","elm","$$addClass","$$jqLite","addClass","$$removeClass","removeClass","applyAnimationClassesFactory","prepareAnimationOptions","$$prepared","domOperation","noop","$$domOperationFired","applyAnimationStyles","applyAnimationFromStyles","applyAnimationToStyles","css","mergeAnimationDetails","oldAnimation","newAnimation","target","newOptions","toAdd","toRemove","resolveElementClasses","attr","preparationClasses","concatWithSpace","realDomOperation","extend","existing","splitClassesToLookup","obj","ADD_CLASS","REMOVE_CLASS","flags","value","key","prop","allow","REMOVE_CLASS_SUFFIX","ADD_CLASS_SUFFIX","getDomNode","applyGeneratedPreparationClasses","event","EVENT_CLASS_PREFIX","clearGeneratedClasses","activeClasses","blockTransitions","node","duration","applyInlineStyle","TRANSITION_DELAY_PROP","blockKeyframeAnimations","applyBlock","ANIMATION_PROP","ANIMATION_PLAYSTATE_KEY","styleTuple","style","getCssKeyframeDurationStyle","ANIMATION_DURATION_PROP","getCssDelayStyle","delay","isKeyframeAnimation","ANIMATION_DELAY_PROP","computeCssStyles","$window","properties","Object","create","detectedStyles","getComputedStyle","formalStyleName","actualStyleName","c","charAt","parseMaxTime","str","maxValue","values","substring","parseFloat","Math","max","truthyTimingValue","getCssTransitionDurationStyle","applyOnlyDuration","TRANSITION_PROP","DURATION_KEY","createLocalCacheLookup","cache","flush","count","entry","total","get","put","registerRestorableStyles","backup","isDefined","getPropertyValue","TRANSITIONEND_EVENT","ANIMATIONEND_EVENT","ACTIVE_CLASS_SUFFIX","PREPARE_CLASS_SUFFIX","NG_ANIMATE_CLASSNAME","NG_ANIMATE_CHILDREN_DATA","CSS_PREFIX","undefined","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","copy","isElement","isFunction","isObject","isUndefined","PROPERTY_KEY","DELAY_KEY","TIMING_KEY","ANIMATION_ITERATION_COUNT_KEY","SAFE_FAST_FORWARD_DURATION_VALUE","TRANSITION_DURATION_PROP","$$minErr","$$rAFSchedulerFactory","$$rAF","scheduler","tasks","queue","concat","nextTick","items","shift","cancelFn","waitUntilQuiet","fn","$$AnimateChildrenDirective","$interpolate","link","scope","attrs","setData","data","ngAnimateChildren","$observe","ANIMATE_TIMER_KEY","ONE_SECOND","ELAPSED_TIME_MAX_DECIMAL_PLACES","CLOSING_TIME_BUFFER","DETECT_CSS_PROPERTIES","transitionDuration","transitionDelay","transitionProperty","animationDuration","animationDelay","animationIterationCount","DETECT_STAGGER_CSS_PROPERTIES","$AnimateCssProvider","$animateProvider","gcsLookup","gcsStaggerLookup","this","$get","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue","gcsHashFn","extraClasses","KEY","parentNode","parentID","parentCounter","getAttribute","computeCachedCssStyles","cacheKey","timings","computeCachedCssStaggerStyles","stagger","staggerClassName","callback","rafWaitQueue","push","pageWidth","computeTimings","aD","tD","maxDelay","maxDuration","applyAnimationClasses","initialOptions","endFn","close","rejected","animationClosed","animationCompleted","animationPaused","$$skipPreparationClasses","temporaryStyles","keys","restoreStyles","setProperty","removeProperty","onDone","events","off","onAnimationProgress","animationTimerData","cancel","timer","removeData","runner","complete","applyBlocking","blockTransition","blockKeyframeAnimation","closeAndReturnNoopAnimator","end","$$willAnimate","start","stopPropagation","ev","originalEvent","timeStamp","$manualTimeStamp","Date","now","elapsedTime","toFixed","startTime","maxDelayTime","triggerAnimationStart","recalculateTimingStyles","fullClassName","relativeDelay","hasTransitions","hasAnimations","applyAnimationDelay","delayStyle","maxDurationTime","easing","easeProp","easeVal","timerTime","endTime","animationsData","setupFallbackTimer","currentTimerData","expectedEndTime","onAnimationExpired","on","cleanupStyles","playPause","playAnimation","maxStagger","itemIndex","floor","runnerHost","resume","pause","enabled","animations","transitions","method","isStructural","structural","structuralClassName","addRemoveClassName","applyClassesEarly","trim","hasToStyles","containsKeyframeAnimation","keyframeStyle","staggerVal","transitionStyle","durationStyle","staggerIndex","isFirst","skipBlocking","hasTransitionAll","applyTransitionDuration","applyAnimationDuration","applyTransitionDelay","$$AnimateCssDriverProvider","$$animationProvider","isDocumentFragment","drivers","NG_ANIMATE_SHIM_CLASS_NAME","NG_ANIMATE_ANCHOR_CLASS_NAME","NG_OUT_ANCHOR_CLASS_NAME","NG_IN_ANCHOR_CLASS_NAME","$animateCss","$rootScope","$rootElement","$document","filterCssClasses","replace","getUniqueValues","filter","prepareAnchoredAnimation","outAnchor","inAnchor","calculateAnchorStyles","anchor","coords","getBoundingClientRect","bodyNode","scrollTop","scrollLeft","prepareOutAnimation","animator","clone","getClassVal","prepareInAnimation","endingClasses","startingClasses","remove","cloneNode","rootBodyElement","append","animatorIn","animatorOut","startingAnimator","currentAnimation","done","prepareFromToAnchorAnimation","anchors","fromAnimation","prepareRegularAnimation","toAnimation","anchorAnimations","outElement","inElement","animationRunners","animation","all","status","animationDetails","body","rootNode","contains","$$AnimateJsProvider","$injector","lookupAnimations","matches","flagMap","animationFactory","$$registeredAnimations","applyOptions","executeAnimationFn","args","classesToAdd","classesToRemove","apply","groupEventedAnimations","fnName","operations","ani","endProgressCb","resolved","onAnimationComplete","result","cancelled","packageAnimations","runners","animateFn","reject","arguments","before","after","afterFn","beforeFn","toUpperCase","substr","onComplete","success","endAnimations","closeActiveAnimations","chain","setHost","$$AnimateJsDriverProvider","$$animateJs","prepareAnimation","endFnFactory","NG_ANIMATE_ATTR_NAME","NG_ANIMATE_PIN_DATA","$$AnimateQueueProvider","makeTruthyCssClassMap","classString","ONE_SPACE","map","hasMatchingClasses","newClassString","currentClassString","currentClassMap","some","isAllowed","ruleType","previousAnimation","rules","hasAnimationClasses","and","PRE_DIGEST_STATE","RUNNING_STATE","skip","state","nA","nR","cA","cR","$$Map","$$animation","$templateRequest","$$isDocumentHidden","postDigestTaskFactory","postDigestCalled","$$postDigest","normalizeAnimationDetails","findCallbacks","targetParentNode","targetNode","entries","callbackRegistry","call","filterFromRegistry","list","matchContainer","matchCallback","containerNode","isMatch","cleanupEventListeners","phase","$animate","queueAnimation","originalElement","notifyProgress","runInNextPostDigestOrNow","callbacks","progress","isAnimatableClassName","documentHidden","skipAnimations","animationsEnabled","disabledElementsLookup","existingAnimation","activeAnimationsLookup","hasExistingAnimation","areAnimationsAllowed","closeChildAnimations","skipAnimationFlag","cancelAnimationFlag","joinAnimationFlag","isValidAnimation","clearElementAnimationState","counter","markElementAnimationState","animationCancelled","parentElement","parent","realRunner","children","querySelectorAll","child","parseInt","delete","removeAttribute","animateChildren","bodyNodeDetected","nodeName","rootNodeDetected","parentAnimationDetected","elementDisabled","parentHost","details","parentNodeDisabled","allowAnimation","setAttribute","oldValue","newValue","set","deregisterWatch","$watch","totalPendingRequests","isEmpty","classNameFilter","test","Node","prototype","compareDocumentPosition","container","eventType","pin","bool","argCount","hasElement","$$AnimationProvider","setRunner","RUNNER_STORAGE_KEY","removeRunner","getRunner","NG_ANIMATE_REF_ATTR","sortAnimations","processNode","processed","elementNode","domNode","lookup","parentEntry","tree","flatten","remainingLevelEntries","nextLevelEntries","row","childEntry","animationQueue","getAnchorNodes","SELECTOR","hasAttribute","groupAnimations","preparedAnimations","refLookup","enterOrMove","anchorNodes","direction","animationID","usedIndicesLookup","anchorGroups","indexKey","toString","lookupKey","group","beforeStart","cssClassesIntersection","out","in","aa","j","invokeFirstDriver","driverName","factory","driver","tempClasses","prepareClassName","updateAnimationRunners","newRunner","update","handleDestroyedElement","groupedAnimations","toBeSortedAnimations","animationEntry","startAnimationFn","closeFn","targetElement","operation","animationRunner","ngAnimateSwapDirective","restrict","transclude","terminal","priority","$element","ctrl","$transclude","previousElement","previousScope","$watchCollection","ngAnimateSwap","leave","$destroy","$new","enter","module","directive","provider"],"mappings":"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","file":"../../angular/angular-animate.js","sourcesContent":["/**\r\n * @license AngularJS v1.6.2\r\n * (c) 2010-2017 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular) {'use strict';\r\n\r\nvar ELEMENT_NODE = 1;\r\nvar COMMENT_NODE = 8;\r\n\r\nvar ADD_CLASS_SUFFIX = '-add';\r\nvar REMOVE_CLASS_SUFFIX = '-remove';\r\nvar EVENT_CLASS_PREFIX = 'ng-';\r\nvar ACTIVE_CLASS_SUFFIX = '-active';\r\nvar PREPARE_CLASS_SUFFIX = '-prepare';\r\n\r\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\r\nvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\r\n\r\n// Detect proper transitionend/animationend event names.\r\nvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\r\n\r\n// If unprefixed events are not supported but webkit-prefixed are, use the latter.\r\n// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\r\n// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\r\n// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\r\n// Register both events in case `window.onanimationend` is not supported because of that,\r\n// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\r\n// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\r\n// therefore there is no reason to test anymore for other vendor prefixes:\r\n// http://caniuse.com/#search=transition\r\nif ((window.ontransitionend === undefined) && (window.onwebkittransitionend !== undefined)) {\r\n  CSS_PREFIX = '-webkit-';\r\n  TRANSITION_PROP = 'WebkitTransition';\r\n  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\r\n} else {\r\n  TRANSITION_PROP = 'transition';\r\n  TRANSITIONEND_EVENT = 'transitionend';\r\n}\r\n\r\nif ((window.onanimationend === undefined) && (window.onwebkitanimationend !== undefined)) {\r\n  CSS_PREFIX = '-webkit-';\r\n  ANIMATION_PROP = 'WebkitAnimation';\r\n  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\r\n} else {\r\n  ANIMATION_PROP = 'animation';\r\n  ANIMATIONEND_EVENT = 'animationend';\r\n}\r\n\r\nvar DURATION_KEY = 'Duration';\r\nvar PROPERTY_KEY = 'Property';\r\nvar DELAY_KEY = 'Delay';\r\nvar TIMING_KEY = 'TimingFunction';\r\nvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\r\nvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\r\nvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\r\n\r\nvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\r\nvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\r\nvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\r\nvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\r\n\r\nvar ngMinErr = angular.$$minErr('ng');\r\nfunction assertArg(arg, name, reason) {\r\n  if (!arg) {\r\n    throw ngMinErr('areq', 'Argument \\'{0}\\' is {1}', (name || '?'), (reason || 'required'));\r\n  }\r\n  return arg;\r\n}\r\n\r\nfunction mergeClasses(a,b) {\r\n  if (!a && !b) return '';\r\n  if (!a) return b;\r\n  if (!b) return a;\r\n  if (isArray(a)) a = a.join(' ');\r\n  if (isArray(b)) b = b.join(' ');\r\n  return a + ' ' + b;\r\n}\r\n\r\nfunction packageStyles(options) {\r\n  var styles = {};\r\n  if (options && (options.to || options.from)) {\r\n    styles.to = options.to;\r\n    styles.from = options.from;\r\n  }\r\n  return styles;\r\n}\r\n\r\nfunction pendClasses(classes, fix, isPrefix) {\r\n  var className = '';\r\n  classes = isArray(classes)\r\n      ? classes\r\n      : classes && isString(classes) && classes.length\r\n          ? classes.split(/\\s+/)\r\n          : [];\r\n  forEach(classes, function(klass, i) {\r\n    if (klass && klass.length > 0) {\r\n      className += (i > 0) ? ' ' : '';\r\n      className += isPrefix ? fix + klass\r\n                            : klass + fix;\r\n    }\r\n  });\r\n  return className;\r\n}\r\n\r\nfunction removeFromArray(arr, val) {\r\n  var index = arr.indexOf(val);\r\n  if (val >= 0) {\r\n    arr.splice(index, 1);\r\n  }\r\n}\r\n\r\nfunction stripCommentsFromElement(element) {\r\n  if (element instanceof jqLite) {\r\n    switch (element.length) {\r\n      case 0:\r\n        return element;\r\n\r\n      case 1:\r\n        // there is no point of stripping anything if the element\r\n        // is the only element within the jqLite wrapper.\r\n        // (it's important that we retain the element instance.)\r\n        if (element[0].nodeType === ELEMENT_NODE) {\r\n          return element;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        return jqLite(extractElementNode(element));\r\n    }\r\n  }\r\n\r\n  if (element.nodeType === ELEMENT_NODE) {\r\n    return jqLite(element);\r\n  }\r\n}\r\n\r\nfunction extractElementNode(element) {\r\n  if (!element[0]) return element;\r\n  for (var i = 0; i < element.length; i++) {\r\n    var elm = element[i];\r\n    if (elm.nodeType === ELEMENT_NODE) {\r\n      return elm;\r\n    }\r\n  }\r\n}\r\n\r\nfunction $$addClass($$jqLite, element, className) {\r\n  forEach(element, function(elm) {\r\n    $$jqLite.addClass(elm, className);\r\n  });\r\n}\r\n\r\nfunction $$removeClass($$jqLite, element, className) {\r\n  forEach(element, function(elm) {\r\n    $$jqLite.removeClass(elm, className);\r\n  });\r\n}\r\n\r\nfunction applyAnimationClassesFactory($$jqLite) {\r\n  return function(element, options) {\r\n    if (options.addClass) {\r\n      $$addClass($$jqLite, element, options.addClass);\r\n      options.addClass = null;\r\n    }\r\n    if (options.removeClass) {\r\n      $$removeClass($$jqLite, element, options.removeClass);\r\n      options.removeClass = null;\r\n    }\r\n  };\r\n}\r\n\r\nfunction prepareAnimationOptions(options) {\r\n  options = options || {};\r\n  if (!options.$$prepared) {\r\n    var domOperation = options.domOperation || noop;\r\n    options.domOperation = function() {\r\n      options.$$domOperationFired = true;\r\n      domOperation();\r\n      domOperation = noop;\r\n    };\r\n    options.$$prepared = true;\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction applyAnimationStyles(element, options) {\r\n  applyAnimationFromStyles(element, options);\r\n  applyAnimationToStyles(element, options);\r\n}\r\n\r\nfunction applyAnimationFromStyles(element, options) {\r\n  if (options.from) {\r\n    element.css(options.from);\r\n    options.from = null;\r\n  }\r\n}\r\n\r\nfunction applyAnimationToStyles(element, options) {\r\n  if (options.to) {\r\n    element.css(options.to);\r\n    options.to = null;\r\n  }\r\n}\r\n\r\nfunction mergeAnimationDetails(element, oldAnimation, newAnimation) {\r\n  var target = oldAnimation.options || {};\r\n  var newOptions = newAnimation.options || {};\r\n\r\n  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\r\n  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\r\n  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\r\n\r\n  if (newOptions.preparationClasses) {\r\n    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\r\n    delete newOptions.preparationClasses;\r\n  }\r\n\r\n  // noop is basically when there is no callback; otherwise something has been set\r\n  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\r\n\r\n  extend(target, newOptions);\r\n\r\n  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\r\n  if (realDomOperation) {\r\n    target.domOperation = realDomOperation;\r\n  }\r\n\r\n  if (classes.addClass) {\r\n    target.addClass = classes.addClass;\r\n  } else {\r\n    target.addClass = null;\r\n  }\r\n\r\n  if (classes.removeClass) {\r\n    target.removeClass = classes.removeClass;\r\n  } else {\r\n    target.removeClass = null;\r\n  }\r\n\r\n  oldAnimation.addClass = target.addClass;\r\n  oldAnimation.removeClass = target.removeClass;\r\n\r\n  return target;\r\n}\r\n\r\nfunction resolveElementClasses(existing, toAdd, toRemove) {\r\n  var ADD_CLASS = 1;\r\n  var REMOVE_CLASS = -1;\r\n\r\n  var flags = {};\r\n  existing = splitClassesToLookup(existing);\r\n\r\n  toAdd = splitClassesToLookup(toAdd);\r\n  forEach(toAdd, function(value, key) {\r\n    flags[key] = ADD_CLASS;\r\n  });\r\n\r\n  toRemove = splitClassesToLookup(toRemove);\r\n  forEach(toRemove, function(value, key) {\r\n    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\r\n  });\r\n\r\n  var classes = {\r\n    addClass: '',\r\n    removeClass: ''\r\n  };\r\n\r\n  forEach(flags, function(val, klass) {\r\n    var prop, allow;\r\n    if (val === ADD_CLASS) {\r\n      prop = 'addClass';\r\n      allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];\r\n    } else if (val === REMOVE_CLASS) {\r\n      prop = 'removeClass';\r\n      allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];\r\n    }\r\n    if (allow) {\r\n      if (classes[prop].length) {\r\n        classes[prop] += ' ';\r\n      }\r\n      classes[prop] += klass;\r\n    }\r\n  });\r\n\r\n  function splitClassesToLookup(classes) {\r\n    if (isString(classes)) {\r\n      classes = classes.split(' ');\r\n    }\r\n\r\n    var obj = {};\r\n    forEach(classes, function(klass) {\r\n      // sometimes the split leaves empty string values\r\n      // incase extra spaces were applied to the options\r\n      if (klass.length) {\r\n        obj[klass] = true;\r\n      }\r\n    });\r\n    return obj;\r\n  }\r\n\r\n  return classes;\r\n}\r\n\r\nfunction getDomNode(element) {\r\n  return (element instanceof jqLite) ? element[0] : element;\r\n}\r\n\r\nfunction applyGeneratedPreparationClasses(element, event, options) {\r\n  var classes = '';\r\n  if (event) {\r\n    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\r\n  }\r\n  if (options.addClass) {\r\n    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\r\n  }\r\n  if (options.removeClass) {\r\n    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\r\n  }\r\n  if (classes.length) {\r\n    options.preparationClasses = classes;\r\n    element.addClass(classes);\r\n  }\r\n}\r\n\r\nfunction clearGeneratedClasses(element, options) {\r\n  if (options.preparationClasses) {\r\n    element.removeClass(options.preparationClasses);\r\n    options.preparationClasses = null;\r\n  }\r\n  if (options.activeClasses) {\r\n    element.removeClass(options.activeClasses);\r\n    options.activeClasses = null;\r\n  }\r\n}\r\n\r\nfunction blockTransitions(node, duration) {\r\n  // we use a negative delay value since it performs blocking\r\n  // yet it doesn't kill any existing transitions running on the\r\n  // same element which makes this safe for class-based animations\r\n  var value = duration ? '-' + duration + 's' : '';\r\n  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\r\n  return [TRANSITION_DELAY_PROP, value];\r\n}\r\n\r\nfunction blockKeyframeAnimations(node, applyBlock) {\r\n  var value = applyBlock ? 'paused' : '';\r\n  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\r\n  applyInlineStyle(node, [key, value]);\r\n  return [key, value];\r\n}\r\n\r\nfunction applyInlineStyle(node, styleTuple) {\r\n  var prop = styleTuple[0];\r\n  var value = styleTuple[1];\r\n  node.style[prop] = value;\r\n}\r\n\r\nfunction concatWithSpace(a,b) {\r\n  if (!a) return b;\r\n  if (!b) return a;\r\n  return a + ' ' + b;\r\n}\r\n\r\nvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\r\n  var queue, cancelFn;\r\n\r\n  function scheduler(tasks) {\r\n    // we make a copy since RAFScheduler mutates the state\r\n    // of the passed in array variable and this would be difficult\r\n    // to track down on the outside code\r\n    queue = queue.concat(tasks);\r\n    nextTick();\r\n  }\r\n\r\n  queue = scheduler.queue = [];\r\n\r\n  /* waitUntilQuiet does two things:\r\n   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through\r\n   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\r\n   *\r\n   * The motivation here is that animation code can request more time from the scheduler\r\n   * before the next wave runs. This allows for certain DOM properties such as classes to\r\n   * be resolved in time for the next animation to run.\r\n   */\r\n  scheduler.waitUntilQuiet = function(fn) {\r\n    if (cancelFn) cancelFn();\r\n\r\n    cancelFn = $$rAF(function() {\r\n      cancelFn = null;\r\n      fn();\r\n      nextTick();\r\n    });\r\n  };\r\n\r\n  return scheduler;\r\n\r\n  function nextTick() {\r\n    if (!queue.length) return;\r\n\r\n    var items = queue.shift();\r\n    for (var i = 0; i < items.length; i++) {\r\n      items[i]();\r\n    }\r\n\r\n    if (!cancelFn) {\r\n      $$rAF(function() {\r\n        if (!cancelFn) nextTick();\r\n      });\r\n    }\r\n  }\r\n}];\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngAnimateChildren\r\n * @restrict AE\r\n * @element ANY\r\n *\r\n * @description\r\n *\r\n * ngAnimateChildren allows you to specify that children of this element should animate even if any\r\n * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`\r\n * (structural) animation, child elements that also have an active structural animation are not animated.\r\n *\r\n * Note that even if `ngAnimateChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).\r\n *\r\n *\r\n * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,\r\n *     then child animations are allowed. If the value is `false`, child animations are not allowed.\r\n *\r\n * @example\r\n * <example module=\"ngAnimateChildren\" name=\"ngAnimateChildren\" deps=\"angular-animate.js\" animations=\"true\">\r\n     <file name=\"index.html\">\r\n       <div ng-controller=\"MainController as main\">\r\n         <label>Show container? <input type=\"checkbox\" ng-model=\"main.enterElement\" /></label>\r\n         <label>Animate children? <input type=\"checkbox\" ng-model=\"main.animateChildren\" /></label>\r\n         <hr>\r\n         <div ng-animate-children=\"{{main.animateChildren}}\">\r\n           <div ng-if=\"main.enterElement\" class=\"container\">\r\n             List of items:\r\n             <div ng-repeat=\"item in [0, 1, 2, 3]\" class=\"item\">Item {{item}}</div>\r\n           </div>\r\n         </div>\r\n       </div>\r\n     </file>\r\n     <file name=\"animations.css\">\r\n\r\n      .container.ng-enter,\r\n      .container.ng-leave {\r\n        transition: all ease 1.5s;\r\n      }\r\n\r\n      .container.ng-enter,\r\n      .container.ng-leave-active {\r\n        opacity: 0;\r\n      }\r\n\r\n      .container.ng-leave,\r\n      .container.ng-enter-active {\r\n        opacity: 1;\r\n      }\r\n\r\n      .item {\r\n        background: firebrick;\r\n        color: #FFF;\r\n        margin-bottom: 10px;\r\n      }\r\n\r\n      .item.ng-enter,\r\n      .item.ng-leave {\r\n        transition: transform 1.5s ease;\r\n      }\r\n\r\n      .item.ng-enter {\r\n        transform: translateX(50px);\r\n      }\r\n\r\n      .item.ng-enter-active {\r\n        transform: translateX(0);\r\n      }\r\n    </file>\r\n    <file name=\"script.js\">\r\n      angular.module('ngAnimateChildren', ['ngAnimate'])\r\n        .controller('MainController', function MainController() {\r\n          this.animateChildren = false;\r\n          this.enterElement = false;\r\n        });\r\n    </file>\r\n  </example>\r\n */\r\nvar $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {\r\n  return {\r\n    link: function(scope, element, attrs) {\r\n      var val = attrs.ngAnimateChildren;\r\n      if (isString(val) && val.length === 0) { //empty attribute\r\n        element.data(NG_ANIMATE_CHILDREN_DATA, true);\r\n      } else {\r\n        // Interpolate and set the value, so that it is available to\r\n        // animations that run right after compilation\r\n        setData($interpolate(val)(scope));\r\n        attrs.$observe('ngAnimateChildren', setData);\r\n      }\r\n\r\n      function setData(value) {\r\n        value = value === 'on' || value === 'true';\r\n        element.data(NG_ANIMATE_CHILDREN_DATA, value);\r\n      }\r\n    }\r\n  };\r\n}];\r\n\r\n/* exported $AnimateCssProvider */\r\n\r\nvar ANIMATE_TIMER_KEY = '$$animateCss';\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $animateCss\r\n * @kind object\r\n *\r\n * @description\r\n * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\r\n * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\r\n * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\r\n * directives to create more complex animations that can be purely driven using CSS code.\r\n *\r\n * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\r\n * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\r\n *\r\n * ## Usage\r\n * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\r\n * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\r\n * any automatic control over cancelling animations and/or preventing animations from being run on\r\n * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to\r\n * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\r\n * the CSS animation.\r\n *\r\n * The example below shows how we can create a folding animation on an element using `ng-if`:\r\n *\r\n * ```html\r\n * <!-- notice the `fold-animation` CSS class -->\r\n * <div ng-if=\"onOff\" class=\"fold-animation\">\r\n *   This element will go BOOM\r\n * </div>\r\n * <button ng-click=\"onOff=true\">Fold In</button>\r\n * ```\r\n *\r\n * Now we create the **JavaScript animation** that will trigger the CSS transition:\r\n *\r\n * ```js\r\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\r\n *   return {\r\n *     enter: function(element, doneFn) {\r\n *       var height = element[0].offsetHeight;\r\n *       return $animateCss(element, {\r\n *         from: { height:'0px' },\r\n *         to: { height:height + 'px' },\r\n *         duration: 1 // one second\r\n *       });\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * ## More Advanced Uses\r\n *\r\n * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\r\n * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\r\n *\r\n * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\r\n * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\r\n * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\r\n * to provide a working animation that will run in CSS.\r\n *\r\n * The example below showcases a more advanced version of the `.fold-animation` from the example above:\r\n *\r\n * ```js\r\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\r\n *   return {\r\n *     enter: function(element, doneFn) {\r\n *       var height = element[0].offsetHeight;\r\n *       return $animateCss(element, {\r\n *         addClass: 'red large-text pulse-twice',\r\n *         easing: 'ease-out',\r\n *         from: { height:'0px' },\r\n *         to: { height:height + 'px' },\r\n *         duration: 1 // one second\r\n *       });\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\r\n *\r\n * ```css\r\n * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\r\n * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\r\n * .red { background:red; }\r\n * .large-text { font-size:20px; }\r\n *\r\n * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\r\n * .pulse-twice {\r\n *   animation: 0.5s pulse linear 2;\r\n *   -webkit-animation: 0.5s pulse linear 2;\r\n * }\r\n *\r\n * @keyframes pulse {\r\n *   from { transform: scale(0.5); }\r\n *   to { transform: scale(1.5); }\r\n * }\r\n *\r\n * @-webkit-keyframes pulse {\r\n *   from { -webkit-transform: scale(0.5); }\r\n *   to { -webkit-transform: scale(1.5); }\r\n * }\r\n * ```\r\n *\r\n * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\r\n *\r\n * ## How the Options are handled\r\n *\r\n * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\r\n * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\r\n * styles using the `from` and `to` properties.\r\n *\r\n * ```js\r\n * var animator = $animateCss(element, {\r\n *   from: { background:'red' },\r\n *   to: { background:'blue' }\r\n * });\r\n * animator.start();\r\n * ```\r\n *\r\n * ```css\r\n * .rotating-animation {\r\n *   animation:0.5s rotate linear;\r\n *   -webkit-animation:0.5s rotate linear;\r\n * }\r\n *\r\n * @keyframes rotate {\r\n *   from { transform: rotate(0deg); }\r\n *   to { transform: rotate(360deg); }\r\n * }\r\n *\r\n * @-webkit-keyframes rotate {\r\n *   from { -webkit-transform: rotate(0deg); }\r\n *   to { -webkit-transform: rotate(360deg); }\r\n * }\r\n * ```\r\n *\r\n * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\r\n * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\r\n * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\r\n * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\r\n * and spread across the transition and keyframe animation.\r\n *\r\n * ## What is returned\r\n *\r\n * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\r\n * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\r\n * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\r\n *\r\n * ```js\r\n * var animator = $animateCss(element, { ... });\r\n * ```\r\n *\r\n * Now what do the contents of our `animator` variable look like:\r\n *\r\n * ```js\r\n * {\r\n *   // starts the animation\r\n *   start: Function,\r\n *\r\n *   // ends (aborts) the animation\r\n *   end: Function\r\n * }\r\n * ```\r\n *\r\n * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\r\n * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been\r\n * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\r\n * and that changing them will not reconfigure the parameters of the animation.\r\n *\r\n * ### runner.done() vs runner.then()\r\n * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\r\n * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\r\n * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\r\n * unless you really need a digest to kick off afterwards.\r\n *\r\n * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\r\n * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\r\n * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\r\n *\r\n * @param {DOMElement} element the element that will be animated\r\n * @param {object} options the animation-related options that will be applied during the animation\r\n *\r\n * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\r\n * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\r\n * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and\r\n * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.\r\n * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\r\n * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).\r\n * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\r\n * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\r\n * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\r\n * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\r\n * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\r\n * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\r\n * is provided then the animation will be skipped entirely.\r\n * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\r\n * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\r\n * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\r\n * CSS delay value.\r\n * * `stagger` - A numeric time value representing the delay between successively animated elements\r\n * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\r\n * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\r\n *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\r\n * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)\r\n * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once\r\n *    the animation is closed. This is useful for when the styles are used purely for the sake of\r\n *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).\r\n *    By default this value is set to `false`.\r\n *\r\n * @return {object} an object with start and end methods and details about the animation.\r\n *\r\n * * `start` - The method to start the animation. This will return a `Promise` when called.\r\n * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\r\n */\r\nvar ONE_SECOND = 1000;\r\n\r\nvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\r\nvar CLOSING_TIME_BUFFER = 1.5;\r\n\r\nvar DETECT_CSS_PROPERTIES = {\r\n  transitionDuration:      TRANSITION_DURATION_PROP,\r\n  transitionDelay:         TRANSITION_DELAY_PROP,\r\n  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\r\n  animationDuration:       ANIMATION_DURATION_PROP,\r\n  animationDelay:          ANIMATION_DELAY_PROP,\r\n  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\r\n};\r\n\r\nvar DETECT_STAGGER_CSS_PROPERTIES = {\r\n  transitionDuration:      TRANSITION_DURATION_PROP,\r\n  transitionDelay:         TRANSITION_DELAY_PROP,\r\n  animationDuration:       ANIMATION_DURATION_PROP,\r\n  animationDelay:          ANIMATION_DELAY_PROP\r\n};\r\n\r\nfunction getCssKeyframeDurationStyle(duration) {\r\n  return [ANIMATION_DURATION_PROP, duration + 's'];\r\n}\r\n\r\nfunction getCssDelayStyle(delay, isKeyframeAnimation) {\r\n  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\r\n  return [prop, delay + 's'];\r\n}\r\n\r\nfunction computeCssStyles($window, element, properties) {\r\n  var styles = Object.create(null);\r\n  var detectedStyles = $window.getComputedStyle(element) || {};\r\n  forEach(properties, function(formalStyleName, actualStyleName) {\r\n    var val = detectedStyles[formalStyleName];\r\n    if (val) {\r\n      var c = val.charAt(0);\r\n\r\n      // only numerical-based values have a negative sign or digit as the first value\r\n      if (c === '-' || c === '+' || c >= 0) {\r\n        val = parseMaxTime(val);\r\n      }\r\n\r\n      // by setting this to null in the event that the delay is not set or is set directly as 0\r\n      // then we can still allow for negative values to be used later on and not mistake this\r\n      // value for being greater than any other negative value.\r\n      if (val === 0) {\r\n        val = null;\r\n      }\r\n      styles[actualStyleName] = val;\r\n    }\r\n  });\r\n\r\n  return styles;\r\n}\r\n\r\nfunction parseMaxTime(str) {\r\n  var maxValue = 0;\r\n  var values = str.split(/\\s*,\\s*/);\r\n  forEach(values, function(value) {\r\n    // it's always safe to consider only second values and omit `ms` values since\r\n    // getComputedStyle will always handle the conversion for us\r\n    if (value.charAt(value.length - 1) === 's') {\r\n      value = value.substring(0, value.length - 1);\r\n    }\r\n    value = parseFloat(value) || 0;\r\n    maxValue = maxValue ? Math.max(value, maxValue) : value;\r\n  });\r\n  return maxValue;\r\n}\r\n\r\nfunction truthyTimingValue(val) {\r\n  return val === 0 || val != null;\r\n}\r\n\r\nfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\r\n  var style = TRANSITION_PROP;\r\n  var value = duration + 's';\r\n  if (applyOnlyDuration) {\r\n    style += DURATION_KEY;\r\n  } else {\r\n    value += ' linear all';\r\n  }\r\n  return [style, value];\r\n}\r\n\r\nfunction createLocalCacheLookup() {\r\n  var cache = Object.create(null);\r\n  return {\r\n    flush: function() {\r\n      cache = Object.create(null);\r\n    },\r\n\r\n    count: function(key) {\r\n      var entry = cache[key];\r\n      return entry ? entry.total : 0;\r\n    },\r\n\r\n    get: function(key) {\r\n      var entry = cache[key];\r\n      return entry && entry.value;\r\n    },\r\n\r\n    put: function(key, value) {\r\n      if (!cache[key]) {\r\n        cache[key] = { total: 1, value: value };\r\n      } else {\r\n        cache[key].total++;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n// we do not reassign an already present style value since\r\n// if we detect the style property value again we may be\r\n// detecting styles that were added via the `from` styles.\r\n// We make use of `isDefined` here since an empty string\r\n// or null value (which is what getPropertyValue will return\r\n// for a non-existing style) will still be marked as a valid\r\n// value for the style (a falsy value implies that the style\r\n// is to be removed at the end of the animation). If we had a simple\r\n// \"OR\" statement then it would not be enough to catch that.\r\nfunction registerRestorableStyles(backup, node, properties) {\r\n  forEach(properties, function(prop) {\r\n    backup[prop] = isDefined(backup[prop])\r\n        ? backup[prop]\r\n        : node.style.getPropertyValue(prop);\r\n  });\r\n}\r\n\r\nvar $AnimateCssProvider = ['$animateProvider', /** @this */ function($animateProvider) {\r\n  var gcsLookup = createLocalCacheLookup();\r\n  var gcsStaggerLookup = createLocalCacheLookup();\r\n\r\n  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',\r\n               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',\r\n       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,\r\n                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {\r\n\r\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\r\n\r\n    var parentCounter = 0;\r\n    function gcsHashFn(node, extraClasses) {\r\n      var KEY = '$$ngAnimateParentKey';\r\n      var parentNode = node.parentNode;\r\n      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\r\n      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;\r\n    }\r\n\r\n    function computeCachedCssStyles(node, className, cacheKey, properties) {\r\n      var timings = gcsLookup.get(cacheKey);\r\n\r\n      if (!timings) {\r\n        timings = computeCssStyles($window, node, properties);\r\n        if (timings.animationIterationCount === 'infinite') {\r\n          timings.animationIterationCount = 1;\r\n        }\r\n      }\r\n\r\n      // we keep putting this in multiple times even though the value and the cacheKey are the same\r\n      // because we're keeping an internal tally of how many duplicate animations are detected.\r\n      gcsLookup.put(cacheKey, timings);\r\n      return timings;\r\n    }\r\n\r\n    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\r\n      var stagger;\r\n\r\n      // if we have one or more existing matches of matching elements\r\n      // containing the same parent + CSS styles (which is how cacheKey works)\r\n      // then staggering is possible\r\n      if (gcsLookup.count(cacheKey) > 0) {\r\n        stagger = gcsStaggerLookup.get(cacheKey);\r\n\r\n        if (!stagger) {\r\n          var staggerClassName = pendClasses(className, '-stagger');\r\n\r\n          $$jqLite.addClass(node, staggerClassName);\r\n\r\n          stagger = computeCssStyles($window, node, properties);\r\n\r\n          // force the conversion of a null value to zero incase not set\r\n          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\r\n          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\r\n\r\n          $$jqLite.removeClass(node, staggerClassName);\r\n\r\n          gcsStaggerLookup.put(cacheKey, stagger);\r\n        }\r\n      }\r\n\r\n      return stagger || {};\r\n    }\r\n\r\n    var rafWaitQueue = [];\r\n    function waitUntilQuiet(callback) {\r\n      rafWaitQueue.push(callback);\r\n      $$rAFScheduler.waitUntilQuiet(function() {\r\n        gcsLookup.flush();\r\n        gcsStaggerLookup.flush();\r\n\r\n        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\r\n        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\r\n        var pageWidth = $$forceReflow();\r\n\r\n        // we use a for loop to ensure that if the queue is changed\r\n        // during this looping then it will consider new requests\r\n        for (var i = 0; i < rafWaitQueue.length; i++) {\r\n          rafWaitQueue[i](pageWidth);\r\n        }\r\n        rafWaitQueue.length = 0;\r\n      });\r\n    }\r\n\r\n    function computeTimings(node, className, cacheKey) {\r\n      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);\r\n      var aD = timings.animationDelay;\r\n      var tD = timings.transitionDelay;\r\n      timings.maxDelay = aD && tD\r\n          ? Math.max(aD, tD)\r\n          : (aD || tD);\r\n      timings.maxDuration = Math.max(\r\n          timings.animationDuration * timings.animationIterationCount,\r\n          timings.transitionDuration);\r\n\r\n      return timings;\r\n    }\r\n\r\n    return function init(element, initialOptions) {\r\n      // all of the animation functions should create\r\n      // a copy of the options data, however, if a\r\n      // parent service has already created a copy then\r\n      // we should stick to using that\r\n      var options = initialOptions || {};\r\n      if (!options.$$prepared) {\r\n        options = prepareAnimationOptions(copy(options));\r\n      }\r\n\r\n      var restoreStyles = {};\r\n      var node = getDomNode(element);\r\n      if (!node\r\n          || !node.parentNode\r\n          || !$$animateQueue.enabled()) {\r\n        return closeAndReturnNoopAnimator();\r\n      }\r\n\r\n      var temporaryStyles = [];\r\n      var classes = element.attr('class');\r\n      var styles = packageStyles(options);\r\n      var animationClosed;\r\n      var animationPaused;\r\n      var animationCompleted;\r\n      var runner;\r\n      var runnerHost;\r\n      var maxDelay;\r\n      var maxDelayTime;\r\n      var maxDuration;\r\n      var maxDurationTime;\r\n      var startTime;\r\n      var events = [];\r\n\r\n      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\r\n        return closeAndReturnNoopAnimator();\r\n      }\r\n\r\n      var method = options.event && isArray(options.event)\r\n            ? options.event.join(' ')\r\n            : options.event;\r\n\r\n      var isStructural = method && options.structural;\r\n      var structuralClassName = '';\r\n      var addRemoveClassName = '';\r\n\r\n      if (isStructural) {\r\n        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\r\n      } else if (method) {\r\n        structuralClassName = method;\r\n      }\r\n\r\n      if (options.addClass) {\r\n        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\r\n      }\r\n\r\n      if (options.removeClass) {\r\n        if (addRemoveClassName.length) {\r\n          addRemoveClassName += ' ';\r\n        }\r\n        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\r\n      }\r\n\r\n      // there may be a situation where a structural animation is combined together\r\n      // with CSS classes that need to resolve before the animation is computed.\r\n      // However this means that there is no explicit CSS code to block the animation\r\n      // from happening (by setting 0s none in the class name). If this is the case\r\n      // we need to apply the classes before the first rAF so we know to continue if\r\n      // there actually is a detected transition or keyframe animation\r\n      if (options.applyClassesEarly && addRemoveClassName.length) {\r\n        applyAnimationClasses(element, options);\r\n      }\r\n\r\n      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\r\n      var fullClassName = classes + ' ' + preparationClasses;\r\n      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\r\n      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\r\n      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\r\n\r\n      // there is no way we can trigger an animation if no styles and\r\n      // no classes are being applied which would then trigger a transition,\r\n      // unless there a is raw keyframe value that is applied to the element.\r\n      if (!containsKeyframeAnimation\r\n           && !hasToStyles\r\n           && !preparationClasses) {\r\n        return closeAndReturnNoopAnimator();\r\n      }\r\n\r\n      var cacheKey, stagger;\r\n      if (options.stagger > 0) {\r\n        var staggerVal = parseFloat(options.stagger);\r\n        stagger = {\r\n          transitionDelay: staggerVal,\r\n          animationDelay: staggerVal,\r\n          transitionDuration: 0,\r\n          animationDuration: 0\r\n        };\r\n      } else {\r\n        cacheKey = gcsHashFn(node, fullClassName);\r\n        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\r\n      }\r\n\r\n      if (!options.$$skipPreparationClasses) {\r\n        $$jqLite.addClass(element, preparationClasses);\r\n      }\r\n\r\n      var applyOnlyDuration;\r\n\r\n      if (options.transitionStyle) {\r\n        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\r\n        applyInlineStyle(node, transitionStyle);\r\n        temporaryStyles.push(transitionStyle);\r\n      }\r\n\r\n      if (options.duration >= 0) {\r\n        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\r\n        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\r\n\r\n        // we set the duration so that it will be picked up by getComputedStyle later\r\n        applyInlineStyle(node, durationStyle);\r\n        temporaryStyles.push(durationStyle);\r\n      }\r\n\r\n      if (options.keyframeStyle) {\r\n        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\r\n        applyInlineStyle(node, keyframeStyle);\r\n        temporaryStyles.push(keyframeStyle);\r\n      }\r\n\r\n      var itemIndex = stagger\r\n          ? options.staggerIndex >= 0\r\n              ? options.staggerIndex\r\n              : gcsLookup.count(cacheKey)\r\n          : 0;\r\n\r\n      var isFirst = itemIndex === 0;\r\n\r\n      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\r\n      // without causing any combination of transitions to kick in. By adding a negative delay value\r\n      // it forces the setup class' transition to end immediately. We later then remove the negative\r\n      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\r\n      // that if there is no transition defined then nothing will happen and this will also allow\r\n      // other transitions to be stacked on top of each other without any chopping them out.\r\n      if (isFirst && !options.skipBlocking) {\r\n        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\r\n      }\r\n\r\n      var timings = computeTimings(node, fullClassName, cacheKey);\r\n      var relativeDelay = timings.maxDelay;\r\n      maxDelay = Math.max(relativeDelay, 0);\r\n      maxDuration = timings.maxDuration;\r\n\r\n      var flags = {};\r\n      flags.hasTransitions          = timings.transitionDuration > 0;\r\n      flags.hasAnimations           = timings.animationDuration > 0;\r\n      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty === 'all';\r\n      flags.applyTransitionDuration = hasToStyles && (\r\n                                        (flags.hasTransitions && !flags.hasTransitionAll)\r\n                                         || (flags.hasAnimations && !flags.hasTransitions));\r\n      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\r\n      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\r\n      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\r\n      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\r\n\r\n      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\r\n        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\r\n\r\n        if (flags.applyTransitionDuration) {\r\n          flags.hasTransitions = true;\r\n          timings.transitionDuration = maxDuration;\r\n          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\r\n          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\r\n        }\r\n\r\n        if (flags.applyAnimationDuration) {\r\n          flags.hasAnimations = true;\r\n          timings.animationDuration = maxDuration;\r\n          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\r\n        }\r\n      }\r\n\r\n      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\r\n        return closeAndReturnNoopAnimator();\r\n      }\r\n\r\n      if (options.delay != null) {\r\n        var delayStyle;\r\n        if (typeof options.delay !== 'boolean') {\r\n          delayStyle = parseFloat(options.delay);\r\n          // number in options.delay means we have to recalculate the delay for the closing timeout\r\n          maxDelay = Math.max(delayStyle, 0);\r\n        }\r\n\r\n        if (flags.applyTransitionDelay) {\r\n          temporaryStyles.push(getCssDelayStyle(delayStyle));\r\n        }\r\n\r\n        if (flags.applyAnimationDelay) {\r\n          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\r\n        }\r\n      }\r\n\r\n      // we need to recalculate the delay value since we used a pre-emptive negative\r\n      // delay value and the delay value is required for the final event checking. This\r\n      // property will ensure that this will happen after the RAF phase has passed.\r\n      if (options.duration == null && timings.transitionDuration > 0) {\r\n        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\r\n      }\r\n\r\n      maxDelayTime = maxDelay * ONE_SECOND;\r\n      maxDurationTime = maxDuration * ONE_SECOND;\r\n      if (!options.skipBlocking) {\r\n        flags.blockTransition = timings.transitionDuration > 0;\r\n        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\r\n                                       stagger.animationDelay > 0 &&\r\n                                       stagger.animationDuration === 0;\r\n      }\r\n\r\n      if (options.from) {\r\n        if (options.cleanupStyles) {\r\n          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));\r\n        }\r\n        applyAnimationFromStyles(element, options);\r\n      }\r\n\r\n      if (flags.blockTransition || flags.blockKeyframeAnimation) {\r\n        applyBlocking(maxDuration);\r\n      } else if (!options.skipBlocking) {\r\n        blockTransitions(node, false);\r\n      }\r\n\r\n      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\r\n      return {\r\n        $$willAnimate: true,\r\n        end: endFn,\r\n        start: function() {\r\n          if (animationClosed) return;\r\n\r\n          runnerHost = {\r\n            end: endFn,\r\n            cancel: cancelFn,\r\n            resume: null, //this will be set during the start() phase\r\n            pause: null\r\n          };\r\n\r\n          runner = new $$AnimateRunner(runnerHost);\r\n\r\n          waitUntilQuiet(start);\r\n\r\n          // we don't have access to pause/resume the animation\r\n          // since it hasn't run yet. AnimateRunner will therefore\r\n          // set noop functions for resume and pause and they will\r\n          // later be overridden once the animation is triggered\r\n          return runner;\r\n        }\r\n      };\r\n\r\n      function endFn() {\r\n        close();\r\n      }\r\n\r\n      function cancelFn() {\r\n        close(true);\r\n      }\r\n\r\n      function close(rejected) {\r\n        // if the promise has been called already then we shouldn't close\r\n        // the animation again\r\n        if (animationClosed || (animationCompleted && animationPaused)) return;\r\n        animationClosed = true;\r\n        animationPaused = false;\r\n\r\n        if (!options.$$skipPreparationClasses) {\r\n          $$jqLite.removeClass(element, preparationClasses);\r\n        }\r\n        $$jqLite.removeClass(element, activeClasses);\r\n\r\n        blockKeyframeAnimations(node, false);\r\n        blockTransitions(node, false);\r\n\r\n        forEach(temporaryStyles, function(entry) {\r\n          // There is only one way to remove inline style properties entirely from elements.\r\n          // By using `removeProperty` this works, but we need to convert camel-cased CSS\r\n          // styles down to hyphenated values.\r\n          node.style[entry[0]] = '';\r\n        });\r\n\r\n        applyAnimationClasses(element, options);\r\n        applyAnimationStyles(element, options);\r\n\r\n        if (Object.keys(restoreStyles).length) {\r\n          forEach(restoreStyles, function(value, prop) {\r\n            if (value) {\r\n              node.style.setProperty(prop, value);\r\n            } else {\r\n              node.style.removeProperty(prop);\r\n            }\r\n          });\r\n        }\r\n\r\n        // the reason why we have this option is to allow a synchronous closing callback\r\n        // that is fired as SOON as the animation ends (when the CSS is removed) or if\r\n        // the animation never takes off at all. A good example is a leave animation since\r\n        // the element must be removed just after the animation is over or else the element\r\n        // will appear on screen for one animation frame causing an overbearing flicker.\r\n        if (options.onDone) {\r\n          options.onDone();\r\n        }\r\n\r\n        if (events && events.length) {\r\n          // Remove the transitionend / animationend listener(s)\r\n          element.off(events.join(' '), onAnimationProgress);\r\n        }\r\n\r\n        //Cancel the fallback closing timeout and remove the timer data\r\n        var animationTimerData = element.data(ANIMATE_TIMER_KEY);\r\n        if (animationTimerData) {\r\n          $timeout.cancel(animationTimerData[0].timer);\r\n          element.removeData(ANIMATE_TIMER_KEY);\r\n        }\r\n\r\n        // if the preparation function fails then the promise is not setup\r\n        if (runner) {\r\n          runner.complete(!rejected);\r\n        }\r\n      }\r\n\r\n      function applyBlocking(duration) {\r\n        if (flags.blockTransition) {\r\n          blockTransitions(node, duration);\r\n        }\r\n\r\n        if (flags.blockKeyframeAnimation) {\r\n          blockKeyframeAnimations(node, !!duration);\r\n        }\r\n      }\r\n\r\n      function closeAndReturnNoopAnimator() {\r\n        runner = new $$AnimateRunner({\r\n          end: endFn,\r\n          cancel: cancelFn\r\n        });\r\n\r\n        // should flush the cache animation\r\n        waitUntilQuiet(noop);\r\n        close();\r\n\r\n        return {\r\n          $$willAnimate: false,\r\n          start: function() {\r\n            return runner;\r\n          },\r\n          end: endFn\r\n        };\r\n      }\r\n\r\n      function onAnimationProgress(event) {\r\n        event.stopPropagation();\r\n        var ev = event.originalEvent || event;\r\n\r\n        // we now always use `Date.now()` due to the recent changes with\r\n        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)\r\n        var timeStamp = ev.$manualTimeStamp || Date.now();\r\n\r\n        /* Firefox (or possibly just Gecko) likes to not round values up\r\n         * when a ms measurement is used for the animation */\r\n        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\r\n\r\n        /* $manualTimeStamp is a mocked timeStamp value which is set\r\n         * within browserTrigger(). This is only here so that tests can\r\n         * mock animations properly. Real events fallback to event.timeStamp,\r\n         * or, if they don't, then a timeStamp is automatically created for them.\r\n         * We're checking to see if the timeStamp surpasses the expected delay,\r\n         * but we're using elapsedTime instead of the timeStamp on the 2nd\r\n         * pre-condition since animationPauseds sometimes close off early */\r\n        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\r\n          // we set this flag to ensure that if the transition is paused then, when resumed,\r\n          // the animation will automatically close itself since transitions cannot be paused.\r\n          animationCompleted = true;\r\n          close();\r\n        }\r\n      }\r\n\r\n      function start() {\r\n        if (animationClosed) return;\r\n        if (!node.parentNode) {\r\n          close();\r\n          return;\r\n        }\r\n\r\n        // even though we only pause keyframe animations here the pause flag\r\n        // will still happen when transitions are used. Only the transition will\r\n        // not be paused since that is not possible. If the animation ends when\r\n        // paused then it will not complete until unpaused or cancelled.\r\n        var playPause = function(playAnimation) {\r\n          if (!animationCompleted) {\r\n            animationPaused = !playAnimation;\r\n            if (timings.animationDuration) {\r\n              var value = blockKeyframeAnimations(node, animationPaused);\r\n              if (animationPaused) {\r\n                temporaryStyles.push(value);\r\n              } else {\r\n                removeFromArray(temporaryStyles, value);\r\n              }\r\n            }\r\n          } else if (animationPaused && playAnimation) {\r\n            animationPaused = false;\r\n            close();\r\n          }\r\n        };\r\n\r\n        // checking the stagger duration prevents an accidentally cascade of the CSS delay style\r\n        // being inherited from the parent. If the transition duration is zero then we can safely\r\n        // rely that the delay value is an intentional stagger delay style.\r\n        var maxStagger = itemIndex > 0\r\n                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\r\n                            (timings.animationDuration && stagger.animationDuration === 0))\r\n                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\r\n        if (maxStagger) {\r\n          $timeout(triggerAnimationStart,\r\n                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\r\n                   false);\r\n        } else {\r\n          triggerAnimationStart();\r\n        }\r\n\r\n        // this will decorate the existing promise runner with pause/resume methods\r\n        runnerHost.resume = function() {\r\n          playPause(true);\r\n        };\r\n\r\n        runnerHost.pause = function() {\r\n          playPause(false);\r\n        };\r\n\r\n        function triggerAnimationStart() {\r\n          // just incase a stagger animation kicks in when the animation\r\n          // itself was cancelled entirely\r\n          if (animationClosed) return;\r\n\r\n          applyBlocking(false);\r\n\r\n          forEach(temporaryStyles, function(entry) {\r\n            var key = entry[0];\r\n            var value = entry[1];\r\n            node.style[key] = value;\r\n          });\r\n\r\n          applyAnimationClasses(element, options);\r\n          $$jqLite.addClass(element, activeClasses);\r\n\r\n          if (flags.recalculateTimingStyles) {\r\n            fullClassName = node.getAttribute('class') + ' ' + preparationClasses;\r\n            cacheKey = gcsHashFn(node, fullClassName);\r\n\r\n            timings = computeTimings(node, fullClassName, cacheKey);\r\n            relativeDelay = timings.maxDelay;\r\n            maxDelay = Math.max(relativeDelay, 0);\r\n            maxDuration = timings.maxDuration;\r\n\r\n            if (maxDuration === 0) {\r\n              close();\r\n              return;\r\n            }\r\n\r\n            flags.hasTransitions = timings.transitionDuration > 0;\r\n            flags.hasAnimations = timings.animationDuration > 0;\r\n          }\r\n\r\n          if (flags.applyAnimationDelay) {\r\n            relativeDelay = typeof options.delay !== 'boolean' && truthyTimingValue(options.delay)\r\n                  ? parseFloat(options.delay)\r\n                  : relativeDelay;\r\n\r\n            maxDelay = Math.max(relativeDelay, 0);\r\n            timings.animationDelay = relativeDelay;\r\n            delayStyle = getCssDelayStyle(relativeDelay, true);\r\n            temporaryStyles.push(delayStyle);\r\n            node.style[delayStyle[0]] = delayStyle[1];\r\n          }\r\n\r\n          maxDelayTime = maxDelay * ONE_SECOND;\r\n          maxDurationTime = maxDuration * ONE_SECOND;\r\n\r\n          if (options.easing) {\r\n            var easeProp, easeVal = options.easing;\r\n            if (flags.hasTransitions) {\r\n              easeProp = TRANSITION_PROP + TIMING_KEY;\r\n              temporaryStyles.push([easeProp, easeVal]);\r\n              node.style[easeProp] = easeVal;\r\n            }\r\n            if (flags.hasAnimations) {\r\n              easeProp = ANIMATION_PROP + TIMING_KEY;\r\n              temporaryStyles.push([easeProp, easeVal]);\r\n              node.style[easeProp] = easeVal;\r\n            }\r\n          }\r\n\r\n          if (timings.transitionDuration) {\r\n            events.push(TRANSITIONEND_EVENT);\r\n          }\r\n\r\n          if (timings.animationDuration) {\r\n            events.push(ANIMATIONEND_EVENT);\r\n          }\r\n\r\n          startTime = Date.now();\r\n          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\r\n          var endTime = startTime + timerTime;\r\n\r\n          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\r\n          var setupFallbackTimer = true;\r\n          if (animationsData.length) {\r\n            var currentTimerData = animationsData[0];\r\n            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\r\n            if (setupFallbackTimer) {\r\n              $timeout.cancel(currentTimerData.timer);\r\n            } else {\r\n              animationsData.push(close);\r\n            }\r\n          }\r\n\r\n          if (setupFallbackTimer) {\r\n            var timer = $timeout(onAnimationExpired, timerTime, false);\r\n            animationsData[0] = {\r\n              timer: timer,\r\n              expectedEndTime: endTime\r\n            };\r\n            animationsData.push(close);\r\n            element.data(ANIMATE_TIMER_KEY, animationsData);\r\n          }\r\n\r\n          if (events.length) {\r\n            element.on(events.join(' '), onAnimationProgress);\r\n          }\r\n\r\n          if (options.to) {\r\n            if (options.cleanupStyles) {\r\n              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));\r\n            }\r\n            applyAnimationToStyles(element, options);\r\n          }\r\n        }\r\n\r\n        function onAnimationExpired() {\r\n          var animationsData = element.data(ANIMATE_TIMER_KEY);\r\n\r\n          // this will be false in the event that the element was\r\n          // removed from the DOM (via a leave animation or something\r\n          // similar)\r\n          if (animationsData) {\r\n            for (var i = 1; i < animationsData.length; i++) {\r\n              animationsData[i]();\r\n            }\r\n            element.removeData(ANIMATE_TIMER_KEY);\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }];\r\n}];\r\n\r\nvar $$AnimateCssDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {\r\n  $$animationProvider.drivers.push('$$animateCssDriver');\r\n\r\n  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\r\n  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\r\n\r\n  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\r\n  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\r\n\r\n  function isDocumentFragment(node) {\r\n    return node.parentNode && node.parentNode.nodeType === 11;\r\n  }\r\n\r\n  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',\r\n       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {\r\n\r\n    // only browsers that support these properties can render animations\r\n    if (!$sniffer.animations && !$sniffer.transitions) return noop;\r\n\r\n    var bodyNode = $document[0].body;\r\n    var rootNode = getDomNode($rootElement);\r\n\r\n    var rootBodyElement = jqLite(\r\n      // this is to avoid using something that exists outside of the body\r\n      // we also special case the doc fragment case because our unit test code\r\n      // appends the $rootElement to the body after the app has been bootstrapped\r\n      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode\r\n    );\r\n\r\n    return function initDriverFn(animationDetails) {\r\n      return animationDetails.from && animationDetails.to\r\n          ? prepareFromToAnchorAnimation(animationDetails.from,\r\n                                         animationDetails.to,\r\n                                         animationDetails.classes,\r\n                                         animationDetails.anchors)\r\n          : prepareRegularAnimation(animationDetails);\r\n    };\r\n\r\n    function filterCssClasses(classes) {\r\n      //remove all the `ng-` stuff\r\n      return classes.replace(/\\bng-\\S+\\b/g, '');\r\n    }\r\n\r\n    function getUniqueValues(a, b) {\r\n      if (isString(a)) a = a.split(' ');\r\n      if (isString(b)) b = b.split(' ');\r\n      return a.filter(function(val) {\r\n        return b.indexOf(val) === -1;\r\n      }).join(' ');\r\n    }\r\n\r\n    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\r\n      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\r\n      var startingClasses = filterCssClasses(getClassVal(clone));\r\n\r\n      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\r\n      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\r\n\r\n      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\r\n\r\n      rootBodyElement.append(clone);\r\n\r\n      var animatorIn, animatorOut = prepareOutAnimation();\r\n\r\n      // the user may not end up using the `out` animation and\r\n      // only making use of the `in` animation or vice-versa.\r\n      // In either case we should allow this and not assume the\r\n      // animation is over unless both animations are not used.\r\n      if (!animatorOut) {\r\n        animatorIn = prepareInAnimation();\r\n        if (!animatorIn) {\r\n          return end();\r\n        }\r\n      }\r\n\r\n      var startingAnimator = animatorOut || animatorIn;\r\n\r\n      return {\r\n        start: function() {\r\n          var runner;\r\n\r\n          var currentAnimation = startingAnimator.start();\r\n          currentAnimation.done(function() {\r\n            currentAnimation = null;\r\n            if (!animatorIn) {\r\n              animatorIn = prepareInAnimation();\r\n              if (animatorIn) {\r\n                currentAnimation = animatorIn.start();\r\n                currentAnimation.done(function() {\r\n                  currentAnimation = null;\r\n                  end();\r\n                  runner.complete();\r\n                });\r\n                return currentAnimation;\r\n              }\r\n            }\r\n            // in the event that there is no `in` animation\r\n            end();\r\n            runner.complete();\r\n          });\r\n\r\n          runner = new $$AnimateRunner({\r\n            end: endFn,\r\n            cancel: endFn\r\n          });\r\n\r\n          return runner;\r\n\r\n          function endFn() {\r\n            if (currentAnimation) {\r\n              currentAnimation.end();\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      function calculateAnchorStyles(anchor) {\r\n        var styles = {};\r\n\r\n        var coords = getDomNode(anchor).getBoundingClientRect();\r\n\r\n        // we iterate directly since safari messes up and doesn't return\r\n        // all the keys for the coords object when iterated\r\n        forEach(['width','height','top','left'], function(key) {\r\n          var value = coords[key];\r\n          switch (key) {\r\n            case 'top':\r\n              value += bodyNode.scrollTop;\r\n              break;\r\n            case 'left':\r\n              value += bodyNode.scrollLeft;\r\n              break;\r\n          }\r\n          styles[key] = Math.floor(value) + 'px';\r\n        });\r\n        return styles;\r\n      }\r\n\r\n      function prepareOutAnimation() {\r\n        var animator = $animateCss(clone, {\r\n          addClass: NG_OUT_ANCHOR_CLASS_NAME,\r\n          delay: true,\r\n          from: calculateAnchorStyles(outAnchor)\r\n        });\r\n\r\n        // read the comment within `prepareRegularAnimation` to understand\r\n        // why this check is necessary\r\n        return animator.$$willAnimate ? animator : null;\r\n      }\r\n\r\n      function getClassVal(element) {\r\n        return element.attr('class') || '';\r\n      }\r\n\r\n      function prepareInAnimation() {\r\n        var endingClasses = filterCssClasses(getClassVal(inAnchor));\r\n        var toAdd = getUniqueValues(endingClasses, startingClasses);\r\n        var toRemove = getUniqueValues(startingClasses, endingClasses);\r\n\r\n        var animator = $animateCss(clone, {\r\n          to: calculateAnchorStyles(inAnchor),\r\n          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\r\n          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\r\n          delay: true\r\n        });\r\n\r\n        // read the comment within `prepareRegularAnimation` to understand\r\n        // why this check is necessary\r\n        return animator.$$willAnimate ? animator : null;\r\n      }\r\n\r\n      function end() {\r\n        clone.remove();\r\n        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\r\n        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\r\n      }\r\n    }\r\n\r\n    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\r\n      var fromAnimation = prepareRegularAnimation(from, noop);\r\n      var toAnimation = prepareRegularAnimation(to, noop);\r\n\r\n      var anchorAnimations = [];\r\n      forEach(anchors, function(anchor) {\r\n        var outElement = anchor['out'];\r\n        var inElement = anchor['in'];\r\n        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\r\n        if (animator) {\r\n          anchorAnimations.push(animator);\r\n        }\r\n      });\r\n\r\n      // no point in doing anything when there are no elements to animate\r\n      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\r\n\r\n      return {\r\n        start: function() {\r\n          var animationRunners = [];\r\n\r\n          if (fromAnimation) {\r\n            animationRunners.push(fromAnimation.start());\r\n          }\r\n\r\n          if (toAnimation) {\r\n            animationRunners.push(toAnimation.start());\r\n          }\r\n\r\n          forEach(anchorAnimations, function(animation) {\r\n            animationRunners.push(animation.start());\r\n          });\r\n\r\n          var runner = new $$AnimateRunner({\r\n            end: endFn,\r\n            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\r\n          });\r\n\r\n          $$AnimateRunner.all(animationRunners, function(status) {\r\n            runner.complete(status);\r\n          });\r\n\r\n          return runner;\r\n\r\n          function endFn() {\r\n            forEach(animationRunners, function(runner) {\r\n              runner.end();\r\n            });\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    function prepareRegularAnimation(animationDetails) {\r\n      var element = animationDetails.element;\r\n      var options = animationDetails.options || {};\r\n\r\n      if (animationDetails.structural) {\r\n        options.event = animationDetails.event;\r\n        options.structural = true;\r\n        options.applyClassesEarly = true;\r\n\r\n        // we special case the leave animation since we want to ensure that\r\n        // the element is removed as soon as the animation is over. Otherwise\r\n        // a flicker might appear or the element may not be removed at all\r\n        if (animationDetails.event === 'leave') {\r\n          options.onDone = options.domOperation;\r\n        }\r\n      }\r\n\r\n      // We assign the preparationClasses as the actual animation event since\r\n      // the internals of $animateCss will just suffix the event token values\r\n      // with `-active` to trigger the animation.\r\n      if (options.preparationClasses) {\r\n        options.event = concatWithSpace(options.event, options.preparationClasses);\r\n      }\r\n\r\n      var animator = $animateCss(element, options);\r\n\r\n      // the driver lookup code inside of $$animation attempts to spawn a\r\n      // driver one by one until a driver returns a.$$willAnimate animator object.\r\n      // $animateCss will always return an object, however, it will pass in\r\n      // a flag as a hint as to whether an animation was detected or not\r\n      return animator.$$willAnimate ? animator : null;\r\n    }\r\n  }];\r\n}];\r\n\r\n// TODO(matsko): use caching here to speed things up for detection\r\n// TODO(matsko): add documentation\r\n//  by the time...\r\n\r\nvar $$AnimateJsProvider = ['$animateProvider', /** @this */ function($animateProvider) {\r\n  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\r\n       function($injector,   $$AnimateRunner,   $$jqLite) {\r\n\r\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\r\n         // $animateJs(element, 'enter');\r\n    return function(element, event, classes, options) {\r\n      var animationClosed = false;\r\n\r\n      // the `classes` argument is optional and if it is not used\r\n      // then the classes will be resolved from the element's className\r\n      // property as well as options.addClass/options.removeClass.\r\n      if (arguments.length === 3 && isObject(classes)) {\r\n        options = classes;\r\n        classes = null;\r\n      }\r\n\r\n      options = prepareAnimationOptions(options);\r\n      if (!classes) {\r\n        classes = element.attr('class') || '';\r\n        if (options.addClass) {\r\n          classes += ' ' + options.addClass;\r\n        }\r\n        if (options.removeClass) {\r\n          classes += ' ' + options.removeClass;\r\n        }\r\n      }\r\n\r\n      var classesToAdd = options.addClass;\r\n      var classesToRemove = options.removeClass;\r\n\r\n      // the lookupAnimations function returns a series of animation objects that are\r\n      // matched up with one or more of the CSS classes. These animation objects are\r\n      // defined via the module.animation factory function. If nothing is detected then\r\n      // we don't return anything which then makes $animation query the next driver.\r\n      var animations = lookupAnimations(classes);\r\n      var before, after;\r\n      if (animations.length) {\r\n        var afterFn, beforeFn;\r\n        if (event === 'leave') {\r\n          beforeFn = 'leave';\r\n          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\r\n        } else {\r\n          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\r\n          afterFn = event;\r\n        }\r\n\r\n        if (event !== 'enter' && event !== 'move') {\r\n          before = packageAnimations(element, event, options, animations, beforeFn);\r\n        }\r\n        after  = packageAnimations(element, event, options, animations, afterFn);\r\n      }\r\n\r\n      // no matching animations\r\n      if (!before && !after) return;\r\n\r\n      function applyOptions() {\r\n        options.domOperation();\r\n        applyAnimationClasses(element, options);\r\n      }\r\n\r\n      function close() {\r\n        animationClosed = true;\r\n        applyOptions();\r\n        applyAnimationStyles(element, options);\r\n      }\r\n\r\n      var runner;\r\n\r\n      return {\r\n        $$willAnimate: true,\r\n        end: function() {\r\n          if (runner) {\r\n            runner.end();\r\n          } else {\r\n            close();\r\n            runner = new $$AnimateRunner();\r\n            runner.complete(true);\r\n          }\r\n          return runner;\r\n        },\r\n        start: function() {\r\n          if (runner) {\r\n            return runner;\r\n          }\r\n\r\n          runner = new $$AnimateRunner();\r\n          var closeActiveAnimations;\r\n          var chain = [];\r\n\r\n          if (before) {\r\n            chain.push(function(fn) {\r\n              closeActiveAnimations = before(fn);\r\n            });\r\n          }\r\n\r\n          if (chain.length) {\r\n            chain.push(function(fn) {\r\n              applyOptions();\r\n              fn(true);\r\n            });\r\n          } else {\r\n            applyOptions();\r\n          }\r\n\r\n          if (after) {\r\n            chain.push(function(fn) {\r\n              closeActiveAnimations = after(fn);\r\n            });\r\n          }\r\n\r\n          runner.setHost({\r\n            end: function() {\r\n              endAnimations();\r\n            },\r\n            cancel: function() {\r\n              endAnimations(true);\r\n            }\r\n          });\r\n\r\n          $$AnimateRunner.chain(chain, onComplete);\r\n          return runner;\r\n\r\n          function onComplete(success) {\r\n            close(success);\r\n            runner.complete(success);\r\n          }\r\n\r\n          function endAnimations(cancelled) {\r\n            if (!animationClosed) {\r\n              (closeActiveAnimations || noop)(cancelled);\r\n              onComplete(cancelled);\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      function executeAnimationFn(fn, element, event, options, onDone) {\r\n        var args;\r\n        switch (event) {\r\n          case 'animate':\r\n            args = [element, options.from, options.to, onDone];\r\n            break;\r\n\r\n          case 'setClass':\r\n            args = [element, classesToAdd, classesToRemove, onDone];\r\n            break;\r\n\r\n          case 'addClass':\r\n            args = [element, classesToAdd, onDone];\r\n            break;\r\n\r\n          case 'removeClass':\r\n            args = [element, classesToRemove, onDone];\r\n            break;\r\n\r\n          default:\r\n            args = [element, onDone];\r\n            break;\r\n        }\r\n\r\n        args.push(options);\r\n\r\n        var value = fn.apply(fn, args);\r\n        if (value) {\r\n          if (isFunction(value.start)) {\r\n            value = value.start();\r\n          }\r\n\r\n          if (value instanceof $$AnimateRunner) {\r\n            value.done(onDone);\r\n          } else if (isFunction(value)) {\r\n            // optional onEnd / onCancel callback\r\n            return value;\r\n          }\r\n        }\r\n\r\n        return noop;\r\n      }\r\n\r\n      function groupEventedAnimations(element, event, options, animations, fnName) {\r\n        var operations = [];\r\n        forEach(animations, function(ani) {\r\n          var animation = ani[fnName];\r\n          if (!animation) return;\r\n\r\n          // note that all of these animations will run in parallel\r\n          operations.push(function() {\r\n            var runner;\r\n            var endProgressCb;\r\n\r\n            var resolved = false;\r\n            var onAnimationComplete = function(rejected) {\r\n              if (!resolved) {\r\n                resolved = true;\r\n                (endProgressCb || noop)(rejected);\r\n                runner.complete(!rejected);\r\n              }\r\n            };\r\n\r\n            runner = new $$AnimateRunner({\r\n              end: function() {\r\n                onAnimationComplete();\r\n              },\r\n              cancel: function() {\r\n                onAnimationComplete(true);\r\n              }\r\n            });\r\n\r\n            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\r\n              var cancelled = result === false;\r\n              onAnimationComplete(cancelled);\r\n            });\r\n\r\n            return runner;\r\n          });\r\n        });\r\n\r\n        return operations;\r\n      }\r\n\r\n      function packageAnimations(element, event, options, animations, fnName) {\r\n        var operations = groupEventedAnimations(element, event, options, animations, fnName);\r\n        if (operations.length === 0) {\r\n          var a, b;\r\n          if (fnName === 'beforeSetClass') {\r\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\r\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\r\n          } else if (fnName === 'setClass') {\r\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\r\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\r\n          }\r\n\r\n          if (a) {\r\n            operations = operations.concat(a);\r\n          }\r\n          if (b) {\r\n            operations = operations.concat(b);\r\n          }\r\n        }\r\n\r\n        if (operations.length === 0) return;\r\n\r\n        // TODO(matsko): add documentation\r\n        return function startAnimation(callback) {\r\n          var runners = [];\r\n          if (operations.length) {\r\n            forEach(operations, function(animateFn) {\r\n              runners.push(animateFn());\r\n            });\r\n          }\r\n\r\n          if (runners.length) {\r\n            $$AnimateRunner.all(runners, callback);\r\n          }  else {\r\n            callback();\r\n          }\r\n\r\n          return function endFn(reject) {\r\n            forEach(runners, function(runner) {\r\n              if (reject) {\r\n                runner.cancel();\r\n              } else {\r\n                runner.end();\r\n              }\r\n            });\r\n          };\r\n        };\r\n      }\r\n    };\r\n\r\n    function lookupAnimations(classes) {\r\n      classes = isArray(classes) ? classes : classes.split(' ');\r\n      var matches = [], flagMap = {};\r\n      for (var i = 0; i < classes.length; i++) {\r\n        var klass = classes[i],\r\n            animationFactory = $animateProvider.$$registeredAnimations[klass];\r\n        if (animationFactory && !flagMap[klass]) {\r\n          matches.push($injector.get(animationFactory));\r\n          flagMap[klass] = true;\r\n        }\r\n      }\r\n      return matches;\r\n    }\r\n  }];\r\n}];\r\n\r\nvar $$AnimateJsDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {\r\n  $$animationProvider.drivers.push('$$animateJsDriver');\r\n  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\r\n    return function initDriverFn(animationDetails) {\r\n      if (animationDetails.from && animationDetails.to) {\r\n        var fromAnimation = prepareAnimation(animationDetails.from);\r\n        var toAnimation = prepareAnimation(animationDetails.to);\r\n        if (!fromAnimation && !toAnimation) return;\r\n\r\n        return {\r\n          start: function() {\r\n            var animationRunners = [];\r\n\r\n            if (fromAnimation) {\r\n              animationRunners.push(fromAnimation.start());\r\n            }\r\n\r\n            if (toAnimation) {\r\n              animationRunners.push(toAnimation.start());\r\n            }\r\n\r\n            $$AnimateRunner.all(animationRunners, done);\r\n\r\n            var runner = new $$AnimateRunner({\r\n              end: endFnFactory(),\r\n              cancel: endFnFactory()\r\n            });\r\n\r\n            return runner;\r\n\r\n            function endFnFactory() {\r\n              return function() {\r\n                forEach(animationRunners, function(runner) {\r\n                  // at this point we cannot cancel animations for groups just yet. 1.5+\r\n                  runner.end();\r\n                });\r\n              };\r\n            }\r\n\r\n            function done(status) {\r\n              runner.complete(status);\r\n            }\r\n          }\r\n        };\r\n      } else {\r\n        return prepareAnimation(animationDetails);\r\n      }\r\n    };\r\n\r\n    function prepareAnimation(animationDetails) {\r\n      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\r\n      var element = animationDetails.element;\r\n      var event = animationDetails.event;\r\n      var options = animationDetails.options;\r\n      var classes = animationDetails.classes;\r\n      return $$animateJs(element, event, classes, options);\r\n    }\r\n  }];\r\n}];\r\n\r\nvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\r\nvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\r\nvar $$AnimateQueueProvider = ['$animateProvider', /** @this */ function($animateProvider) {\r\n  var PRE_DIGEST_STATE = 1;\r\n  var RUNNING_STATE = 2;\r\n  var ONE_SPACE = ' ';\r\n\r\n  var rules = this.rules = {\r\n    skip: [],\r\n    cancel: [],\r\n    join: []\r\n  };\r\n\r\n  function makeTruthyCssClassMap(classString) {\r\n    if (!classString) {\r\n      return null;\r\n    }\r\n\r\n    var keys = classString.split(ONE_SPACE);\r\n    var map = Object.create(null);\r\n\r\n    forEach(keys, function(key) {\r\n      map[key] = true;\r\n    });\r\n    return map;\r\n  }\r\n\r\n  function hasMatchingClasses(newClassString, currentClassString) {\r\n    if (newClassString && currentClassString) {\r\n      var currentClassMap = makeTruthyCssClassMap(currentClassString);\r\n      return newClassString.split(ONE_SPACE).some(function(className) {\r\n        return currentClassMap[className];\r\n      });\r\n    }\r\n  }\r\n\r\n  function isAllowed(ruleType, currentAnimation, previousAnimation) {\r\n    return rules[ruleType].some(function(fn) {\r\n      return fn(currentAnimation, previousAnimation);\r\n    });\r\n  }\r\n\r\n  function hasAnimationClasses(animation, and) {\r\n    var a = (animation.addClass || '').length > 0;\r\n    var b = (animation.removeClass || '').length > 0;\r\n    return and ? a && b : a || b;\r\n  }\r\n\r\n  rules.join.push(function(newAnimation, currentAnimation) {\r\n    // if the new animation is class-based then we can just tack that on\r\n    return !newAnimation.structural && hasAnimationClasses(newAnimation);\r\n  });\r\n\r\n  rules.skip.push(function(newAnimation, currentAnimation) {\r\n    // there is no need to animate anything if no classes are being added and\r\n    // there is no structural animation that will be triggered\r\n    return !newAnimation.structural && !hasAnimationClasses(newAnimation);\r\n  });\r\n\r\n  rules.skip.push(function(newAnimation, currentAnimation) {\r\n    // why should we trigger a new structural animation if the element will\r\n    // be removed from the DOM anyway?\r\n    return currentAnimation.event === 'leave' && newAnimation.structural;\r\n  });\r\n\r\n  rules.skip.push(function(newAnimation, currentAnimation) {\r\n    // if there is an ongoing current animation then don't even bother running the class-based animation\r\n    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\r\n  });\r\n\r\n  rules.cancel.push(function(newAnimation, currentAnimation) {\r\n    // there can never be two structural animations running at the same time\r\n    return currentAnimation.structural && newAnimation.structural;\r\n  });\r\n\r\n  rules.cancel.push(function(newAnimation, currentAnimation) {\r\n    // if the previous animation is already running, but the new animation will\r\n    // be triggered, but the new animation is structural\r\n    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\r\n  });\r\n\r\n  rules.cancel.push(function(newAnimation, currentAnimation) {\r\n    // cancel the animation if classes added / removed in both animation cancel each other out,\r\n    // but only if the current animation isn't structural\r\n\r\n    if (currentAnimation.structural) return false;\r\n\r\n    var nA = newAnimation.addClass;\r\n    var nR = newAnimation.removeClass;\r\n    var cA = currentAnimation.addClass;\r\n    var cR = currentAnimation.removeClass;\r\n\r\n    // early detection to save the global CPU shortage :)\r\n    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {\r\n      return false;\r\n    }\r\n\r\n    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);\r\n  });\r\n\r\n  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$Map',\r\n               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\r\n               '$$isDocumentHidden',\r\n       function($$rAF,   $rootScope,   $rootElement,   $document,   $$Map,\r\n                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow,\r\n                $$isDocumentHidden) {\r\n\r\n    var activeAnimationsLookup = new $$Map();\r\n    var disabledElementsLookup = new $$Map();\r\n    var animationsEnabled = null;\r\n\r\n    function postDigestTaskFactory() {\r\n      var postDigestCalled = false;\r\n      return function(fn) {\r\n        // we only issue a call to postDigest before\r\n        // it has first passed. This prevents any callbacks\r\n        // from not firing once the animation has completed\r\n        // since it will be out of the digest cycle.\r\n        if (postDigestCalled) {\r\n          fn();\r\n        } else {\r\n          $rootScope.$$postDigest(function() {\r\n            postDigestCalled = true;\r\n            fn();\r\n          });\r\n        }\r\n      };\r\n    }\r\n\r\n    // Wait until all directive and route-related templates are downloaded and\r\n    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\r\n    // all of the remote templates being currently downloaded. If there are no\r\n    // templates currently downloading then the watcher will still fire anyway.\r\n    var deregisterWatch = $rootScope.$watch(\r\n      function() { return $templateRequest.totalPendingRequests === 0; },\r\n      function(isEmpty) {\r\n        if (!isEmpty) return;\r\n        deregisterWatch();\r\n\r\n        // Now that all templates have been downloaded, $animate will wait until\r\n        // the post digest queue is empty before enabling animations. By having two\r\n        // calls to $postDigest calls we can ensure that the flag is enabled at the\r\n        // very end of the post digest queue. Since all of the animations in $animate\r\n        // use $postDigest, it's important that the code below executes at the end.\r\n        // This basically means that the page is fully downloaded and compiled before\r\n        // any animations are triggered.\r\n        $rootScope.$$postDigest(function() {\r\n          $rootScope.$$postDigest(function() {\r\n            // we check for null directly in the event that the application already called\r\n            // .enabled() with whatever arguments that it provided it with\r\n            if (animationsEnabled === null) {\r\n              animationsEnabled = true;\r\n            }\r\n          });\r\n        });\r\n      }\r\n    );\r\n\r\n    var callbackRegistry = Object.create(null);\r\n\r\n    // remember that the classNameFilter is set during the provider/config\r\n    // stage therefore we can optimize here and setup a helper function\r\n    var classNameFilter = $animateProvider.classNameFilter();\r\n    var isAnimatableClassName = !classNameFilter\r\n              ? function() { return true; }\r\n              : function(className) {\r\n                return classNameFilter.test(className);\r\n              };\r\n\r\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\r\n\r\n    function normalizeAnimationDetails(element, animation) {\r\n      return mergeAnimationDetails(element, animation, {});\r\n    }\r\n\r\n    // IE9-11 has no method \"contains\" in SVG element and in Node.prototype. Bug #10259.\r\n    var contains = window.Node.prototype.contains || /** @this */ function(arg) {\r\n      // eslint-disable-next-line no-bitwise\r\n      return this === arg || !!(this.compareDocumentPosition(arg) & 16);\r\n    };\r\n\r\n    function findCallbacks(targetParentNode, targetNode, event) {\r\n      var matches = [];\r\n      var entries = callbackRegistry[event];\r\n      if (entries) {\r\n        forEach(entries, function(entry) {\r\n          if (contains.call(entry.node, targetNode)) {\r\n            matches.push(entry.callback);\r\n          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {\r\n            matches.push(entry.callback);\r\n          }\r\n        });\r\n      }\r\n\r\n      return matches;\r\n    }\r\n\r\n    function filterFromRegistry(list, matchContainer, matchCallback) {\r\n      var containerNode = extractElementNode(matchContainer);\r\n      return list.filter(function(entry) {\r\n        var isMatch = entry.node === containerNode &&\r\n                        (!matchCallback || entry.callback === matchCallback);\r\n        return !isMatch;\r\n      });\r\n    }\r\n\r\n    function cleanupEventListeners(phase, node) {\r\n      if (phase === 'close' && !node.parentNode) {\r\n        // If the element is not attached to a parentNode, it has been removed by\r\n        // the domOperation, and we can safely remove the event callbacks\r\n        $animate.off(node);\r\n      }\r\n    }\r\n\r\n    var $animate = {\r\n      on: function(event, container, callback) {\r\n        var node = extractElementNode(container);\r\n        callbackRegistry[event] = callbackRegistry[event] || [];\r\n        callbackRegistry[event].push({\r\n          node: node,\r\n          callback: callback\r\n        });\r\n\r\n        // Remove the callback when the element is removed from the DOM\r\n        jqLite(container).on('$destroy', function() {\r\n          var animationDetails = activeAnimationsLookup.get(node);\r\n\r\n          if (!animationDetails) {\r\n            // If there's an animation ongoing, the callback calling code will remove\r\n            // the event listeners. If we'd remove here, the callbacks would be removed\r\n            // before the animation ends\r\n            $animate.off(event, container, callback);\r\n          }\r\n        });\r\n      },\r\n\r\n      off: function(event, container, callback) {\r\n        if (arguments.length === 1 && !isString(arguments[0])) {\r\n          container = arguments[0];\r\n          for (var eventType in callbackRegistry) {\r\n            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        var entries = callbackRegistry[event];\r\n        if (!entries) return;\r\n\r\n        callbackRegistry[event] = arguments.length === 1\r\n            ? null\r\n            : filterFromRegistry(entries, container, callback);\r\n      },\r\n\r\n      pin: function(element, parentElement) {\r\n        assertArg(isElement(element), 'element', 'not an element');\r\n        assertArg(isElement(parentElement), 'parentElement', 'not an element');\r\n        element.data(NG_ANIMATE_PIN_DATA, parentElement);\r\n      },\r\n\r\n      push: function(element, event, options, domOperation) {\r\n        options = options || {};\r\n        options.domOperation = domOperation;\r\n        return queueAnimation(element, event, options);\r\n      },\r\n\r\n      // this method has four signatures:\r\n      //  () - global getter\r\n      //  (bool) - global setter\r\n      //  (element) - element getter\r\n      //  (element, bool) - element setter<F37>\r\n      enabled: function(element, bool) {\r\n        var argCount = arguments.length;\r\n\r\n        if (argCount === 0) {\r\n          // () - Global getter\r\n          bool = !!animationsEnabled;\r\n        } else {\r\n          var hasElement = isElement(element);\r\n\r\n          if (!hasElement) {\r\n            // (bool) - Global setter\r\n            bool = animationsEnabled = !!element;\r\n          } else {\r\n            var node = getDomNode(element);\r\n\r\n            if (argCount === 1) {\r\n              // (element) - Element getter\r\n              bool = !disabledElementsLookup.get(node);\r\n            } else {\r\n              // (element, bool) - Element setter\r\n              disabledElementsLookup.set(node, !bool);\r\n            }\r\n          }\r\n        }\r\n\r\n        return bool;\r\n      }\r\n    };\r\n\r\n    return $animate;\r\n\r\n    function queueAnimation(originalElement, event, initialOptions) {\r\n      // we always make a copy of the options since\r\n      // there should never be any side effects on\r\n      // the input data when running `$animateCss`.\r\n      var options = copy(initialOptions);\r\n\r\n      var element = stripCommentsFromElement(originalElement);\r\n      var node = getDomNode(element);\r\n      var parentNode = node && node.parentNode;\r\n\r\n      options = prepareAnimationOptions(options);\r\n\r\n      // we create a fake runner with a working promise.\r\n      // These methods will become available after the digest has passed\r\n      var runner = new $$AnimateRunner();\r\n\r\n      // this is used to trigger callbacks in postDigest mode\r\n      var runInNextPostDigestOrNow = postDigestTaskFactory();\r\n\r\n      if (isArray(options.addClass)) {\r\n        options.addClass = options.addClass.join(' ');\r\n      }\r\n\r\n      if (options.addClass && !isString(options.addClass)) {\r\n        options.addClass = null;\r\n      }\r\n\r\n      if (isArray(options.removeClass)) {\r\n        options.removeClass = options.removeClass.join(' ');\r\n      }\r\n\r\n      if (options.removeClass && !isString(options.removeClass)) {\r\n        options.removeClass = null;\r\n      }\r\n\r\n      if (options.from && !isObject(options.from)) {\r\n        options.from = null;\r\n      }\r\n\r\n      if (options.to && !isObject(options.to)) {\r\n        options.to = null;\r\n      }\r\n\r\n      // there are situations where a directive issues an animation for\r\n      // a jqLite wrapper that contains only comment nodes... If this\r\n      // happens then there is no way we can perform an animation\r\n      if (!node) {\r\n        close();\r\n        return runner;\r\n      }\r\n\r\n      var className = [node.getAttribute('class'), options.addClass, options.removeClass].join(' ');\r\n      if (!isAnimatableClassName(className)) {\r\n        close();\r\n        return runner;\r\n      }\r\n\r\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\r\n\r\n      var documentHidden = $$isDocumentHidden();\r\n\r\n      // this is a hard disable of all animations for the application or on\r\n      // the element itself, therefore  there is no need to continue further\r\n      // past this point if not enabled\r\n      // Animations are also disabled if the document is currently hidden (page is not visible\r\n      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame\r\n      var skipAnimations = !animationsEnabled || documentHidden || disabledElementsLookup.get(node);\r\n      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\r\n      var hasExistingAnimation = !!existingAnimation.state;\r\n\r\n      // there is no point in traversing the same collection of parent ancestors if a followup\r\n      // animation will be run on the same element that already did all that checking work\r\n      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state !== PRE_DIGEST_STATE)) {\r\n        skipAnimations = !areAnimationsAllowed(node, parentNode, event);\r\n      }\r\n\r\n      if (skipAnimations) {\r\n        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)\r\n        if (documentHidden) notifyProgress(runner, event, 'start');\r\n        close();\r\n        if (documentHidden) notifyProgress(runner, event, 'close');\r\n        return runner;\r\n      }\r\n\r\n      if (isStructural) {\r\n        closeChildAnimations(node);\r\n      }\r\n\r\n      var newAnimation = {\r\n        structural: isStructural,\r\n        element: element,\r\n        event: event,\r\n        addClass: options.addClass,\r\n        removeClass: options.removeClass,\r\n        close: close,\r\n        options: options,\r\n        runner: runner\r\n      };\r\n\r\n      if (hasExistingAnimation) {\r\n        var skipAnimationFlag = isAllowed('skip', newAnimation, existingAnimation);\r\n        if (skipAnimationFlag) {\r\n          if (existingAnimation.state === RUNNING_STATE) {\r\n            close();\r\n            return runner;\r\n          } else {\r\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\r\n            return existingAnimation.runner;\r\n          }\r\n        }\r\n        var cancelAnimationFlag = isAllowed('cancel', newAnimation, existingAnimation);\r\n        if (cancelAnimationFlag) {\r\n          if (existingAnimation.state === RUNNING_STATE) {\r\n            // this will end the animation right away and it is safe\r\n            // to do so since the animation is already running and the\r\n            // runner callback code will run in async\r\n            existingAnimation.runner.end();\r\n          } else if (existingAnimation.structural) {\r\n            // this means that the animation is queued into a digest, but\r\n            // hasn't started yet. Therefore it is safe to run the close\r\n            // method which will call the runner methods in async.\r\n            existingAnimation.close();\r\n          } else {\r\n            // this will merge the new animation options into existing animation options\r\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\r\n\r\n            return existingAnimation.runner;\r\n          }\r\n        } else {\r\n          // a joined animation means that this animation will take over the existing one\r\n          // so an example would involve a leave animation taking over an enter. Then when\r\n          // the postDigest kicks in the enter will be ignored.\r\n          var joinAnimationFlag = isAllowed('join', newAnimation, existingAnimation);\r\n          if (joinAnimationFlag) {\r\n            if (existingAnimation.state === RUNNING_STATE) {\r\n              normalizeAnimationDetails(element, newAnimation);\r\n            } else {\r\n              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);\r\n\r\n              event = newAnimation.event = existingAnimation.event;\r\n              options = mergeAnimationDetails(element, existingAnimation, newAnimation);\r\n\r\n              //we return the same runner since only the option values of this animation will\r\n              //be fed into the `existingAnimation`.\r\n              return existingAnimation.runner;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // normalization in this case means that it removes redundant CSS classes that\r\n        // already exist (addClass) or do not exist (removeClass) on the element\r\n        normalizeAnimationDetails(element, newAnimation);\r\n      }\r\n\r\n      // when the options are merged and cleaned up we may end up not having to do\r\n      // an animation at all, therefore we should check this before issuing a post\r\n      // digest callback. Structural animations will always run no matter what.\r\n      var isValidAnimation = newAnimation.structural;\r\n      if (!isValidAnimation) {\r\n        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\r\n        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\r\n                            || hasAnimationClasses(newAnimation);\r\n      }\r\n\r\n      if (!isValidAnimation) {\r\n        close();\r\n        clearElementAnimationState(node);\r\n        return runner;\r\n      }\r\n\r\n      // the counter keeps track of cancelled animations\r\n      var counter = (existingAnimation.counter || 0) + 1;\r\n      newAnimation.counter = counter;\r\n\r\n      markElementAnimationState(node, PRE_DIGEST_STATE, newAnimation);\r\n\r\n      $rootScope.$$postDigest(function() {\r\n        // It is possible that the DOM nodes inside `originalElement` have been replaced. This can\r\n        // happen if the animated element is a transcluded clone and also has a `templateUrl`\r\n        // directive on it. Therefore, we must recreate `element` in order to interact with the\r\n        // actual DOM nodes.\r\n        // Note: We still need to use the old `node` for certain things, such as looking up in\r\n        //       HashMaps where it was used as the key.\r\n\r\n        element = stripCommentsFromElement(originalElement);\r\n\r\n        var animationDetails = activeAnimationsLookup.get(node);\r\n        var animationCancelled = !animationDetails;\r\n        animationDetails = animationDetails || {};\r\n\r\n        // if addClass/removeClass is called before something like enter then the\r\n        // registered parent element may not be present. The code below will ensure\r\n        // that a final value for parent element is obtained\r\n        var parentElement = element.parent() || [];\r\n\r\n        // animate/structural/class-based animations all have requirements. Otherwise there\r\n        // is no point in performing an animation. The parent node must also be set.\r\n        var isValidAnimation = parentElement.length > 0\r\n                                && (animationDetails.event === 'animate'\r\n                                    || animationDetails.structural\r\n                                    || hasAnimationClasses(animationDetails));\r\n\r\n        // this means that the previous animation was cancelled\r\n        // even if the follow-up animation is the same event\r\n        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\r\n          // if another animation did not take over then we need\r\n          // to make sure that the domOperation and options are\r\n          // handled accordingly\r\n          if (animationCancelled) {\r\n            applyAnimationClasses(element, options);\r\n            applyAnimationStyles(element, options);\r\n          }\r\n\r\n          // if the event changed from something like enter to leave then we do\r\n          // it, otherwise if it's the same then the end result will be the same too\r\n          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\r\n            options.domOperation();\r\n            runner.end();\r\n          }\r\n\r\n          // in the event that the element animation was not cancelled or a follow-up animation\r\n          // isn't allowed to animate from here then we need to clear the state of the element\r\n          // so that any future animations won't read the expired animation data.\r\n          if (!isValidAnimation) {\r\n            clearElementAnimationState(node);\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        // this combined multiple class to addClass / removeClass into a setClass event\r\n        // so long as a structural event did not take over the animation\r\n        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)\r\n            ? 'setClass'\r\n            : animationDetails.event;\r\n\r\n        markElementAnimationState(node, RUNNING_STATE);\r\n        var realRunner = $$animation(element, event, animationDetails.options);\r\n\r\n        // this will update the runner's flow-control events based on\r\n        // the `realRunner` object.\r\n        runner.setHost(realRunner);\r\n        notifyProgress(runner, event, 'start', {});\r\n\r\n        realRunner.done(function(status) {\r\n          close(!status);\r\n          var animationDetails = activeAnimationsLookup.get(node);\r\n          if (animationDetails && animationDetails.counter === counter) {\r\n            clearElementAnimationState(node);\r\n          }\r\n          notifyProgress(runner, event, 'close', {});\r\n        });\r\n      });\r\n\r\n      return runner;\r\n\r\n      function notifyProgress(runner, event, phase, data) {\r\n        runInNextPostDigestOrNow(function() {\r\n          var callbacks = findCallbacks(parentNode, node, event);\r\n          if (callbacks.length) {\r\n            // do not optimize this call here to RAF because\r\n            // we don't know how heavy the callback code here will\r\n            // be and if this code is buffered then this can\r\n            // lead to a performance regression.\r\n            $$rAF(function() {\r\n              forEach(callbacks, function(callback) {\r\n                callback(element, phase, data);\r\n              });\r\n              cleanupEventListeners(phase, node);\r\n            });\r\n          } else {\r\n            cleanupEventListeners(phase, node);\r\n          }\r\n        });\r\n        runner.progress(event, phase, data);\r\n      }\r\n\r\n      function close(reject) {\r\n        clearGeneratedClasses(element, options);\r\n        applyAnimationClasses(element, options);\r\n        applyAnimationStyles(element, options);\r\n        options.domOperation();\r\n        runner.complete(!reject);\r\n      }\r\n    }\r\n\r\n    function closeChildAnimations(node) {\r\n      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\r\n      forEach(children, function(child) {\r\n        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);\r\n        var animationDetails = activeAnimationsLookup.get(child);\r\n        if (animationDetails) {\r\n          switch (state) {\r\n            case RUNNING_STATE:\r\n              animationDetails.runner.end();\r\n              /* falls through */\r\n            case PRE_DIGEST_STATE:\r\n              activeAnimationsLookup.delete(child);\r\n              break;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    function clearElementAnimationState(node) {\r\n      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\r\n      activeAnimationsLookup.delete(node);\r\n    }\r\n\r\n    /**\r\n     * This fn returns false if any of the following is true:\r\n     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed\r\n     * b) a parent element has an ongoing structural animation, and animateChildren is false\r\n     * c) the element is not a child of the body\r\n     * d) the element is not a child of the $rootElement\r\n     */\r\n    function areAnimationsAllowed(node, parentNode, event) {\r\n      var bodyNode = $document[0].body;\r\n      var rootNode = getDomNode($rootElement);\r\n\r\n      var bodyNodeDetected = (node === bodyNode) || node.nodeName === 'HTML';\r\n      var rootNodeDetected = (node === rootNode);\r\n      var parentAnimationDetected = false;\r\n      var elementDisabled = disabledElementsLookup.get(node);\r\n      var animateChildren;\r\n\r\n      var parentHost = jqLite.data(node, NG_ANIMATE_PIN_DATA);\r\n      if (parentHost) {\r\n        parentNode = getDomNode(parentHost);\r\n      }\r\n\r\n      while (parentNode) {\r\n        if (!rootNodeDetected) {\r\n          // angular doesn't want to attempt to animate elements outside of the application\r\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\r\n          rootNodeDetected = (parentNode === rootNode);\r\n        }\r\n\r\n        if (parentNode.nodeType !== ELEMENT_NODE) {\r\n          // no point in inspecting the #document element\r\n          break;\r\n        }\r\n\r\n        var details = activeAnimationsLookup.get(parentNode) || {};\r\n        // either an enter, leave or move animation will commence\r\n        // therefore we can't allow any animations to take place\r\n        // but if a parent animation is class-based then that's ok\r\n        if (!parentAnimationDetected) {\r\n          var parentNodeDisabled = disabledElementsLookup.get(parentNode);\r\n\r\n          if (parentNodeDisabled === true && elementDisabled !== false) {\r\n            // disable animations if the user hasn't explicitly enabled animations on the\r\n            // current element\r\n            elementDisabled = true;\r\n            // element is disabled via parent element, no need to check anything else\r\n            break;\r\n          } else if (parentNodeDisabled === false) {\r\n            elementDisabled = false;\r\n          }\r\n          parentAnimationDetected = details.structural;\r\n        }\r\n\r\n        if (isUndefined(animateChildren) || animateChildren === true) {\r\n          var value = jqLite.data(parentNode, NG_ANIMATE_CHILDREN_DATA);\r\n          if (isDefined(value)) {\r\n            animateChildren = value;\r\n          }\r\n        }\r\n\r\n        // there is no need to continue traversing at this point\r\n        if (parentAnimationDetected && animateChildren === false) break;\r\n\r\n        if (!bodyNodeDetected) {\r\n          // we also need to ensure that the element is or will be a part of the body element\r\n          // otherwise it is pointless to even issue an animation to be rendered\r\n          bodyNodeDetected = (parentNode === bodyNode);\r\n        }\r\n\r\n        if (bodyNodeDetected && rootNodeDetected) {\r\n          // If both body and root have been found, any other checks are pointless,\r\n          // as no animation data should live outside the application\r\n          break;\r\n        }\r\n\r\n        if (!rootNodeDetected) {\r\n          // If `rootNode` is not detected, check if `parentNode` is pinned to another element\r\n          parentHost = jqLite.data(parentNode, NG_ANIMATE_PIN_DATA);\r\n          if (parentHost) {\r\n            // The pin target element becomes the next parent element\r\n            parentNode = getDomNode(parentHost);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        parentNode = parentNode.parentNode;\r\n      }\r\n\r\n      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;\r\n      return allowAnimation && rootNodeDetected && bodyNodeDetected;\r\n    }\r\n\r\n    function markElementAnimationState(node, state, details) {\r\n      details = details || {};\r\n      details.state = state;\r\n\r\n      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\r\n\r\n      var oldValue = activeAnimationsLookup.get(node);\r\n      var newValue = oldValue\r\n          ? extend(oldValue, details)\r\n          : details;\r\n      activeAnimationsLookup.set(node, newValue);\r\n    }\r\n  }];\r\n}];\r\n\r\n/* exported $$AnimationProvider */\r\n\r\nvar $$AnimationProvider = ['$animateProvider', /** @this */ function($animateProvider) {\r\n  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\r\n\r\n  var drivers = this.drivers = [];\r\n\r\n  var RUNNER_STORAGE_KEY = '$$animationRunner';\r\n\r\n  function setRunner(element, runner) {\r\n    element.data(RUNNER_STORAGE_KEY, runner);\r\n  }\r\n\r\n  function removeRunner(element) {\r\n    element.removeData(RUNNER_STORAGE_KEY);\r\n  }\r\n\r\n  function getRunner(element) {\r\n    return element.data(RUNNER_STORAGE_KEY);\r\n  }\r\n\r\n  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$Map', '$$rAFScheduler',\r\n       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$Map,   $$rAFScheduler) {\r\n\r\n    var animationQueue = [];\r\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\r\n\r\n    function sortAnimations(animations) {\r\n      var tree = { children: [] };\r\n      var i, lookup = new $$Map();\r\n\r\n      // this is done first beforehand so that the map\r\n      // is filled with a list of the elements that will be animated\r\n      for (i = 0; i < animations.length; i++) {\r\n        var animation = animations[i];\r\n        lookup.set(animation.domNode, animations[i] = {\r\n          domNode: animation.domNode,\r\n          fn: animation.fn,\r\n          children: []\r\n        });\r\n      }\r\n\r\n      for (i = 0; i < animations.length; i++) {\r\n        processNode(animations[i]);\r\n      }\r\n\r\n      return flatten(tree);\r\n\r\n      function processNode(entry) {\r\n        if (entry.processed) return entry;\r\n        entry.processed = true;\r\n\r\n        var elementNode = entry.domNode;\r\n        var parentNode = elementNode.parentNode;\r\n        lookup.set(elementNode, entry);\r\n\r\n        var parentEntry;\r\n        while (parentNode) {\r\n          parentEntry = lookup.get(parentNode);\r\n          if (parentEntry) {\r\n            if (!parentEntry.processed) {\r\n              parentEntry = processNode(parentEntry);\r\n            }\r\n            break;\r\n          }\r\n          parentNode = parentNode.parentNode;\r\n        }\r\n\r\n        (parentEntry || tree).children.push(entry);\r\n        return entry;\r\n      }\r\n\r\n      function flatten(tree) {\r\n        var result = [];\r\n        var queue = [];\r\n        var i;\r\n\r\n        for (i = 0; i < tree.children.length; i++) {\r\n          queue.push(tree.children[i]);\r\n        }\r\n\r\n        var remainingLevelEntries = queue.length;\r\n        var nextLevelEntries = 0;\r\n        var row = [];\r\n\r\n        for (i = 0; i < queue.length; i++) {\r\n          var entry = queue[i];\r\n          if (remainingLevelEntries <= 0) {\r\n            remainingLevelEntries = nextLevelEntries;\r\n            nextLevelEntries = 0;\r\n            result.push(row);\r\n            row = [];\r\n          }\r\n          row.push(entry.fn);\r\n          entry.children.forEach(function(childEntry) {\r\n            nextLevelEntries++;\r\n            queue.push(childEntry);\r\n          });\r\n          remainingLevelEntries--;\r\n        }\r\n\r\n        if (row.length) {\r\n          result.push(row);\r\n        }\r\n\r\n        return result;\r\n      }\r\n    }\r\n\r\n    // TODO(matsko): document the signature in a better way\r\n    return function(element, event, options) {\r\n      options = prepareAnimationOptions(options);\r\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\r\n\r\n      // there is no animation at the current moment, however\r\n      // these runner methods will get later updated with the\r\n      // methods leading into the driver's end/cancel methods\r\n      // for now they just stop the animation from starting\r\n      var runner = new $$AnimateRunner({\r\n        end: function() { close(); },\r\n        cancel: function() { close(true); }\r\n      });\r\n\r\n      if (!drivers.length) {\r\n        close();\r\n        return runner;\r\n      }\r\n\r\n      setRunner(element, runner);\r\n\r\n      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\r\n      var tempClasses = options.tempClasses;\r\n      if (tempClasses) {\r\n        classes += ' ' + tempClasses;\r\n        options.tempClasses = null;\r\n      }\r\n\r\n      var prepareClassName;\r\n      if (isStructural) {\r\n        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;\r\n        $$jqLite.addClass(element, prepareClassName);\r\n      }\r\n\r\n      animationQueue.push({\r\n        // this data is used by the postDigest code and passed into\r\n        // the driver step function\r\n        element: element,\r\n        classes: classes,\r\n        event: event,\r\n        structural: isStructural,\r\n        options: options,\r\n        beforeStart: beforeStart,\r\n        close: close\r\n      });\r\n\r\n      element.on('$destroy', handleDestroyedElement);\r\n\r\n      // we only want there to be one function called within the post digest\r\n      // block. This way we can group animations for all the animations that\r\n      // were apart of the same postDigest flush call.\r\n      if (animationQueue.length > 1) return runner;\r\n\r\n      $rootScope.$$postDigest(function() {\r\n        var animations = [];\r\n        forEach(animationQueue, function(entry) {\r\n          // the element was destroyed early on which removed the runner\r\n          // form its storage. This means we can't animate this element\r\n          // at all and it already has been closed due to destruction.\r\n          if (getRunner(entry.element)) {\r\n            animations.push(entry);\r\n          } else {\r\n            entry.close();\r\n          }\r\n        });\r\n\r\n        // now any future animations will be in another postDigest\r\n        animationQueue.length = 0;\r\n\r\n        var groupedAnimations = groupAnimations(animations);\r\n        var toBeSortedAnimations = [];\r\n\r\n        forEach(groupedAnimations, function(animationEntry) {\r\n          toBeSortedAnimations.push({\r\n            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),\r\n            fn: function triggerAnimationStart() {\r\n              // it's important that we apply the `ng-animate` CSS class and the\r\n              // temporary classes before we do any driver invoking since these\r\n              // CSS classes may be required for proper CSS detection.\r\n              animationEntry.beforeStart();\r\n\r\n              var startAnimationFn, closeFn = animationEntry.close;\r\n\r\n              // in the event that the element was removed before the digest runs or\r\n              // during the RAF sequencing then we should not trigger the animation.\r\n              var targetElement = animationEntry.anchors\r\n                  ? (animationEntry.from.element || animationEntry.to.element)\r\n                  : animationEntry.element;\r\n\r\n              if (getRunner(targetElement)) {\r\n                var operation = invokeFirstDriver(animationEntry);\r\n                if (operation) {\r\n                  startAnimationFn = operation.start;\r\n                }\r\n              }\r\n\r\n              if (!startAnimationFn) {\r\n                closeFn();\r\n              } else {\r\n                var animationRunner = startAnimationFn();\r\n                animationRunner.done(function(status) {\r\n                  closeFn(!status);\r\n                });\r\n                updateAnimationRunners(animationEntry, animationRunner);\r\n              }\r\n            }\r\n          });\r\n        });\r\n\r\n        // we need to sort each of the animations in order of parent to child\r\n        // relationships. This ensures that the child classes are applied at the\r\n        // right time.\r\n        $$rAFScheduler(sortAnimations(toBeSortedAnimations));\r\n      });\r\n\r\n      return runner;\r\n\r\n      // TODO(matsko): change to reference nodes\r\n      function getAnchorNodes(node) {\r\n        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\r\n        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\r\n              ? [node]\r\n              : node.querySelectorAll(SELECTOR);\r\n        var anchors = [];\r\n        forEach(items, function(node) {\r\n          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\r\n          if (attr && attr.length) {\r\n            anchors.push(node);\r\n          }\r\n        });\r\n        return anchors;\r\n      }\r\n\r\n      function groupAnimations(animations) {\r\n        var preparedAnimations = [];\r\n        var refLookup = {};\r\n        forEach(animations, function(animation, index) {\r\n          var element = animation.element;\r\n          var node = getDomNode(element);\r\n          var event = animation.event;\r\n          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\r\n          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\r\n\r\n          if (anchorNodes.length) {\r\n            var direction = enterOrMove ? 'to' : 'from';\r\n\r\n            forEach(anchorNodes, function(anchor) {\r\n              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\r\n              refLookup[key] = refLookup[key] || {};\r\n              refLookup[key][direction] = {\r\n                animationID: index,\r\n                element: jqLite(anchor)\r\n              };\r\n            });\r\n          } else {\r\n            preparedAnimations.push(animation);\r\n          }\r\n        });\r\n\r\n        var usedIndicesLookup = {};\r\n        var anchorGroups = {};\r\n        forEach(refLookup, function(operations, key) {\r\n          var from = operations.from;\r\n          var to = operations.to;\r\n\r\n          if (!from || !to) {\r\n            // only one of these is set therefore we can't have an\r\n            // anchor animation since all three pieces are required\r\n            var index = from ? from.animationID : to.animationID;\r\n            var indexKey = index.toString();\r\n            if (!usedIndicesLookup[indexKey]) {\r\n              usedIndicesLookup[indexKey] = true;\r\n              preparedAnimations.push(animations[index]);\r\n            }\r\n            return;\r\n          }\r\n\r\n          var fromAnimation = animations[from.animationID];\r\n          var toAnimation = animations[to.animationID];\r\n          var lookupKey = from.animationID.toString();\r\n          if (!anchorGroups[lookupKey]) {\r\n            var group = anchorGroups[lookupKey] = {\r\n              structural: true,\r\n              beforeStart: function() {\r\n                fromAnimation.beforeStart();\r\n                toAnimation.beforeStart();\r\n              },\r\n              close: function() {\r\n                fromAnimation.close();\r\n                toAnimation.close();\r\n              },\r\n              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\r\n              from: fromAnimation,\r\n              to: toAnimation,\r\n              anchors: [] // TODO(matsko): change to reference nodes\r\n            };\r\n\r\n            // the anchor animations require that the from and to elements both have at least\r\n            // one shared CSS class which effectively marries the two elements together to use\r\n            // the same animation driver and to properly sequence the anchor animation.\r\n            if (group.classes.length) {\r\n              preparedAnimations.push(group);\r\n            } else {\r\n              preparedAnimations.push(fromAnimation);\r\n              preparedAnimations.push(toAnimation);\r\n            }\r\n          }\r\n\r\n          anchorGroups[lookupKey].anchors.push({\r\n            'out': from.element, 'in': to.element\r\n          });\r\n        });\r\n\r\n        return preparedAnimations;\r\n      }\r\n\r\n      function cssClassesIntersection(a,b) {\r\n        a = a.split(' ');\r\n        b = b.split(' ');\r\n        var matches = [];\r\n\r\n        for (var i = 0; i < a.length; i++) {\r\n          var aa = a[i];\r\n          if (aa.substring(0,3) === 'ng-') continue;\r\n\r\n          for (var j = 0; j < b.length; j++) {\r\n            if (aa === b[j]) {\r\n              matches.push(aa);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return matches.join(' ');\r\n      }\r\n\r\n      function invokeFirstDriver(animationDetails) {\r\n        // we loop in reverse order since the more general drivers (like CSS and JS)\r\n        // may attempt more elements, but custom drivers are more particular\r\n        for (var i = drivers.length - 1; i >= 0; i--) {\r\n          var driverName = drivers[i];\r\n          var factory = $injector.get(driverName);\r\n          var driver = factory(animationDetails);\r\n          if (driver) {\r\n            return driver;\r\n          }\r\n        }\r\n      }\r\n\r\n      function beforeStart() {\r\n        element.addClass(NG_ANIMATE_CLASSNAME);\r\n        if (tempClasses) {\r\n          $$jqLite.addClass(element, tempClasses);\r\n        }\r\n        if (prepareClassName) {\r\n          $$jqLite.removeClass(element, prepareClassName);\r\n          prepareClassName = null;\r\n        }\r\n      }\r\n\r\n      function updateAnimationRunners(animation, newRunner) {\r\n        if (animation.from && animation.to) {\r\n          update(animation.from.element);\r\n          update(animation.to.element);\r\n        } else {\r\n          update(animation.element);\r\n        }\r\n\r\n        function update(element) {\r\n          var runner = getRunner(element);\r\n          if (runner) runner.setHost(newRunner);\r\n        }\r\n      }\r\n\r\n      function handleDestroyedElement() {\r\n        var runner = getRunner(element);\r\n        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\r\n          runner.end();\r\n        }\r\n      }\r\n\r\n      function close(rejected) {\r\n        element.off('$destroy', handleDestroyedElement);\r\n        removeRunner(element);\r\n\r\n        applyAnimationClasses(element, options);\r\n        applyAnimationStyles(element, options);\r\n        options.domOperation();\r\n\r\n        if (tempClasses) {\r\n          $$jqLite.removeClass(element, tempClasses);\r\n        }\r\n\r\n        element.removeClass(NG_ANIMATE_CLASSNAME);\r\n        runner.complete(!rejected);\r\n      }\r\n    };\r\n  }];\r\n}];\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngAnimateSwap\r\n * @restrict A\r\n * @scope\r\n *\r\n * @description\r\n *\r\n * ngAnimateSwap is a animation-oriented directive that allows for the container to\r\n * be removed and entered in whenever the associated expression changes. A\r\n * common usecase for this directive is a rotating banner or slider component which\r\n * contains one image being present at a time. When the active image changes\r\n * then the old image will perform a `leave` animation and the new element\r\n * will be inserted via an `enter` animation.\r\n *\r\n * @animations\r\n * | Animation                        | Occurs                               |\r\n * |----------------------------------|--------------------------------------|\r\n * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |\r\n * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |\r\n *\r\n * @example\r\n * <example name=\"ngAnimateSwap-directive\" module=\"ngAnimateSwapExample\"\r\n *          deps=\"angular-animate.js\"\r\n *          animations=\"true\" fixBase=\"true\">\r\n *   <file name=\"index.html\">\r\n *     <div class=\"container\" ng-controller=\"AppCtrl\">\r\n *       <div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\r\n *         {{ number }}\r\n *       </div>\r\n *     </div>\r\n *   </file>\r\n *   <file name=\"script.js\">\r\n *     angular.module('ngAnimateSwapExample', ['ngAnimate'])\r\n *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {\r\n *         $scope.number = 0;\r\n *         $interval(function() {\r\n *           $scope.number++;\r\n *         }, 1000);\r\n *\r\n *         var colors = ['red','blue','green','yellow','orange'];\r\n *         $scope.colorClass = function(number) {\r\n *           return colors[number % colors.length];\r\n *         };\r\n *       }]);\r\n *   </file>\r\n *  <file name=\"animations.css\">\r\n *  .container {\r\n *    height:250px;\r\n *    width:250px;\r\n *    position:relative;\r\n *    overflow:hidden;\r\n *    border:2px solid black;\r\n *  }\r\n *  .container .cell {\r\n *    font-size:150px;\r\n *    text-align:center;\r\n *    line-height:250px;\r\n *    position:absolute;\r\n *    top:0;\r\n *    left:0;\r\n *    right:0;\r\n *    border-bottom:2px solid black;\r\n *  }\r\n *  .swap-animation.ng-enter, .swap-animation.ng-leave {\r\n *    transition:0.5s linear all;\r\n *  }\r\n *  .swap-animation.ng-enter {\r\n *    top:-250px;\r\n *  }\r\n *  .swap-animation.ng-enter-active {\r\n *    top:0px;\r\n *  }\r\n *  .swap-animation.ng-leave {\r\n *    top:0px;\r\n *  }\r\n *  .swap-animation.ng-leave-active {\r\n *    top:250px;\r\n *  }\r\n *  .red { background:red; }\r\n *  .green { background:green; }\r\n *  .blue { background:blue; }\r\n *  .yellow { background:yellow; }\r\n *  .orange { background:orange; }\r\n *  </file>\r\n * </example>\r\n */\r\nvar ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {\r\n  return {\r\n    restrict: 'A',\r\n    transclude: 'element',\r\n    terminal: true,\r\n    priority: 600, // we use 600 here to ensure that the directive is caught before others\r\n    link: function(scope, $element, attrs, ctrl, $transclude) {\r\n      var previousElement, previousScope;\r\n      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {\r\n        if (previousElement) {\r\n          $animate.leave(previousElement);\r\n        }\r\n        if (previousScope) {\r\n          previousScope.$destroy();\r\n          previousScope = null;\r\n        }\r\n        if (value || value === 0) {\r\n          previousScope = scope.$new();\r\n          $transclude(previousScope, function(element) {\r\n            previousElement = element;\r\n            $animate.enter(element, null, $element);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n}];\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngAnimate\r\n * @description\r\n *\r\n * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\r\n * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.\r\n *\r\n * <div doc-module-components=\"ngAnimate\"></div>\r\n *\r\n * # Usage\r\n * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\r\n * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\r\n * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\r\n * the HTML element that the animation will be triggered on.\r\n *\r\n * ## Directive Support\r\n * The following directives are \"animation aware\":\r\n *\r\n * | Directive                                                                                                | Supported Animations                                                     |\r\n * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\r\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\r\n * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\r\n * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\r\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\r\n * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\r\n * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\r\n * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\r\n * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\r\n * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\r\n * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\r\n *\r\n * (More information can be found by visiting each the documentation associated with each directive.)\r\n *\r\n * ## CSS-based Animations\r\n *\r\n * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\r\n * and CSS code we can create an animation that will be picked up by Angular when an underlying directive performs an operation.\r\n *\r\n * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\r\n *\r\n * ```html\r\n * <div ng-if=\"bool\" class=\"fade\">\r\n *    Fade me in out\r\n * </div>\r\n * <button ng-click=\"bool=true\">Fade In!</button>\r\n * <button ng-click=\"bool=false\">Fade Out!</button>\r\n * ```\r\n *\r\n * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\r\n *\r\n * ```css\r\n * /&#42; The starting CSS styles for the enter animation &#42;/\r\n * .fade.ng-enter {\r\n *   transition:0.5s linear all;\r\n *   opacity:0;\r\n * }\r\n *\r\n * /&#42; The finishing CSS styles for the enter animation &#42;/\r\n * .fade.ng-enter.ng-enter-active {\r\n *   opacity:1;\r\n * }\r\n * ```\r\n *\r\n * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\r\n * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\r\n * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\r\n *\r\n * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\r\n *\r\n * ```css\r\n * /&#42; now the element will fade out before it is removed from the DOM &#42;/\r\n * .fade.ng-leave {\r\n *   transition:0.5s linear all;\r\n *   opacity:1;\r\n * }\r\n * .fade.ng-leave.ng-leave-active {\r\n *   opacity:0;\r\n * }\r\n * ```\r\n *\r\n * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\r\n *\r\n * ```css\r\n * /&#42; there is no need to define anything inside of the destination\r\n * CSS class since the keyframe will take charge of the animation &#42;/\r\n * .fade.ng-leave {\r\n *   animation: my_fade_animation 0.5s linear;\r\n *   -webkit-animation: my_fade_animation 0.5s linear;\r\n * }\r\n *\r\n * @keyframes my_fade_animation {\r\n *   from { opacity:1; }\r\n *   to { opacity:0; }\r\n * }\r\n *\r\n * @-webkit-keyframes my_fade_animation {\r\n *   from { opacity:1; }\r\n *   to { opacity:0; }\r\n * }\r\n * ```\r\n *\r\n * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\r\n *\r\n * ### CSS Class-based Animations\r\n *\r\n * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\r\n * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\r\n * and removed.\r\n *\r\n * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\r\n *\r\n * ```html\r\n * <div ng-show=\"bool\" class=\"fade\">\r\n *   Show and hide me\r\n * </div>\r\n * <button ng-click=\"bool=!bool\">Toggle</button>\r\n *\r\n * <style>\r\n * .fade.ng-hide {\r\n *   transition:0.5s linear all;\r\n *   opacity:0;\r\n * }\r\n * </style>\r\n * ```\r\n *\r\n * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\r\n * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\r\n *\r\n * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\r\n * with CSS styles.\r\n *\r\n * ```html\r\n * <div ng-class=\"{on:onOff}\" class=\"highlight\">\r\n *   Highlight this box\r\n * </div>\r\n * <button ng-click=\"onOff=!onOff\">Toggle</button>\r\n *\r\n * <style>\r\n * .highlight {\r\n *   transition:0.5s linear all;\r\n * }\r\n * .highlight.on-add {\r\n *   background:white;\r\n * }\r\n * .highlight.on {\r\n *   background:yellow;\r\n * }\r\n * .highlight.on-remove {\r\n *   background:black;\r\n * }\r\n * </style>\r\n * ```\r\n *\r\n * We can also make use of CSS keyframes by placing them within the CSS classes.\r\n *\r\n *\r\n * ### CSS Staggering Animations\r\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\r\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\r\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\r\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\r\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\r\n *\r\n * ```css\r\n * .my-animation.ng-enter {\r\n *   /&#42; standard transition code &#42;/\r\n *   transition: 1s linear all;\r\n *   opacity:0;\r\n * }\r\n * .my-animation.ng-enter-stagger {\r\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\r\n *   transition-delay: 0.1s;\r\n *\r\n *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\r\n *     to not accidentally inherit a delay property from another CSS class &#42;/\r\n *   transition-duration: 0s;\r\n * }\r\n * .my-animation.ng-enter.ng-enter-active {\r\n *   /&#42; standard transition styles &#42;/\r\n *   opacity:1;\r\n * }\r\n * ```\r\n *\r\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\r\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\r\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\r\n * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\r\n *\r\n * The following code will issue the **ng-leave-stagger** event on the element provided:\r\n *\r\n * ```js\r\n * var kids = parent.children();\r\n *\r\n * $animate.leave(kids[0]); //stagger index=0\r\n * $animate.leave(kids[1]); //stagger index=1\r\n * $animate.leave(kids[2]); //stagger index=2\r\n * $animate.leave(kids[3]); //stagger index=3\r\n * $animate.leave(kids[4]); //stagger index=4\r\n *\r\n * window.requestAnimationFrame(function() {\r\n *   //stagger has reset itself\r\n *   $animate.leave(kids[5]); //stagger index=0\r\n *   $animate.leave(kids[6]); //stagger index=1\r\n *\r\n *   $scope.$digest();\r\n * });\r\n * ```\r\n *\r\n * Stagger animations are currently only supported within CSS-defined animations.\r\n *\r\n * ### The `ng-animate` CSS class\r\n *\r\n * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\r\n * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\r\n *\r\n * Therefore, animations can be applied to an element using this temporary class directly via CSS.\r\n *\r\n * ```css\r\n * .zipper.ng-animate {\r\n *   transition:0.5s linear all;\r\n * }\r\n * .zipper.ng-enter {\r\n *   opacity:0;\r\n * }\r\n * .zipper.ng-enter.ng-enter-active {\r\n *   opacity:1;\r\n * }\r\n * .zipper.ng-leave {\r\n *   opacity:1;\r\n * }\r\n * .zipper.ng-leave.ng-leave-active {\r\n *   opacity:0;\r\n * }\r\n * ```\r\n *\r\n * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\r\n * the CSS class once an animation has completed.)\r\n *\r\n *\r\n * ### The `ng-[event]-prepare` class\r\n *\r\n * This is a special class that can be used to prevent unwanted flickering / flash of content before\r\n * the actual animation starts. The class is added as soon as an animation is initialized, but removed\r\n * before the actual animation starts (after waiting for a $digest).\r\n * It is also only added for *structural* animations (`enter`, `move`, and `leave`).\r\n *\r\n * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`\r\n * into elements that have class-based animations such as `ngClass`.\r\n *\r\n * ```html\r\n * <div ng-class=\"{red: myProp}\">\r\n *   <div ng-class=\"{blue: myProp}\">\r\n *     <div class=\"message\" ng-if=\"myProp\"></div>\r\n *   </div>\r\n * </div>\r\n * ```\r\n *\r\n * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.\r\n * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:\r\n *\r\n * ```css\r\n * .message.ng-enter-prepare {\r\n *   opacity: 0;\r\n * }\r\n *\r\n * ```\r\n *\r\n * ## JavaScript-based Animations\r\n *\r\n * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\r\n * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\r\n * `module.animation()` module function we can register the animation.\r\n *\r\n * Let's see an example of a enter/leave animation using `ngRepeat`:\r\n *\r\n * ```html\r\n * <div ng-repeat=\"item in items\" class=\"slide\">\r\n *   {{ item }}\r\n * </div>\r\n * ```\r\n *\r\n * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\r\n *\r\n * ```js\r\n * myModule.animation('.slide', [function() {\r\n *   return {\r\n *     // make note that other events (like addClass/removeClass)\r\n *     // have different function input parameters\r\n *     enter: function(element, doneFn) {\r\n *       jQuery(element).fadeIn(1000, doneFn);\r\n *\r\n *       // remember to call doneFn so that angular\r\n *       // knows that the animation has concluded\r\n *     },\r\n *\r\n *     move: function(element, doneFn) {\r\n *       jQuery(element).fadeIn(1000, doneFn);\r\n *     },\r\n *\r\n *     leave: function(element, doneFn) {\r\n *       jQuery(element).fadeOut(1000, doneFn);\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\r\n * greensock.js and velocity.js.\r\n *\r\n * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\r\n * our animations inside of the same registered animation, however, the function input arguments are a bit different:\r\n *\r\n * ```html\r\n * <div ng-class=\"color\" class=\"colorful\">\r\n *   this box is moody\r\n * </div>\r\n * <button ng-click=\"color='red'\">Change to red</button>\r\n * <button ng-click=\"color='blue'\">Change to blue</button>\r\n * <button ng-click=\"color='green'\">Change to green</button>\r\n * ```\r\n *\r\n * ```js\r\n * myModule.animation('.colorful', [function() {\r\n *   return {\r\n *     addClass: function(element, className, doneFn) {\r\n *       // do some cool animation and call the doneFn\r\n *     },\r\n *     removeClass: function(element, className, doneFn) {\r\n *       // do some cool animation and call the doneFn\r\n *     },\r\n *     setClass: function(element, addedClass, removedClass, doneFn) {\r\n *       // do some cool animation and call the doneFn\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * ## CSS + JS Animations Together\r\n *\r\n * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,\r\n * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\r\n * charge of the animation**:\r\n *\r\n * ```html\r\n * <div ng-if=\"bool\" class=\"slide\">\r\n *   Slide in and out\r\n * </div>\r\n * ```\r\n *\r\n * ```js\r\n * myModule.animation('.slide', [function() {\r\n *   return {\r\n *     enter: function(element, doneFn) {\r\n *       jQuery(element).slideIn(1000, doneFn);\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * ```css\r\n * .slide.ng-enter {\r\n *   transition:0.5s linear all;\r\n *   transform:translateY(-100px);\r\n * }\r\n * .slide.ng-enter.ng-enter-active {\r\n *   transform:translateY(0);\r\n * }\r\n * ```\r\n *\r\n * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\r\n * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\r\n * our own JS-based animation code:\r\n *\r\n * ```js\r\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\r\n *   return {\r\n *     enter: function(element) {\r\n*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\r\n *       return $animateCss(element, {\r\n *         event: 'enter',\r\n *         structural: true\r\n *       });\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\r\n *\r\n * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\r\n * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\r\n * data into `$animateCss` directly:\r\n *\r\n * ```js\r\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\r\n *   return {\r\n *     enter: function(element) {\r\n *       return $animateCss(element, {\r\n *         event: 'enter',\r\n *         structural: true,\r\n *         addClass: 'maroon-setting',\r\n *         from: { height:0 },\r\n *         to: { height: 200 }\r\n *       });\r\n *     }\r\n *   }\r\n * }]);\r\n * ```\r\n *\r\n * Now we can fill in the rest via our transition CSS code:\r\n *\r\n * ```css\r\n * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\r\n * .slide.ng-enter { transition:0.5s linear all; }\r\n *\r\n * /&#42; this extra CSS class will be absorbed into the transition\r\n * since the $animateCss code is adding the class &#42;/\r\n * .maroon-setting { background:red; }\r\n * ```\r\n *\r\n * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\r\n *\r\n * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\r\n *\r\n * ## Animation Anchoring (via `ng-animate-ref`)\r\n *\r\n * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\r\n * structural areas of an application (like views) by pairing up elements using an attribute\r\n * called `ng-animate-ref`.\r\n *\r\n * Let's say for example we have two views that are managed by `ng-view` and we want to show\r\n * that there is a relationship between two components situated in within these views. By using the\r\n * `ng-animate-ref` attribute we can identify that the two components are paired together and we\r\n * can then attach an animation, which is triggered when the view changes.\r\n *\r\n * Say for example we have the following template code:\r\n *\r\n * ```html\r\n * <!-- index.html -->\r\n * <div ng-view class=\"view-animation\">\r\n * </div>\r\n *\r\n * <!-- home.html -->\r\n * <a href=\"#/banner-page\">\r\n *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\r\n * </a>\r\n *\r\n * <!-- banner-page.html -->\r\n * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\r\n * ```\r\n *\r\n * Now, when the view changes (once the link is clicked), ngAnimate will examine the\r\n * HTML contents to see if there is a match reference between any components in the view\r\n * that is leaving and the view that is entering. It will scan both the view which is being\r\n * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\r\n * contain a matching ref value.\r\n *\r\n * The two images match since they share the same ref value. ngAnimate will now create a\r\n * transport element (which is a clone of the first image element) and it will then attempt\r\n * to animate to the position of the second image element in the next view. For the animation to\r\n * work a special CSS class called `ng-anchor` will be added to the transported element.\r\n *\r\n * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\r\n * ngAnimate will handle the entire transition for us as well as the addition and removal of\r\n * any changes of CSS classes between the elements:\r\n *\r\n * ```css\r\n * .banner.ng-anchor {\r\n *   /&#42; this animation will last for 1 second since there are\r\n *          two phases to the animation (an `in` and an `out` phase) &#42;/\r\n *   transition:0.5s linear all;\r\n * }\r\n * ```\r\n *\r\n * We also **must** include animations for the views that are being entered and removed\r\n * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\r\n *\r\n * ```css\r\n * .view-animation.ng-enter, .view-animation.ng-leave {\r\n *   transition:0.5s linear all;\r\n *   position:fixed;\r\n *   left:0;\r\n *   top:0;\r\n *   width:100%;\r\n * }\r\n * .view-animation.ng-enter {\r\n *   transform:translateX(100%);\r\n * }\r\n * .view-animation.ng-leave,\r\n * .view-animation.ng-enter.ng-enter-active {\r\n *   transform:translateX(0%);\r\n * }\r\n * .view-animation.ng-leave.ng-leave-active {\r\n *   transform:translateX(-100%);\r\n * }\r\n * ```\r\n *\r\n * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\r\n * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\r\n * from its origin. Once that animation is over then the `in` stage occurs which animates the\r\n * element to its destination. The reason why there are two animations is to give enough time\r\n * for the enter animation on the new element to be ready.\r\n *\r\n * The example above sets up a transition for both the in and out phases, but we can also target the out or\r\n * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\r\n *\r\n * ```css\r\n * .banner.ng-anchor-out {\r\n *   transition: 0.5s linear all;\r\n *\r\n *   /&#42; the scale will be applied during the out animation,\r\n *          but will be animated away when the in animation runs &#42;/\r\n *   transform: scale(1.2);\r\n * }\r\n *\r\n * .banner.ng-anchor-in {\r\n *   transition: 1s linear all;\r\n * }\r\n * ```\r\n *\r\n *\r\n *\r\n *\r\n * ### Anchoring Demo\r\n *\r\n  <example module=\"anchoringExample\"\r\n           name=\"anchoringExample\"\r\n           id=\"anchoringExample\"\r\n           deps=\"angular-animate.js;angular-route.js\"\r\n           animations=\"true\">\r\n    <file name=\"index.html\">\r\n      <a href=\"#!/\">Home</a>\r\n      <hr />\r\n      <div class=\"view-container\">\r\n        <div ng-view class=\"view\"></div>\r\n      </div>\r\n    </file>\r\n    <file name=\"script.js\">\r\n      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\r\n        .config(['$routeProvider', function($routeProvider) {\r\n          $routeProvider.when('/', {\r\n            templateUrl: 'home.html',\r\n            controller: 'HomeController as home'\r\n          });\r\n          $routeProvider.when('/profile/:id', {\r\n            templateUrl: 'profile.html',\r\n            controller: 'ProfileController as profile'\r\n          });\r\n        }])\r\n        .run(['$rootScope', function($rootScope) {\r\n          $rootScope.records = [\r\n            { id: 1, title: 'Miss Beulah Roob' },\r\n            { id: 2, title: 'Trent Morissette' },\r\n            { id: 3, title: 'Miss Ava Pouros' },\r\n            { id: 4, title: 'Rod Pouros' },\r\n            { id: 5, title: 'Abdul Rice' },\r\n            { id: 6, title: 'Laurie Rutherford Sr.' },\r\n            { id: 7, title: 'Nakia McLaughlin' },\r\n            { id: 8, title: 'Jordon Blanda DVM' },\r\n            { id: 9, title: 'Rhoda Hand' },\r\n            { id: 10, title: 'Alexandrea Sauer' }\r\n          ];\r\n        }])\r\n        .controller('HomeController', [function() {\r\n          //empty\r\n        }])\r\n        .controller('ProfileController', ['$rootScope', '$routeParams',\r\n            function ProfileController($rootScope, $routeParams) {\r\n          var index = parseInt($routeParams.id, 10);\r\n          var record = $rootScope.records[index - 1];\r\n\r\n          this.title = record.title;\r\n          this.id = record.id;\r\n        }]);\r\n    </file>\r\n    <file name=\"home.html\">\r\n      <h2>Welcome to the home page</h1>\r\n      <p>Please click on an element</p>\r\n      <a class=\"record\"\r\n         ng-href=\"#!/profile/{{ record.id }}\"\r\n         ng-animate-ref=\"{{ record.id }}\"\r\n         ng-repeat=\"record in records\">\r\n        {{ record.title }}\r\n      </a>\r\n    </file>\r\n    <file name=\"profile.html\">\r\n      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\r\n        {{ profile.title }}\r\n      </div>\r\n    </file>\r\n    <file name=\"animations.css\">\r\n      .record {\r\n        display:block;\r\n        font-size:20px;\r\n      }\r\n      .profile {\r\n        background:black;\r\n        color:white;\r\n        font-size:100px;\r\n      }\r\n      .view-container {\r\n        position:relative;\r\n      }\r\n      .view-container > .view.ng-animate {\r\n        position:absolute;\r\n        top:0;\r\n        left:0;\r\n        width:100%;\r\n        min-height:500px;\r\n      }\r\n      .view.ng-enter, .view.ng-leave,\r\n      .record.ng-anchor {\r\n        transition:0.5s linear all;\r\n      }\r\n      .view.ng-enter {\r\n        transform:translateX(100%);\r\n      }\r\n      .view.ng-enter.ng-enter-active, .view.ng-leave {\r\n        transform:translateX(0%);\r\n      }\r\n      .view.ng-leave.ng-leave-active {\r\n        transform:translateX(-100%);\r\n      }\r\n      .record.ng-anchor-out {\r\n        background:red;\r\n      }\r\n    </file>\r\n  </example>\r\n *\r\n * ### How is the element transported?\r\n *\r\n * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\r\n * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\r\n * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\r\n * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\r\n * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\r\n * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\r\n * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\r\n * will become visible since the shim class will be removed.\r\n *\r\n * ### How is the morphing handled?\r\n *\r\n * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\r\n * what CSS classes differ between the starting element and the destination element. These different CSS classes\r\n * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\r\n * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\r\n * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\r\n * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\r\n * the cloned element is placed inside of root element which is likely close to the body element).\r\n *\r\n * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\r\n *\r\n *\r\n * ## Using $animate in your directive code\r\n *\r\n * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?\r\n * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\r\n * imagine we have a greeting box that shows and hides itself when the data changes\r\n *\r\n * ```html\r\n * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\r\n * ```\r\n *\r\n * ```js\r\n * ngModule.directive('greetingBox', ['$animate', function($animate) {\r\n *   return function(scope, element, attrs) {\r\n *     attrs.$observe('active', function(value) {\r\n *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\r\n *     });\r\n *   });\r\n * }]);\r\n * ```\r\n *\r\n * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\r\n * in our HTML code then we can trigger a CSS or JS animation to happen.\r\n *\r\n * ```css\r\n * /&#42; normally we would create a CSS class to reference on the element &#42;/\r\n * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\r\n * ```\r\n *\r\n * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\r\n * possible be sure to visit the {@link ng.$animate $animate service API page}.\r\n *\r\n *\r\n * ## Callbacks and Promises\r\n *\r\n * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\r\n * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\r\n * ended by chaining onto the returned promise that animation method returns.\r\n *\r\n * ```js\r\n * // somewhere within the depths of the directive\r\n * $animate.enter(element, parent).then(function() {\r\n *   //the animation has completed\r\n * });\r\n * ```\r\n *\r\n * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\r\n * anymore.)\r\n *\r\n * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\r\n * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\r\n * routing controller to hook into that:\r\n *\r\n * ```js\r\n * ngModule.controller('HomePageController', ['$animate', function($animate) {\r\n *   $animate.on('enter', ngViewElement, function(element) {\r\n *     // the animation for this route has completed\r\n *   }]);\r\n * }])\r\n * ```\r\n *\r\n * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)\r\n */\r\n\r\nvar copy;\r\nvar extend;\r\nvar forEach;\r\nvar isArray;\r\nvar isDefined;\r\nvar isElement;\r\nvar isFunction;\r\nvar isObject;\r\nvar isString;\r\nvar isUndefined;\r\nvar jqLite;\r\nvar noop;\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $animate\r\n * @kind object\r\n *\r\n * @description\r\n * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\r\n *\r\n * Click here {@link ng.$animate to learn more about animations with `$animate`}.\r\n */\r\nangular.module('ngAnimate', [], function initAngularHelpers() {\r\n  // Access helpers from angular core.\r\n  // Do it inside a `config` block to ensure `window.angular` is available.\r\n  noop        = angular.noop;\r\n  copy        = angular.copy;\r\n  extend      = angular.extend;\r\n  jqLite      = angular.element;\r\n  forEach     = angular.forEach;\r\n  isArray     = angular.isArray;\r\n  isString    = angular.isString;\r\n  isObject    = angular.isObject;\r\n  isUndefined = angular.isUndefined;\r\n  isDefined   = angular.isDefined;\r\n  isFunction  = angular.isFunction;\r\n  isElement   = angular.isElement;\r\n})\r\n  .directive('ngAnimateSwap', ngAnimateSwapDirective)\r\n\r\n  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\r\n  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\r\n\r\n  .provider('$$animateQueue', $$AnimateQueueProvider)\r\n  .provider('$$animation', $$AnimationProvider)\r\n\r\n  .provider('$animateCss', $AnimateCssProvider)\r\n  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\r\n\r\n  .provider('$$animateJs', $$AnimateJsProvider)\r\n  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\r\n\r\n\r\n})(window, window.angular);\r\n"]}