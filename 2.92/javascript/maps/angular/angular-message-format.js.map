{"version":3,"sources":["angular/angular-message-format.js"],"names":["window","angular","indexToLineAndColumn","text","index","lines","split","i","length","line","column","parseTextLiteral","parsedFn","context","cachedFn","PARSE_CACHE_FOR_TEXT_LITERALS","scope","listener","objectEquality","unwatch","noop","isFunction","subtractOffset","expressionFn","offset","minusOffset","value","newValue","oldValue","MessageSelectorBase","choices","self","this","undefined","$interpolateMinErr","getResult","watchDelegate","MessageSelectorWatchers","msgSelector","lastMessage","messageFnWatcher","expressionFnListener","expressionFnWatcher","SelectMessage","call","SelectMessageProto","PluralMessage","pluralCat","PluralMessageProto","InterpolationParts","trustedContext","allOrNothing","textParts","expressionFns","expressionIndices","partialText","concatParts","InterpolationPartsWatcher","interpolationParts","previousResult","expressionFnsWatcher","newExpressionValues","oldExpressionValues","watchListener","copyNestedParserState","src","dst","expressionMinusOffsetFn","pluralOffset","choiceKey","ruleChoiceKeyword","msgStartIndex","expressionStartIndex","NestedParserState","parser","MessageFormatParser","startIndex","$parse","stringifier","mustHaveExpression","nestedStateStack","rule","ruleStack","interpNestLevel","stringStartIndex","stringQuote","stringInterestsRe","angularOperatorStack","textPart","getEndOperator","opBegin","getBeginOperator","opEnd","Object","create","prototype","getMessageFn","categorizeValue","watchers","cancelWatch","messageFnListener","newMessage","oldMessage","messageFn","isNaN","category","flushPartialText","push","join","addText","addExpressionFn","getExpressionValues","expressionValues","Array","expressionValue","toParsedFn","originalText","errorInParseLogic","watcher","result","EMPTY_STATE","pushState","popState","previousState","pop","matchRe","re","search","lastIndex","match","exec","searchRe","consumeRe","run","initialRule","assertRuleOrNull","NEXT_WORD_RE","errorExpecting","position","word","STRING_START_RE","ruleString","startStringAtMatch","SQUOTED_STRING_INTEREST_RE","DQUOTED_STRING_INTEREST_RE","ruleInsideString","PLURAL_OR_SELECT_ARG_TYPE_RE","rulePluralOrSelect","argType","rulePluralStyle","ruleSelectStyle","rulePluralValueOrKeyword","rulePluralOffset","ruleSelectKeyword","NUMBER_RE","PLURAL_OFFSET_RE","RegExp","source","parseInt","assertChoiceKeyIsNew","SELECT_KEYWORD","ruleMessageText","EXPLICIT_VALUE_OR_KEYWORD_RE","BRACE_OPEN_RE","ruleInInterpolationOrMessageText","INTERP_OR_END_MESSAGE_RE","INTERP_OR_PLURALVALUE_OR_END_MESSAGE_RE","ESCAPE_OR_MUSTACHE_BEGIN_RE","advanceInInterpolationOrMessageText","currentIndex","substring","token","ruleEndMustacheInInterpolationOrMessage","ruleEnteredMustache","ruleInterpolate","ruleInInterpolation","ruleInterpolationEndMustache","ruleEndMustache","ruleAngularExpression","INTERP_END_RE","ruleInAngularExpression","INTERESTING_OPERATORS_RE","innermostOperator","operator","unshift","beginOperator","shift","toJson","$$stringify","$$MessageFormatFactory","$locale","$sce","$exceptionHandler","getStringifier","err","interpolate","$$interpolateDecorator","$$messageFormat","$interpolate","module","$provide"],"mappings":"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","file":"../../angular/angular-message-format.js","sourcesContent":["/**\r\n * @license AngularJS v1.6.2\r\n * (c) 2010-2017 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular) {'use strict';\r\n\r\n// NOTE: ADVANCED_OPTIMIZATIONS mode.\r\n//\r\n// This file is compiled with Closure compiler's ADVANCED_OPTIMIZATIONS flag! Be wary of using\r\n// constructs incompatible with that mode.\r\n\r\n/* global isFunction: false */\r\n/* global noop: false */\r\n/* global toJson: false */\r\n/* global $$stringify: false */\r\n\r\n// Convert an index into the string into line/column for use in error messages\r\n// As such, this doesn't have to be efficient.\r\nfunction indexToLineAndColumn(text, index) {\r\n  var lines = text.split(/\\n/g);\r\n  for (var i = 0; i < lines.length; i++) {\r\n    var line = lines[i];\r\n    if (index >= line.length) {\r\n      index -= line.length;\r\n    } else {\r\n      return { line: i + 1, column: index + 1 };\r\n    }\r\n  }\r\n}\r\nvar PARSE_CACHE_FOR_TEXT_LITERALS = Object.create(null);\r\n\r\nfunction parseTextLiteral(text) {\r\n  var cachedFn = PARSE_CACHE_FOR_TEXT_LITERALS[text];\r\n  if (cachedFn != null) {\r\n    return cachedFn;\r\n  }\r\n  function parsedFn(context) { return text; }\r\n  parsedFn['$$watchDelegate'] = function watchDelegate(scope, listener, objectEquality) {\r\n    var unwatch = scope['$watch'](noop,\r\n        function textLiteralWatcher() {\r\n          if (isFunction(listener)) { listener(text, text, scope); }\r\n          unwatch();\r\n        },\r\n        objectEquality);\r\n    return unwatch;\r\n  };\r\n  PARSE_CACHE_FOR_TEXT_LITERALS[text] = parsedFn;\r\n  parsedFn['exp'] = text; // Needed to pretend to be $interpolate for tests copied from interpolateSpec.js\r\n  parsedFn['expressions'] = []; // Require this to call $compile.$$addBindingInfo() which allows Protractor to find elements by binding.\r\n  return parsedFn;\r\n}\r\n\r\nfunction subtractOffset(expressionFn, offset) {\r\n  if (offset === 0) {\r\n    return expressionFn;\r\n  }\r\n  function minusOffset(value) {\r\n    return (value == null) ? value : value - offset;\r\n  }\r\n  function parsedFn(context) { return minusOffset(expressionFn(context)); }\r\n  var unwatch;\r\n  parsedFn['$$watchDelegate'] = function watchDelegate(scope, listener, objectEquality) {\r\n    unwatch = scope['$watch'](expressionFn,\r\n        function pluralExpressionWatchListener(newValue, oldValue) {\r\n          if (isFunction(listener)) { listener(minusOffset(newValue), minusOffset(oldValue), scope); }\r\n        },\r\n        objectEquality);\r\n    return unwatch;\r\n  };\r\n  return parsedFn;\r\n}\r\n\r\n// NOTE: ADVANCED_OPTIMIZATIONS mode.\r\n//\r\n// This file is compiled with Closure compiler's ADVANCED_OPTIMIZATIONS flag! Be wary of using\r\n// constructs incompatible with that mode.\r\n\r\n/* global $interpolateMinErr: false */\r\n/* global isFunction: false */\r\n/* global noop: false */\r\n\r\n/**\r\n * @constructor\r\n * @private\r\n */\r\nfunction MessageSelectorBase(expressionFn, choices) {\r\n  var self = this;\r\n  this.expressionFn = expressionFn;\r\n  this.choices = choices;\r\n  if (choices['other'] === undefined) {\r\n    throw $interpolateMinErr('reqother', '“other” is a required option.');\r\n  }\r\n  this.parsedFn = function(context) { return self.getResult(context); };\r\n  this.parsedFn['$$watchDelegate'] = function $$watchDelegate(scope, listener, objectEquality) {\r\n    return self.watchDelegate(scope, listener, objectEquality);\r\n  };\r\n  this.parsedFn['exp'] = expressionFn['exp'];\r\n  this.parsedFn['expressions'] = expressionFn['expressions'];\r\n}\r\n\r\nMessageSelectorBase.prototype.getMessageFn = function getMessageFn(value) {\r\n  return this.choices[this.categorizeValue(value)];\r\n};\r\n\r\nMessageSelectorBase.prototype.getResult = function getResult(context) {\r\n  return this.getMessageFn(this.expressionFn(context))(context);\r\n};\r\n\r\nMessageSelectorBase.prototype.watchDelegate = function watchDelegate(scope, listener, objectEquality) {\r\n  var watchers = new MessageSelectorWatchers(this, scope, listener, objectEquality);\r\n  return function() { watchers.cancelWatch(); };\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @private\r\n */\r\nfunction MessageSelectorWatchers(msgSelector, scope, listener, objectEquality) {\r\n  var self = this;\r\n  this.scope = scope;\r\n  this.msgSelector = msgSelector;\r\n  this.listener = listener;\r\n  this.objectEquality = objectEquality;\r\n  this.lastMessage = undefined;\r\n  this.messageFnWatcher = noop;\r\n  var expressionFnListener = function(newValue, oldValue) { return self.expressionFnListener(newValue, oldValue); };\r\n  this.expressionFnWatcher = scope['$watch'](msgSelector.expressionFn, expressionFnListener, objectEquality);\r\n}\r\n\r\nMessageSelectorWatchers.prototype.expressionFnListener = function expressionFnListener(newValue, oldValue) {\r\n  var self = this;\r\n  this.messageFnWatcher();\r\n  var messageFnListener = function(newMessage, oldMessage) { return self.messageFnListener(newMessage, oldMessage); };\r\n  var messageFn = this.msgSelector.getMessageFn(newValue);\r\n  this.messageFnWatcher = this.scope['$watch'](messageFn, messageFnListener, this.objectEquality);\r\n};\r\n\r\nMessageSelectorWatchers.prototype.messageFnListener = function messageFnListener(newMessage, oldMessage) {\r\n  if (isFunction(this.listener)) {\r\n    this.listener.call(null, newMessage, newMessage === oldMessage ? newMessage : this.lastMessage, this.scope);\r\n  }\r\n  this.lastMessage = newMessage;\r\n};\r\n\r\nMessageSelectorWatchers.prototype.cancelWatch = function cancelWatch() {\r\n  this.expressionFnWatcher();\r\n  this.messageFnWatcher();\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @extends MessageSelectorBase\r\n * @private\r\n */\r\nfunction SelectMessage(expressionFn, choices) {\r\n  MessageSelectorBase.call(this, expressionFn, choices);\r\n}\r\n\r\nfunction SelectMessageProto() {}\r\nSelectMessageProto.prototype = MessageSelectorBase.prototype;\r\n\r\nSelectMessage.prototype = new SelectMessageProto();\r\nSelectMessage.prototype.categorizeValue = function categorizeSelectValue(value) {\r\n  return (this.choices[value] !== undefined) ? value : 'other';\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @extends MessageSelectorBase\r\n * @private\r\n */\r\nfunction PluralMessage(expressionFn, choices, offset, pluralCat) {\r\n  MessageSelectorBase.call(this, expressionFn, choices);\r\n  this.offset = offset;\r\n  this.pluralCat = pluralCat;\r\n}\r\n\r\nfunction PluralMessageProto() {}\r\nPluralMessageProto.prototype = MessageSelectorBase.prototype;\r\n\r\nPluralMessage.prototype = new PluralMessageProto();\r\nPluralMessage.prototype.categorizeValue = function categorizePluralValue(value) {\r\n  if (isNaN(value)) {\r\n    return 'other';\r\n  } else if (this.choices[value] !== undefined) {\r\n    return value;\r\n  } else {\r\n    var category = this.pluralCat(value - this.offset);\r\n    return (this.choices[category] !== undefined) ? category : 'other';\r\n  }\r\n};\r\n\r\n// NOTE: ADVANCED_OPTIMIZATIONS mode.\r\n//\r\n// This file is compiled with Closure compiler's ADVANCED_OPTIMIZATIONS flag! Be wary of using\r\n// constructs incompatible with that mode.\r\n\r\n/* global $interpolateMinErr: false */\r\n/* global isFunction: false */\r\n/* global parseTextLiteral: false */\r\n\r\n/**\r\n * @constructor\r\n * @private\r\n */\r\nfunction InterpolationParts(trustedContext, allOrNothing) {\r\n  this.trustedContext = trustedContext;\r\n  this.allOrNothing = allOrNothing;\r\n  this.textParts = [];\r\n  this.expressionFns = [];\r\n  this.expressionIndices = [];\r\n  this.partialText = '';\r\n  this.concatParts = null;\r\n}\r\n\r\nInterpolationParts.prototype.flushPartialText = function flushPartialText() {\r\n  if (this.partialText) {\r\n    if (this.concatParts == null) {\r\n      this.textParts.push(this.partialText);\r\n    } else {\r\n      this.textParts.push(this.concatParts.join(''));\r\n      this.concatParts = null;\r\n    }\r\n    this.partialText = '';\r\n  }\r\n};\r\n\r\nInterpolationParts.prototype.addText = function addText(text) {\r\n  if (text.length) {\r\n    if (!this.partialText) {\r\n      this.partialText = text;\r\n    } else if (this.concatParts) {\r\n      this.concatParts.push(text);\r\n    } else {\r\n      this.concatParts = [this.partialText, text];\r\n    }\r\n  }\r\n};\r\n\r\nInterpolationParts.prototype.addExpressionFn = function addExpressionFn(expressionFn) {\r\n  this.flushPartialText();\r\n  this.expressionIndices.push(this.textParts.length);\r\n  this.expressionFns.push(expressionFn);\r\n  this.textParts.push('');\r\n};\r\n\r\nInterpolationParts.prototype.getExpressionValues = function getExpressionValues(context) {\r\n  var expressionValues = new Array(this.expressionFns.length);\r\n  for (var i = 0; i < this.expressionFns.length; i++) {\r\n    expressionValues[i] = this.expressionFns[i](context);\r\n  }\r\n  return expressionValues;\r\n};\r\n\r\nInterpolationParts.prototype.getResult = function getResult(expressionValues) {\r\n  for (var i = 0; i < this.expressionIndices.length; i++) {\r\n    var expressionValue = expressionValues[i];\r\n    if (this.allOrNothing && expressionValue === undefined) return;\r\n    this.textParts[this.expressionIndices[i]] = expressionValue;\r\n  }\r\n  return this.textParts.join('');\r\n};\r\n\r\n\r\nInterpolationParts.prototype.toParsedFn = function toParsedFn(mustHaveExpression, originalText) {\r\n  var self = this;\r\n  this.flushPartialText();\r\n  if (mustHaveExpression && this.expressionFns.length === 0) {\r\n    return undefined;\r\n  }\r\n  if (this.textParts.length === 0) {\r\n    return parseTextLiteral('');\r\n  }\r\n  if (this.trustedContext && this.textParts.length > 1) {\r\n    $interpolateMinErr['throwNoconcat'](originalText);\r\n  }\r\n  if (this.expressionFns.length === 0) {\r\n    if (this.textParts.length !== 1) { this.errorInParseLogic(); }\r\n    return parseTextLiteral(this.textParts[0]);\r\n  }\r\n  var parsedFn = function(context) {\r\n    return self.getResult(self.getExpressionValues(context));\r\n  };\r\n  parsedFn['$$watchDelegate'] = function $$watchDelegate(scope, listener, objectEquality) {\r\n    return self.watchDelegate(scope, listener, objectEquality);\r\n  };\r\n\r\n  parsedFn['exp'] = originalText; // Needed to pretend to be $interpolate for tests copied from interpolateSpec.js\r\n  parsedFn['expressions'] = new Array(this.expressionFns.length); // Require this to call $compile.$$addBindingInfo() which allows Protractor to find elements by binding.\r\n  for (var i = 0; i < this.expressionFns.length; i++) {\r\n    parsedFn['expressions'][i] = this.expressionFns[i]['exp'];\r\n  }\r\n\r\n  return parsedFn;\r\n};\r\n\r\nInterpolationParts.prototype.watchDelegate = function watchDelegate(scope, listener, objectEquality) {\r\n  var watcher = new InterpolationPartsWatcher(this, scope, listener, objectEquality);\r\n  return function() { watcher.cancelWatch(); };\r\n};\r\n\r\nfunction InterpolationPartsWatcher(interpolationParts, scope, listener, objectEquality) {\r\n  this.interpolationParts = interpolationParts;\r\n  this.scope = scope;\r\n  this.previousResult = (undefined);\r\n  this.listener = listener;\r\n  var self = this;\r\n  this.expressionFnsWatcher = scope['$watchGroup'](interpolationParts.expressionFns, function(newExpressionValues, oldExpressionValues) {\r\n    self.watchListener(newExpressionValues, oldExpressionValues);\r\n  });\r\n}\r\n\r\nInterpolationPartsWatcher.prototype.watchListener = function watchListener(newExpressionValues, oldExpressionValues) {\r\n  var result = this.interpolationParts.getResult(newExpressionValues);\r\n  if (isFunction(this.listener)) {\r\n    this.listener.call(null, result, newExpressionValues === oldExpressionValues ? result : this.previousResult, this.scope);\r\n  }\r\n  this.previousResult = result;\r\n};\r\n\r\nInterpolationPartsWatcher.prototype.cancelWatch = function cancelWatch() {\r\n  this.expressionFnsWatcher();\r\n};\r\n\r\n// NOTE: ADVANCED_OPTIMIZATIONS mode.\r\n//\r\n// This file is compiled with Closure compiler's ADVANCED_OPTIMIZATIONS flag! Be wary of using\r\n// constructs incompatible with that mode.\r\n\r\n/* global $interpolateMinErr: false */\r\n/* global indexToLineAndColumn: false */\r\n/* global InterpolationParts: false */\r\n/* global PluralMessage: false */\r\n/* global SelectMessage: false */\r\n/* global subtractOffset: false */\r\n\r\n// The params src and dst are exactly one of two types: NestedParserState or MessageFormatParser.\r\n// This function is fully optimized by V8. (inspect via IRHydra or --trace-deopt.)\r\n// The idea behind writing it this way is to avoid repeating oneself.  This is the ONE place where\r\n// the parser state that is saved/restored when parsing nested mustaches is specified.\r\nfunction copyNestedParserState(src, dst) {\r\n  dst.expressionFn = src.expressionFn;\r\n  dst.expressionMinusOffsetFn = src.expressionMinusOffsetFn;\r\n  dst.pluralOffset = src.pluralOffset;\r\n  dst.choices = src.choices;\r\n  dst.choiceKey = src.choiceKey;\r\n  dst.interpolationParts = src.interpolationParts;\r\n  dst.ruleChoiceKeyword = src.ruleChoiceKeyword;\r\n  dst.msgStartIndex = src.msgStartIndex;\r\n  dst.expressionStartIndex = src.expressionStartIndex;\r\n}\r\n\r\nfunction NestedParserState(parser) {\r\n  copyNestedParserState(parser, this);\r\n}\r\n\r\n/**\r\n * @constructor\r\n * @private\r\n */\r\nfunction MessageFormatParser(text, startIndex, $parse, pluralCat, stringifier,\r\n                             mustHaveExpression, trustedContext, allOrNothing) {\r\n  this.text = text;\r\n  this.index = startIndex || 0;\r\n  this.$parse = $parse;\r\n  this.pluralCat = pluralCat;\r\n  this.stringifier = stringifier;\r\n  this.mustHaveExpression = !!mustHaveExpression;\r\n  this.trustedContext = trustedContext;\r\n  this.allOrNothing = !!allOrNothing;\r\n  this.expressionFn = null;\r\n  this.expressionMinusOffsetFn = null;\r\n  this.pluralOffset = null;\r\n  this.choices = null;\r\n  this.choiceKey = null;\r\n  this.interpolationParts = null;\r\n  this.msgStartIndex = null;\r\n  this.nestedStateStack = [];\r\n  this.parsedFn = null;\r\n  this.rule = null;\r\n  this.ruleStack = null;\r\n  this.ruleChoiceKeyword = null;\r\n  this.interpNestLevel = null;\r\n  this.expressionStartIndex = null;\r\n  this.stringStartIndex = null;\r\n  this.stringQuote = null;\r\n  this.stringInterestsRe = null;\r\n  this.angularOperatorStack = null;\r\n  this.textPart = null;\r\n}\r\n\r\n// preserve v8 optimization.\r\nvar EMPTY_STATE = new NestedParserState(new MessageFormatParser(\r\n        /* text= */ '', /* startIndex= */ 0, /* $parse= */ null, /* pluralCat= */ null, /* stringifier= */ null,\r\n        /* mustHaveExpression= */ false, /* trustedContext= */ null, /* allOrNothing */ false));\r\n\r\nMessageFormatParser.prototype.pushState = function pushState() {\r\n  this.nestedStateStack.push(new NestedParserState(this));\r\n  copyNestedParserState(EMPTY_STATE, this);\r\n};\r\n\r\nMessageFormatParser.prototype.popState = function popState() {\r\n  if (this.nestedStateStack.length === 0) {\r\n    this.errorInParseLogic();\r\n  }\r\n  var previousState = this.nestedStateStack.pop();\r\n  copyNestedParserState(previousState, this);\r\n};\r\n\r\n// Oh my JavaScript!  Who knew you couldn't match a regex at a specific\r\n// location in a string but will always search forward?!\r\n// Apparently you'll be growing this ability via the sticky flag (y) in\r\n// ES6.  I'll just to work around you for now.\r\nMessageFormatParser.prototype.matchRe = function matchRe(re, search) {\r\n  re.lastIndex = this.index;\r\n  var match = re.exec(this.text);\r\n  if (match != null && (search === true || (match.index === this.index))) {\r\n    this.index = re.lastIndex;\r\n    return match;\r\n  }\r\n  return null;\r\n};\r\n\r\nMessageFormatParser.prototype.searchRe = function searchRe(re) {\r\n  return this.matchRe(re, true);\r\n};\r\n\r\n\r\nMessageFormatParser.prototype.consumeRe = function consumeRe(re) {\r\n  // Without the sticky flag, we can't use the .test() method to consume a\r\n  // match at the current index.  Instead, we'll use the slower .exec() method\r\n  // and verify match.index.\r\n  return !!this.matchRe(re);\r\n};\r\n\r\n// Run through our grammar avoiding deeply nested function call chains.\r\nMessageFormatParser.prototype.run = function run(initialRule) {\r\n  this.ruleStack = [initialRule];\r\n  do {\r\n    this.rule = this.ruleStack.pop();\r\n    while (this.rule) {\r\n      this.rule();\r\n    }\r\n    this.assertRuleOrNull(this.rule);\r\n  } while (this.ruleStack.length > 0);\r\n};\r\n\r\nMessageFormatParser.prototype.errorInParseLogic = function errorInParseLogic() {\r\n    throw $interpolateMinErr('logicbug',\r\n        'The messageformat parser has encountered an internal error.  Please file a github issue against the AngularJS project and provide this message text that triggers the bug.  Text: “{0}”',\r\n        this.text);\r\n};\r\n\r\nMessageFormatParser.prototype.assertRuleOrNull = function assertRuleOrNull(rule) {\r\n  if (rule === undefined) {\r\n    this.errorInParseLogic();\r\n  }\r\n};\r\n\r\nvar NEXT_WORD_RE = /\\s*(\\w+)\\s*/g;\r\nMessageFormatParser.prototype.errorExpecting = function errorExpecting() {\r\n  // What was wrong with the syntax? Unsupported type, missing comma, or something else?\r\n  var match = this.matchRe(NEXT_WORD_RE), position;\r\n  if (match == null) {\r\n    position = indexToLineAndColumn(this.text, this.index);\r\n    throw $interpolateMinErr('reqarg',\r\n        'Expected one of “plural” or “select” at line {0}, column {1} of text “{2}”',\r\n        position.line, position.column, this.text);\r\n  }\r\n  var word = match[1];\r\n  if (word === 'select' || word === 'plural') {\r\n    position = indexToLineAndColumn(this.text, this.index);\r\n    throw $interpolateMinErr('reqcomma',\r\n        'Expected a comma after the keyword “{0}” at line {1}, column {2} of text “{3}”',\r\n        word, position.line, position.column, this.text);\r\n  } else {\r\n    position = indexToLineAndColumn(this.text, this.index);\r\n    throw $interpolateMinErr('unknarg',\r\n        'Unsupported keyword “{0}” at line {0}, column {1}. Only “plural” and “select” are currently supported.  Text: “{3}”',\r\n        word, position.line, position.column, this.text);\r\n  }\r\n};\r\n\r\nvar STRING_START_RE = /['\"]/g;\r\nMessageFormatParser.prototype.ruleString = function ruleString() {\r\n  var match = this.matchRe(STRING_START_RE);\r\n  if (match == null) {\r\n    var position = indexToLineAndColumn(this.text, this.index);\r\n    throw $interpolateMinErr('wantstring',\r\n        'Expected the beginning of a string at line {0}, column {1} in text “{2}”',\r\n        position.line, position.column, this.text);\r\n  }\r\n  this.startStringAtMatch(match);\r\n};\r\n\r\nMessageFormatParser.prototype.startStringAtMatch = function startStringAtMatch(match) {\r\n  this.stringStartIndex = match.index;\r\n  this.stringQuote = match[0];\r\n  this.stringInterestsRe = this.stringQuote === '\\'' ? SQUOTED_STRING_INTEREST_RE : DQUOTED_STRING_INTEREST_RE;\r\n  this.rule = this.ruleInsideString;\r\n};\r\n\r\nvar SQUOTED_STRING_INTEREST_RE = /\\\\(?:\\\\|'|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{2}|[0-7]{3}|\\r\\n|\\n|[\\s\\S])|'/g;\r\nvar DQUOTED_STRING_INTEREST_RE = /\\\\(?:\\\\|\"|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{2}|[0-7]{3}|\\r\\n|\\n|[\\s\\S])|\"/g;\r\nMessageFormatParser.prototype.ruleInsideString = function ruleInsideString() {\r\n  var match = this.searchRe(this.stringInterestsRe);\r\n  if (match == null) {\r\n    var position = indexToLineAndColumn(this.text, this.stringStartIndex);\r\n    throw $interpolateMinErr('untermstr',\r\n        'The string beginning at line {0}, column {1} is unterminated in text “{2}”',\r\n        position.line, position.column, this.text);\r\n  }\r\n  if (match[0] === this.stringQuote) {\r\n    this.rule = null;\r\n  }\r\n};\r\n\r\nvar PLURAL_OR_SELECT_ARG_TYPE_RE = /\\s*(plural|select)\\s*,\\s*/g;\r\nMessageFormatParser.prototype.rulePluralOrSelect = function rulePluralOrSelect() {\r\n  var match = this.searchRe(PLURAL_OR_SELECT_ARG_TYPE_RE);\r\n  if (match == null) {\r\n    this.errorExpecting();\r\n  }\r\n  var argType = match[1];\r\n  switch (argType) {\r\n    case 'plural': this.rule = this.rulePluralStyle; break;\r\n    case 'select': this.rule = this.ruleSelectStyle; break;\r\n    default: this.errorInParseLogic();\r\n  }\r\n};\r\n\r\nMessageFormatParser.prototype.rulePluralStyle = function rulePluralStyle() {\r\n  this.choices = Object.create(null);\r\n  this.ruleChoiceKeyword = this.rulePluralValueOrKeyword;\r\n  this.rule = this.rulePluralOffset;\r\n};\r\n\r\nMessageFormatParser.prototype.ruleSelectStyle = function ruleSelectStyle() {\r\n  this.choices = Object.create(null);\r\n  this.ruleChoiceKeyword = this.ruleSelectKeyword;\r\n  this.rule = this.ruleSelectKeyword;\r\n};\r\n\r\nvar NUMBER_RE = /[0]|(?:[1-9][0-9]*)/g;\r\nvar PLURAL_OFFSET_RE = new RegExp('\\\\s*offset\\\\s*:\\\\s*(' + NUMBER_RE.source + ')', 'g');\r\n\r\nMessageFormatParser.prototype.rulePluralOffset = function rulePluralOffset() {\r\n  var match = this.matchRe(PLURAL_OFFSET_RE);\r\n  this.pluralOffset = (match == null) ? 0 : parseInt(match[1], 10);\r\n  this.expressionMinusOffsetFn = subtractOffset(this.expressionFn, this.pluralOffset);\r\n  this.rule = this.rulePluralValueOrKeyword;\r\n};\r\n\r\nMessageFormatParser.prototype.assertChoiceKeyIsNew = function assertChoiceKeyIsNew(choiceKey, index) {\r\n  if (this.choices[choiceKey] !== undefined) {\r\n    var position = indexToLineAndColumn(this.text, index);\r\n    throw $interpolateMinErr('dupvalue',\r\n        'The choice “{0}” is specified more than once. Duplicate key is at line {1}, column {2} in text “{3}”',\r\n        choiceKey, position.line, position.column, this.text);\r\n  }\r\n};\r\n\r\nvar SELECT_KEYWORD = /\\s*(\\w+)/g;\r\nMessageFormatParser.prototype.ruleSelectKeyword = function ruleSelectKeyword() {\r\n  var match = this.matchRe(SELECT_KEYWORD);\r\n  if (match == null) {\r\n    this.parsedFn = new SelectMessage(this.expressionFn, this.choices).parsedFn;\r\n    this.rule = null;\r\n    return;\r\n  }\r\n  this.choiceKey = match[1];\r\n  this.assertChoiceKeyIsNew(this.choiceKey, match.index);\r\n  this.rule = this.ruleMessageText;\r\n};\r\n\r\nvar EXPLICIT_VALUE_OR_KEYWORD_RE = new RegExp('\\\\s*(?:(?:=(' + NUMBER_RE.source + '))|(\\\\w+))', 'g');\r\nMessageFormatParser.prototype.rulePluralValueOrKeyword = function rulePluralValueOrKeyword() {\r\n  var match = this.matchRe(EXPLICIT_VALUE_OR_KEYWORD_RE);\r\n  if (match == null) {\r\n    this.parsedFn = new PluralMessage(this.expressionFn, this.choices, this.pluralOffset, this.pluralCat).parsedFn;\r\n    this.rule = null;\r\n    return;\r\n  }\r\n  if (match[1] != null) {\r\n    this.choiceKey = parseInt(match[1], 10);\r\n  } else {\r\n    this.choiceKey = match[2];\r\n  }\r\n  this.assertChoiceKeyIsNew(this.choiceKey, match.index);\r\n  this.rule = this.ruleMessageText;\r\n};\r\n\r\nvar BRACE_OPEN_RE = /\\s*\\{/g;\r\nvar BRACE_CLOSE_RE = /}/g;\r\nMessageFormatParser.prototype.ruleMessageText = function ruleMessageText() {\r\n  if (!this.consumeRe(BRACE_OPEN_RE)) {\r\n    var position = indexToLineAndColumn(this.text, this.index);\r\n    throw $interpolateMinErr('reqopenbrace',\r\n        'The plural choice “{0}” must be followed by a message in braces at line {1}, column {2} in text “{3}”',\r\n        this.choiceKey, position.line, position.column, this.text);\r\n  }\r\n  this.msgStartIndex = this.index;\r\n  this.interpolationParts = new InterpolationParts(this.trustedContext, this.allOrNothing);\r\n  this.rule = this.ruleInInterpolationOrMessageText;\r\n};\r\n\r\n// Note: Since \"\\\" is used as an escape character, don't allow it to be part of the\r\n// startSymbol/endSymbol when I add the feature to allow them to be redefined.\r\nvar INTERP_OR_END_MESSAGE_RE = /\\\\.|{{|}/g;\r\nvar INTERP_OR_PLURALVALUE_OR_END_MESSAGE_RE = /\\\\.|{{|#|}/g;\r\nvar ESCAPE_OR_MUSTACHE_BEGIN_RE = /\\\\.|{{/g;\r\nMessageFormatParser.prototype.advanceInInterpolationOrMessageText = function advanceInInterpolationOrMessageText() {\r\n  var currentIndex = this.index, match;\r\n  if (this.ruleChoiceKeyword == null) { // interpolation\r\n    match = this.searchRe(ESCAPE_OR_MUSTACHE_BEGIN_RE);\r\n    if (match == null) { // End of interpolation text.  Nothing more to process.\r\n      this.textPart = this.text.substring(currentIndex);\r\n      this.index = this.text.length;\r\n      return null;\r\n    }\r\n  } else {\r\n    match = this.searchRe(this.ruleChoiceKeyword === this.rulePluralValueOrKeyword ?\r\n                          INTERP_OR_PLURALVALUE_OR_END_MESSAGE_RE : INTERP_OR_END_MESSAGE_RE);\r\n    if (match == null) {\r\n      var position = indexToLineAndColumn(this.text, this.msgStartIndex);\r\n      throw $interpolateMinErr('reqendbrace',\r\n          'The plural/select choice “{0}” message starting at line {1}, column {2} does not have an ending closing brace. Text “{3}”',\r\n          this.choiceKey, position.line, position.column, this.text);\r\n    }\r\n  }\r\n  // match is non-null.\r\n  var token = match[0];\r\n  this.textPart = this.text.substring(currentIndex, match.index);\r\n  return token;\r\n};\r\n\r\nMessageFormatParser.prototype.ruleInInterpolationOrMessageText = function ruleInInterpolationOrMessageText() {\r\n  var currentIndex = this.index;\r\n  var token = this.advanceInInterpolationOrMessageText();\r\n  if (token == null) {\r\n    // End of interpolation text.  Nothing more to process.\r\n    this.index = this.text.length;\r\n    this.interpolationParts.addText(this.text.substring(currentIndex));\r\n    this.rule = null;\r\n    return;\r\n  }\r\n  if (token[0] === '\\\\') {\r\n    // unescape next character and continue\r\n    this.interpolationParts.addText(this.textPart + token[1]);\r\n    return;\r\n  }\r\n  this.interpolationParts.addText(this.textPart);\r\n  if (token === '{{') {\r\n    this.pushState();\r\n    this.ruleStack.push(this.ruleEndMustacheInInterpolationOrMessage);\r\n    this.rule = this.ruleEnteredMustache;\r\n  } else if (token === '}') {\r\n    this.choices[this.choiceKey] = this.interpolationParts.toParsedFn(/*mustHaveExpression=*/false, this.text);\r\n    this.rule = this.ruleChoiceKeyword;\r\n  } else if (token === '#') {\r\n    this.interpolationParts.addExpressionFn(this.expressionMinusOffsetFn);\r\n  } else {\r\n    this.errorInParseLogic();\r\n  }\r\n};\r\n\r\nMessageFormatParser.prototype.ruleInterpolate = function ruleInterpolate() {\r\n  this.interpolationParts = new InterpolationParts(this.trustedContext, this.allOrNothing);\r\n  this.rule = this.ruleInInterpolation;\r\n};\r\n\r\nMessageFormatParser.prototype.ruleInInterpolation = function ruleInInterpolation() {\r\n  var currentIndex = this.index;\r\n  var match = this.searchRe(ESCAPE_OR_MUSTACHE_BEGIN_RE);\r\n  if (match == null) {\r\n    // End of interpolation text.  Nothing more to process.\r\n    this.index = this.text.length;\r\n    this.interpolationParts.addText(this.text.substring(currentIndex));\r\n    this.parsedFn = this.interpolationParts.toParsedFn(this.mustHaveExpression, this.text);\r\n    this.rule = null;\r\n    return;\r\n  }\r\n  var token = match[0];\r\n  if (token[0] === '\\\\') {\r\n    // unescape next character and continue\r\n    this.interpolationParts.addText(this.text.substring(currentIndex, match.index) + token[1]);\r\n    return;\r\n  }\r\n  this.interpolationParts.addText(this.text.substring(currentIndex, match.index));\r\n  this.pushState();\r\n  this.ruleStack.push(this.ruleInterpolationEndMustache);\r\n  this.rule = this.ruleEnteredMustache;\r\n};\r\n\r\nMessageFormatParser.prototype.ruleInterpolationEndMustache = function ruleInterpolationEndMustache() {\r\n  var expressionFn = this.parsedFn;\r\n  this.popState();\r\n  this.interpolationParts.addExpressionFn(expressionFn);\r\n  this.rule = this.ruleInInterpolation;\r\n};\r\n\r\nMessageFormatParser.prototype.ruleEnteredMustache = function ruleEnteredMustache() {\r\n  this.parsedFn = null;\r\n  this.ruleStack.push(this.ruleEndMustache);\r\n  this.rule = this.ruleAngularExpression;\r\n};\r\n\r\nMessageFormatParser.prototype.ruleEndMustacheInInterpolationOrMessage = function ruleEndMustacheInInterpolationOrMessage() {\r\n  var expressionFn = this.parsedFn;\r\n  this.popState();\r\n  this.interpolationParts.addExpressionFn(expressionFn);\r\n  this.rule = this.ruleInInterpolationOrMessageText;\r\n};\r\n\r\n\r\n\r\nvar INTERP_END_RE = /\\s*}}/g;\r\nMessageFormatParser.prototype.ruleEndMustache = function ruleEndMustache() {\r\n  var match = this.matchRe(INTERP_END_RE);\r\n  if (match == null) {\r\n    var position = indexToLineAndColumn(this.text, this.index);\r\n    throw $interpolateMinErr('reqendinterp',\r\n        'Expecting end of interpolation symbol, “{0}”, at line {1}, column {2} in text “{3}”',\r\n        '}}', position.line, position.column, this.text);\r\n  }\r\n  if (this.parsedFn == null) {\r\n    // If we parsed a MessageFormat extension, (e.g. select/plural today, maybe more some other\r\n    // day), then the result *has* to be a string and those rules would have already set\r\n    // this.parsedFn.  If there was no MessageFormat extension, then there is no requirement to\r\n    // stringify the result and parsedFn isn't set.  We set it here.  While we could have set it\r\n    // unconditionally when exiting the Angular expression, I intend for us to not just replace\r\n    // $interpolate, but also to replace $parse in a future version (so ng-bind can work), and in\r\n    // such a case we do not want to unnecessarily stringify something if it's not going to be used\r\n    // in a string context.\r\n    this.parsedFn = this.$parse(this.expressionFn, this.stringifier);\r\n    this.parsedFn['exp'] = this.expressionFn['exp']; // Needed to pretend to be $interpolate for tests copied from interpolateSpec.js\r\n    this.parsedFn['expressions'] = this.expressionFn['expressions']; // Require this to call $compile.$$addBindingInfo() which allows Protractor to find elements by binding.\r\n  }\r\n  this.rule = null;\r\n};\r\n\r\nMessageFormatParser.prototype.ruleAngularExpression = function ruleAngularExpression() {\r\n  this.angularOperatorStack = [];\r\n  this.expressionStartIndex = this.index;\r\n  this.rule = this.ruleInAngularExpression;\r\n};\r\n\r\nfunction getEndOperator(opBegin) {\r\n  switch (opBegin) {\r\n    case '{': return '}';\r\n    case '[': return ']';\r\n    case '(': return ')';\r\n    default: return null;\r\n  }\r\n}\r\n\r\nfunction getBeginOperator(opEnd) {\r\n  switch (opEnd) {\r\n    case '}': return '{';\r\n    case ']': return '[';\r\n    case ')': return '(';\r\n    default: return null;\r\n  }\r\n}\r\n\r\n// TODO(chirayu): The interpolation endSymbol must also be accounted for. It\r\n// just so happens that \"}\" is an operator so it's in the list below.  But we\r\n// should support any other type of start/end interpolation symbol.\r\nvar INTERESTING_OPERATORS_RE = /[[\\]{}()'\",]/g;\r\nMessageFormatParser.prototype.ruleInAngularExpression = function ruleInAngularExpression() {\r\n  var match = this.searchRe(INTERESTING_OPERATORS_RE);\r\n  var position;\r\n  if (match == null) {\r\n    if (this.angularOperatorStack.length === 0) {\r\n      // This is the end of the Angular expression so this is actually a\r\n      // success.  Note that when inside an interpolation, this means we even\r\n      // consumed the closing interpolation symbols if they were curlies.  This\r\n      // is NOT an error at this point but will become an error further up the\r\n      // stack when the part that saw the opening curlies is unable to find the\r\n      // closing ones.\r\n      this.index = this.text.length;\r\n      this.expressionFn = this.$parse(this.text.substring(this.expressionStartIndex, this.index));\r\n      // Needed to pretend to be $interpolate for tests copied from interpolateSpec.js\r\n      this.expressionFn['exp'] = this.text.substring(this.expressionStartIndex, this.index);\r\n      this.expressionFn['expressions'] = this.expressionFn['expressions'];\r\n      this.rule = null;\r\n      return;\r\n    }\r\n    var innermostOperator = this.angularOperatorStack[0];\r\n    throw $interpolateMinErr('badexpr',\r\n        'Unexpected end of Angular expression.  Expecting operator “{0}” at the end of the text “{1}”',\r\n        this.getEndOperator(innermostOperator), this.text);\r\n  }\r\n  var operator = match[0];\r\n  if (operator === '\\'' || operator === '\"') {\r\n    this.ruleStack.push(this.ruleInAngularExpression);\r\n    this.startStringAtMatch(match);\r\n    return;\r\n  }\r\n  if (operator === ',') {\r\n    if (this.trustedContext) {\r\n      position = indexToLineAndColumn(this.text, this.index);\r\n      throw $interpolateMinErr('unsafe',\r\n          'Use of select/plural MessageFormat syntax is currently disallowed in a secure context ({0}).  At line {1}, column {2} of text “{3}”',\r\n          this.trustedContext, position.line, position.column, this.text);\r\n    }\r\n    // only the top level comma has relevance.\r\n    if (this.angularOperatorStack.length === 0) {\r\n      // todo: does this need to be trimmed?\r\n      this.expressionFn = this.$parse(this.text.substring(this.expressionStartIndex, match.index));\r\n      // Needed to pretend to be $interpolate for tests copied from interpolateSpec.js\r\n      this.expressionFn['exp'] = this.text.substring(this.expressionStartIndex, match.index);\r\n      this.expressionFn['expressions'] = this.expressionFn['expressions'];\r\n      this.rule = null;\r\n      this.rule = this.rulePluralOrSelect;\r\n    }\r\n    return;\r\n  }\r\n  if (getEndOperator(operator) != null) {\r\n    this.angularOperatorStack.unshift(operator);\r\n    return;\r\n  }\r\n  var beginOperator = getBeginOperator(operator);\r\n  if (beginOperator == null) {\r\n    this.errorInParseLogic();\r\n  }\r\n  if (this.angularOperatorStack.length > 0) {\r\n    if (beginOperator === this.angularOperatorStack[0]) {\r\n      this.angularOperatorStack.shift();\r\n      return;\r\n    }\r\n    position = indexToLineAndColumn(this.text, this.index);\r\n    throw $interpolateMinErr('badexpr',\r\n        'Unexpected operator “{0}” at line {1}, column {2} in text. Was expecting “{3}”. Text: “{4}”',\r\n        operator, position.line, position.column, getEndOperator(this.angularOperatorStack[0]), this.text);\r\n  }\r\n  // We are trying to pop off the operator stack but there really isn't anything to pop off.\r\n  this.index = match.index;\r\n  this.expressionFn = this.$parse(this.text.substring(this.expressionStartIndex, this.index));\r\n  // Needed to pretend to be $interpolate for tests copied from interpolateSpec.js\r\n  this.expressionFn['exp'] = this.text.substring(this.expressionStartIndex, this.index);\r\n  this.expressionFn['expressions'] = this.expressionFn['expressions'];\r\n  this.rule = null;\r\n};\r\n\r\n// NOTE: ADVANCED_OPTIMIZATIONS mode.\r\n//\r\n// This file is compiled with Closure compiler's ADVANCED_OPTIMIZATIONS flag! Be wary of using\r\n// constructs incompatible with that mode.\r\n\r\n/* global $interpolateMinErr: true */\r\n/* global isFunction: true */\r\n/* global noop: true */\r\n/* global toJson: true */\r\n/* global MessageFormatParser: false */\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngMessageFormat\r\n * @packageName angular-message-format\r\n *\r\n * @description\r\n *\r\n * ## What is  ngMessageFormat?\r\n *\r\n * The ngMessageFormat module extends the Angular {@link ng.$interpolate `$interpolate`} service\r\n * with a syntax for handling pluralization and gender specific messages, which is based on the\r\n * [ICU MessageFormat syntax][ICU].\r\n *\r\n * See [the design doc][ngMessageFormat doc] for more information.\r\n *\r\n * [ICU]: http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat\r\n * [ngMessageFormat doc]: https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit\r\n *\r\n * ## Examples\r\n *\r\n * ### Gender\r\n *\r\n * This example uses the \"select\" keyword to specify the message based on gender.\r\n *\r\n * <example name=\"ngMessageFormat-example-gender\" module=\"msgFmtExample\" deps=\"angular-message-format.js\">\r\n * <file name=\"index.html\">\r\n *  <div ng-controller=\"AppController\">\r\n *    Select Recipient:<br>\r\n      <select ng-model=\"recipient\" ng-options=\"person as person.name for person in recipients\">\r\n      </select>\r\n      <p>{{recipient.gender, select,\r\n                male {{{recipient.name}} unwrapped his gift. }\r\n                female {{{recipient.name}} unwrapped her gift. }\r\n                other {{{recipient.name}} unwrapped their gift. }\r\n      }}</p>\r\n *  </div>\r\n * </file>\r\n * <file name=\"script.js\">\r\n *   function Person(name, gender) {\r\n *     this.name = name;\r\n *     this.gender = gender;\r\n *   }\r\n *\r\n *   var alice   = new Person('Alice', 'female'),\r\n *       bob     = new Person('Bob', 'male'),\r\n *       ashley = new Person('Ashley', '');\r\n *\r\n *   angular.module('msgFmtExample', ['ngMessageFormat'])\r\n *     .controller('AppController', ['$scope', function($scope) {\r\n *         $scope.recipients = [alice, bob, ashley];\r\n *         $scope.recipient = $scope.recipients[0];\r\n *       }]);\r\n * </file>\r\n * </example>\r\n *\r\n * ### Plural\r\n *\r\n * This example shows how the \"plural\" keyword is used to account for a variable number of entities.\r\n * The \"#\" variable holds the current number and can be embedded in the message.\r\n *\r\n * Note that \"=1\" takes precedence over \"one\".\r\n *\r\n * The example also shows the \"offset\" keyword, which allows you to offset the value of the \"#\" variable.\r\n *\r\n * <example name=\"ngMessageFormat-example-plural\" module=\"msgFmtExample\" deps=\"angular-message-format.js\">\r\n * <file name=\"index.html\">\r\n *   <div ng-controller=\"AppController\">\r\n *    <button ng-click=\"recipients.pop()\" id=\"decreaseRecipients\">decreaseRecipients</button><br>\r\n *    Select recipients:<br>\r\n *    <select multiple size=5 ng-model=\"recipients\" ng-options=\"person as person.name for person in people\">\r\n *    </select><br>\r\n *     <p>{{recipients.length, plural, offset:1\r\n *             =0    {{{sender.name}} gave no gifts (\\#=#)}\r\n *             =1    {{{sender.name}} gave a gift to {{recipients[0].name}} (\\#=#)}\r\n *             one   {{{sender.name}} gave {{recipients[0].name}} and one other person a gift (\\#=#)}\r\n *             other {{{sender.name}} gave {{recipients[0].name}} and # other people a gift (\\#=#)}\r\n *           }}</p>\r\n *   </div>\r\n * </file>\r\n *\r\n * <file name=\"script.js\">\r\n *   function Person(name, gender) {\r\n *     this.name = name;\r\n *     this.gender = gender;\r\n *   }\r\n *\r\n *   var alice   = new Person('Alice', 'female'),\r\n *       bob     = new Person('Bob', 'male'),\r\n *       sarah     = new Person('Sarah', 'female'),\r\n *       harry   = new Person('Harry Potter', 'male'),\r\n *       ashley   = new Person('Ashley', '');\r\n *\r\n *   angular.module('msgFmtExample', ['ngMessageFormat'])\r\n *     .controller('AppController', ['$scope', function($scope) {\r\n *         $scope.people = [alice, bob, sarah, ashley];\r\n *         $scope.recipients = [alice, bob, sarah];\r\n *         $scope.sender = harry;\r\n *       }]);\r\n * </file>\r\n *\r\n * <file name=\"protractor.js\" type=\"protractor\">\r\n *   describe('MessageFormat plural', function() {\r\n *\r\n *     it('should pluralize initial values', function() {\r\n *       var messageElem = element(by.binding('recipients.length')),\r\n *           decreaseRecipientsBtn = element(by.id('decreaseRecipients'));\r\n *\r\n *       expect(messageElem.getText()).toEqual('Harry Potter gave Alice and 2 other people a gift (#=2)');\r\n *       decreaseRecipientsBtn.click();\r\n *       expect(messageElem.getText()).toEqual('Harry Potter gave Alice and one other person a gift (#=1)');\r\n *       decreaseRecipientsBtn.click();\r\n *       expect(messageElem.getText()).toEqual('Harry Potter gave a gift to Alice (#=0)');\r\n *       decreaseRecipientsBtn.click();\r\n *       expect(messageElem.getText()).toEqual('Harry Potter gave no gifts (#=-1)');\r\n *     });\r\n *   });\r\n * </file>\r\n * </example>\r\n *\r\n * ### Plural and Gender together\r\n *\r\n * This example shows how you can specify gender rules for specific plural matches - in this case,\r\n * =1 is special cased for gender.\r\n * <example name=\"ngMessageFormat-example-plural-gender\" module=\"msgFmtExample\" deps=\"angular-message-format.js\">\r\n *   <file name=\"index.html\">\r\n *     <div ng-controller=\"AppController\">\r\n       Select recipients:<br>\r\n       <select multiple size=5 ng-model=\"recipients\" ng-options=\"person as person.name for person in people\">\r\n       </select><br>\r\n        <p>{{recipients.length, plural,\r\n          =0 {{{sender.name}} has not given any gifts to anyone.}\r\n          =1 {  {{recipients[0].gender, select,\r\n                 female { {{sender.name}} gave {{recipients[0].name}} her gift.}\r\n                 male { {{sender.name}} gave {{recipients[0].name}} his gift.}\r\n                 other { {{sender.name}} gave {{recipients[0].name}} their gift.}\r\n                }}\r\n              }\r\n          other {{{sender.name}} gave {{recipients.length}} people gifts.}\r\n          }}</p>\r\n      </file>\r\n *    <file name=\"script.js\">\r\n *      function Person(name, gender) {\r\n *        this.name = name;\r\n *        this.gender = gender;\r\n *      }\r\n *\r\n *      var alice   = new Person('Alice', 'female'),\r\n *          bob     = new Person('Bob', 'male'),\r\n *          harry   = new Person('Harry Potter', 'male'),\r\n *          ashley   = new Person('Ashley', '');\r\n *\r\n *      angular.module('msgFmtExample', ['ngMessageFormat'])\r\n *        .controller('AppController', ['$scope', function($scope) {\r\n *            $scope.people = [alice, bob, ashley];\r\n *            $scope.recipients = [alice];\r\n *            $scope.sender = harry;\r\n *          }]);\r\n *    </file>\r\n    </example>\r\n */\r\n\r\nvar $$MessageFormatFactory = ['$parse', '$locale', '$sce', '$exceptionHandler', function $$messageFormat(\r\n                               $parse,   $locale,   $sce,   $exceptionHandler) {\r\n\r\n  function getStringifier(trustedContext, allOrNothing, text) {\r\n    return function stringifier(value) {\r\n      try {\r\n        value = trustedContext ? $sce['getTrusted'](trustedContext, value) : $sce['valueOf'](value);\r\n        return allOrNothing && (value === undefined) ? value : $$stringify(value);\r\n      } catch (err) {\r\n        $exceptionHandler($interpolateMinErr['interr'](text, err));\r\n      }\r\n    };\r\n  }\r\n\r\n  function interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {\r\n    var stringifier = getStringifier(trustedContext, allOrNothing, text);\r\n    var parser = new MessageFormatParser(text, 0, $parse, $locale['pluralCat'], stringifier,\r\n                                         mustHaveExpression, trustedContext, allOrNothing);\r\n    parser.run(parser.ruleInterpolate);\r\n    return parser.parsedFn;\r\n  }\r\n\r\n  return {\r\n    'interpolate': interpolate\r\n  };\r\n}];\r\n\r\nvar $$interpolateDecorator = ['$$messageFormat', '$delegate', function $$interpolateDecorator($$messageFormat, $interpolate) {\r\n  if ($interpolate['startSymbol']() !== '{{' || $interpolate['endSymbol']() !== '}}') {\r\n    throw $interpolateMinErr('nochgmustache', 'angular-message-format.js currently does not allow you to use custom start and end symbols for interpolation.');\r\n  }\r\n  var interpolate = $$messageFormat['interpolate'];\r\n  interpolate['startSymbol'] = $interpolate['startSymbol'];\r\n  interpolate['endSymbol'] = $interpolate['endSymbol'];\r\n  return interpolate;\r\n}];\r\n\r\nvar $interpolateMinErr;\r\nvar isFunction;\r\nvar noop;\r\nvar toJson;\r\nvar $$stringify;\r\n\r\nvar module = window['angular']['module']('ngMessageFormat', ['ng']);\r\nmodule['factory']('$$messageFormat', $$MessageFormatFactory);\r\nmodule['config'](['$provide', function($provide) {\r\n  $interpolateMinErr = window['angular']['$interpolateMinErr'];\r\n  isFunction = window['angular']['isFunction'];\r\n  noop = window['angular']['noop'];\r\n  toJson = window['angular']['toJson'];\r\n  $$stringify = window['angular']['$$stringify'];\r\n\r\n  $provide['decorator']('$interpolate', $$interpolateDecorator);\r\n}]);\r\n\r\n\r\n})(window, window.angular);\r\n"]}