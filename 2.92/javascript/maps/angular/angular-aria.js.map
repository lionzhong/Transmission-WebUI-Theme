{"version":3,"sources":["angular/angular-aria.js"],"names":["window","angular","$AriaProvider","watchExpr","attrName","ariaAttr","nodeBlackList","negate","scope","elem","attr","ariaCamelName","$normalize","config","isNodeOneOf","$watch","boolVal","ariaHidden","ariaChecked","ariaReadonly","ariaDisabled","ariaRequired","ariaInvalid","ariaValue","tabindex","bindKeydown","bindRoleForClick","this","newConfig","extend","$get","key","$$watchExpr","ngAriaModule","module","provider","nodeTypeArray","indexOf","nodeName","directive","$aria","shouldAttachAttr","normalizedAttr","allowBlacklistEls","shouldAttachRole","role","getShape","type","restrict","require","priority","compile","shape","post","ngModel","ngAriaWatchModelValue","$modelValue","getRadioReaction","newVal","value","$viewValue","getCheckboxReaction","$isEmpty","needsTabIndex","needsAriaValuemin","hasOwnProperty","needsAriaValuemax","needsAriaValuenow","$observe","$validators","required","$invalid","link","ngMessages","$parse","fn","ngClick","ngKeydown","ngKeypress","ngKeyup","on","event","callback","$event","keyCode","which","$apply"],"mappings":"CAKA,SAAUA,EAAQC,GAAU,YA0F5B,SAASC,KA2CP,QAASC,GAAUC,EAAUC,EAAUC,EAAeC,GACpD,MAAO,UAASC,EAAOC,EAAMC,GAC3B,GAAIC,GAAgBD,EAAKE,WAAWP,IAChCQ,EAAOF,IAAmBG,EAAYL,EAAMH,IAAmBI,EAAKC,IACtEH,EAAMO,OAAOL,EAAKN,GAAW,SAASY,GAEpCA,EAAUT,GAAUS,IAAYA,EAChCP,EAAKC,KAAKL,EAAUW,MAjD5B,GAAIH,IACFI,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,kBAAkB,EA4BpBC,MAAKd,OAAS,SAASe,GACrBf,EAASZ,EAAQ4B,OAAOhB,EAAQe,IAiElCD,KAAKG,KAAO,WACV,OACEjB,OAAQ,SAASkB,GACf,MAAOlB,GAAOkB,IAEhBC,YAAa7B,IAjJnB,GAAI8B,GAAehC,EAAQiC,OAAO,UAAW,OACrBC,SAAS,QAASjC,GAKtCI,GAAiB,SAAU,IAAK,QAAS,WAAY,SAAU,UAAW,WAE1EQ,EAAc,SAASL,EAAM2B,GAC/B,GAAIA,EAAcC,QAAQ5B,EAAK,GAAG6B,aAAc,EAC9C,OAAO,EA6IXL,GAAaM,UAAU,UAAW,QAAS,SAASC,GAClD,MAAOA,GAAMR,YAAY,SAAU,kBAAmB,MAEvDO,UAAU,UAAW,QAAS,SAASC,GACtC,MAAOA,GAAMR,YAAY,SAAU,kBAAmB,MAEvDO,UAAU,WAAY,QAAS,SAASC,GACvC,MAAOA,GAAMR,YAAY,UAAW,eAAgB1B,GAAe,MAEpEiC,UAAU,aAAc,QAAS,SAASC,GACzC,MAAOA,GAAMR,YAAY,YAAa,eAAgB1B,GAAe,MAEtEiC,UAAU,cAAe,QAAS,SAASC,GAC1C,MAAOA,GAAMR,YAAY,aAAc,gBAAiB1B,GAAe,MAExEiC,UAAU,cAAe,QAAS,SAASC,GAC1C,MAAOA,GAAMR,YAAY,aAAc,gBAAiB1B,GAAe,MAExEiC,UAAU,WAAY,QAAS,SAASC,GAEvC,QAASC,GAAiB/B,EAAMgC,EAAgBjC,EAAMkC,GACpD,MAAOH,GAAM3B,OAAO6B,KAAoBjC,EAAKC,KAAKA,KAAUiC,IAAsB7B,EAAYL,EAAMH,IAGtG,QAASsC,GAAiBC,EAAMpC,GAI9B,OAAQA,EAAKC,KAAK,SAAYD,EAAKC,KAAK,UAAYmC,IAAU/B,EAAYL,EAAMH,GAGlF,QAASwC,GAASpC,EAAMD,GACtB,GAAIsC,GAAOrC,EAAKqC,KACZF,EAAOnC,EAAKmC,IAEhB,OAA2B,cAAlBE,GAAQF,IAAiC,qBAATA,EAA+B,WAC7C,WAAlBE,GAAQF,IAAiC,kBAATA,EAA4B,QACpD,UAATE,GAA0C,gBAATF,GAAmC,WAATA,EAAqB,QAAU,GAGpG,OACEG,SAAU,IACVC,QAAS,UACTC,SAAU,IACVC,QAAS,SAAS1C,EAAMC,GACtB,GAAI0C,GAAQN,EAASpC,EAAMD,EAE3B,QACE4C,KAAM,SAAS7C,EAAOC,EAAMC,EAAM4C,GAGhC,QAASC,KACP,MAAOD,GAAQE,YAGjB,QAASC,GAAiBC,GAGxB,GAAI1C,GAAWN,EAAKiD,OAASL,EAAQM,UACrCnD,GAAKC,KAAK,eAAgBM,GAG5B,QAAS6C,KACPpD,EAAKC,KAAK,gBAAiB4C,EAAQQ,SAASR,EAAQM,aAdtD,GAAIG,GAAgBtB,EAAiB,WAAY,WAAYhC,GAAM,EAiBnE,QAAQ2C,GACN,IAAK,QACL,IAAK,WACCR,EAAiBQ,EAAO3C,IAC1BA,EAAKC,KAAK,OAAQ0C,GAEhBX,EAAiB,eAAgB,cAAehC,GAAM,IACxDD,EAAMO,OAAOwC,EAAiC,UAAVH,EAChCK,EAAmBI,GAErBE,GACFtD,EAAKC,KAAK,WAAY,EAExB,MACF,KAAK,QAIH,GAHIkC,EAAiBQ,EAAO3C,IAC1BA,EAAKC,KAAK,OAAQ,UAEhB8B,EAAM3B,OAAO,aAAc,CAC7B,GAAImD,IAAqBvD,EAAKC,KAAK,mBAC9BA,EAAKuD,eAAe,QAAUvD,EAAKuD,eAAe,UACnDC,GAAqBzD,EAAKC,KAAK,mBAC9BA,EAAKuD,eAAe,QAAUvD,EAAKuD,eAAe,UACnDE,GAAqB1D,EAAKC,KAAK,gBAE/BsD,IACFtD,EAAK0D,SAAS,MAAO,SAAgCV,GACnDjD,EAAKC,KAAK,gBAAiBgD,KAG3BQ,GACFxD,EAAK0D,SAAS,MAAO,SAAgCV,GACnDjD,EAAKC,KAAK,gBAAiBgD,KAG3BS,GACF3D,EAAMO,OAAOwC,EAAuB,SAAgCG,GAClEjD,EAAKC,KAAK,gBAAiBgD,KAI7BK,GACFtD,EAAKC,KAAK,WAAY,IAKvBA,EAAKuD,eAAe,eAAiBX,EAAQe,YAAYC,UACzD7B,EAAiB,gBAAiB,eAAgBhC,GAAM,IAE3DC,EAAK0D,SAAS,WAAY,WACxB3D,EAAKC,KAAK,kBAAmBA,EAAe,YAI5C+B,EAAiB,eAAgB,cAAehC,GAAM,IACxDD,EAAMO,OAAO,WACX,MAAOuC,GAAQiB,UACd,SAA+Bb,GAChCjD,EAAKC,KAAK,iBAAkBgD,YAQzCnB,UAAU,cAAe,QAAS,SAASC,GAC1C,MAAOA,GAAMR,YAAY,aAAc,gBAAiB1B,GAAe,MAExEiC,UAAU,aAAc,WACvB,OACES,SAAU,IACVC,QAAS,cACTuB,KAAM,SAAShE,EAAOC,EAAMC,EAAM+D,GAC3BhE,EAAKC,KAAK,cACbD,EAAKC,KAAK,YAAa,iBAK9B6B,UAAU,WAAW,QAAS,SAAU,SAASC,EAAOkC,GACvD,OACE1B,SAAU,IACVG,QAAS,SAAS1C,EAAMC,GACtB,GAAIiE,GAAKD,EAAOhE,EAAKkE,QACrB,OAAO,UAASpE,EAAOC,EAAMC,GAEtBI,EAAYL,EAAMH,KAEjBkC,EAAM3B,OAAO,sBAAwBJ,EAAKC,KAAK,SACjDD,EAAKC,KAAK,OAAQ,UAGhB8B,EAAM3B,OAAO,cAAgBJ,EAAKC,KAAK,aACzCD,EAAKC,KAAK,WAAY,IAGpB8B,EAAM3B,OAAO,gBAAmBH,EAAKmE,WAAcnE,EAAKoE,YAAepE,EAAKqE,SAC9EtE,EAAKuE,GAAG,UAAW,SAASC,GAM1B,QAASC,KACPP,EAAGnE,GAAS2E,OAAQF,IANtB,GAAIG,GAAUH,EAAMI,OAASJ,EAAMG,OACnB,MAAZA,GAA8B,KAAZA,GACpB5E,EAAM8E,OAAOJ,YAa5B3C,UAAU,cAAe,QAAS,SAASC,GAC1C,MAAO,UAAShC,EAAOC,EAAMC,IACvB8B,EAAM3B,OAAO,aAAgBJ,EAAKC,KAAK,aAAgBI,EAAYL,EAAMH,IAC3EG,EAAKC,KAAK,WAAY,QAMzBV,OAAQA,OAAOC","file":"../../angular/angular-aria.js","sourcesContent":["/**\r\n * @license AngularJS v1.6.2\r\n * (c) 2010-2017 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular) {'use strict';\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngAria\r\n * @description\r\n *\r\n * The `ngAria` module provides support for common\r\n * [<abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)\r\n * attributes that convey state or semantic information about the application for users\r\n * of assistive technologies, such as screen readers.\r\n *\r\n * <div doc-module-components=\"ngAria\"></div>\r\n *\r\n * ## Usage\r\n *\r\n * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following\r\n * directives are supported:\r\n * `ngModel`, `ngChecked`, `ngReadonly`, `ngRequired`, `ngValue`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`,\r\n * `ngDblClick`, and `ngMessages`.\r\n *\r\n * Below is a more detailed breakdown of the attributes handled by ngAria:\r\n *\r\n * | Directive                                   | Supported Attributes                                                                                |\r\n * |---------------------------------------------|-----------------------------------------------------------------------------------------------------|\r\n * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |\r\n * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                                       |\r\n * | {@link ng.directive:ngRequired ngRequired}  | aria-required                                                                                       |\r\n * | {@link ng.directive:ngChecked ngChecked}    | aria-checked                                                                                        |\r\n * | {@link ng.directive:ngReadonly ngReadonly}  | aria-readonly                                                                                       |\r\n * | {@link ng.directive:ngValue ngValue}        | aria-checked                                                                                        |\r\n * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                                         |\r\n * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                                         |\r\n * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                                            |\r\n * | {@link module:ngMessages ngMessages}        | aria-live                                                                                           |\r\n * | {@link ng.directive:ngClick ngClick}        | tabindex, keydown event, button role                                                                |\r\n *\r\n * Find out more information about each directive by reading the\r\n * {@link guide/accessibility ngAria Developer Guide}.\r\n *\r\n * ## Example\r\n * Using ngDisabled with ngAria:\r\n * ```html\r\n * <md-checkbox ng-disabled=\"disabled\">\r\n * ```\r\n * Becomes:\r\n * ```html\r\n * <md-checkbox ng-disabled=\"disabled\" aria-disabled=\"true\">\r\n * ```\r\n *\r\n * ## Disabling Attributes\r\n * It's possible to disable individual attributes added by ngAria with the\r\n * {@link ngAria.$ariaProvider#config config} method. For more details, see the\r\n * {@link guide/accessibility Developer Guide}.\r\n */\r\nvar ngAriaModule = angular.module('ngAria', ['ng']).\r\n                        provider('$aria', $AriaProvider);\r\n\r\n/**\r\n* Internal Utilities\r\n*/\r\nvar nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA', 'SELECT', 'DETAILS', 'SUMMARY'];\r\n\r\nvar isNodeOneOf = function(elem, nodeTypeArray) {\r\n  if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {\r\n    return true;\r\n  }\r\n};\r\n/**\r\n * @ngdoc provider\r\n * @name $ariaProvider\r\n * @this\r\n *\r\n * @description\r\n *\r\n * Used for configuring the ARIA attributes injected and managed by ngAria.\r\n *\r\n * ```js\r\n * angular.module('myApp', ['ngAria'], function config($ariaProvider) {\r\n *   $ariaProvider.config({\r\n *     ariaValue: true,\r\n *     tabindex: false\r\n *   });\r\n * });\r\n *```\r\n *\r\n * ## Dependencies\r\n * Requires the {@link ngAria} module to be installed.\r\n *\r\n */\r\nfunction $AriaProvider() {\r\n  var config = {\r\n    ariaHidden: true,\r\n    ariaChecked: true,\r\n    ariaReadonly: true,\r\n    ariaDisabled: true,\r\n    ariaRequired: true,\r\n    ariaInvalid: true,\r\n    ariaValue: true,\r\n    tabindex: true,\r\n    bindKeydown: true,\r\n    bindRoleForClick: true\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $ariaProvider#config\r\n   *\r\n   * @param {object} config object to enable/disable specific ARIA attributes\r\n   *\r\n   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags\r\n   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags\r\n   *  - **ariaReadonly** – `{boolean}` – Enables/disables aria-readonly tags\r\n   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags\r\n   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags\r\n   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags\r\n   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and\r\n   *    aria-valuenow tags\r\n   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags\r\n   *  - **bindKeydown** – `{boolean}` – Enables/disables keyboard event binding on non-interactive\r\n   *    elements (such as `div` or `li`) using ng-click, making them more accessible to users of\r\n   *    assistive technologies\r\n   *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements (such as\r\n   *    `div` or `li`) using ng-click, making them more accessible to users of assistive\r\n   *    technologies\r\n   *\r\n   * @description\r\n   * Enables/disables various ARIA attributes\r\n   */\r\n  this.config = function(newConfig) {\r\n    config = angular.extend(config, newConfig);\r\n  };\r\n\r\n  function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {\r\n    return function(scope, elem, attr) {\r\n      var ariaCamelName = attr.$normalize(ariaAttr);\r\n      if (config[ariaCamelName] && !isNodeOneOf(elem, nodeBlackList) && !attr[ariaCamelName]) {\r\n        scope.$watch(attr[attrName], function(boolVal) {\r\n          // ensure boolean value\r\n          boolVal = negate ? !boolVal : !!boolVal;\r\n          elem.attr(ariaAttr, boolVal);\r\n        });\r\n      }\r\n    };\r\n  }\r\n  /**\r\n   * @ngdoc service\r\n   * @name $aria\r\n   *\r\n   * @description\r\n   * @priority 200\r\n   *\r\n   * The $aria service contains helper methods for applying common\r\n   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.\r\n   *\r\n   * ngAria injects common accessibility attributes that tell assistive technologies when HTML\r\n   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,\r\n   * let's review a code snippet from ngAria itself:\r\n   *\r\n   *```js\r\n   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {\r\n   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled', nodeBlackList, false);\r\n   * }])\r\n   *```\r\n   * Shown above, the ngAria module creates a directive with the same signature as the\r\n   * traditional `ng-disabled` directive. But this ngAria version is dedicated to\r\n   * solely managing accessibility attributes on custom elements. The internal `$aria` service is\r\n   * used to watch the boolean attribute `ngDisabled`. If it has not been explicitly set by the\r\n   * developer, `aria-disabled` is injected as an attribute with its value synchronized to the\r\n   * value in `ngDisabled`.\r\n   *\r\n   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do\r\n   * anything to enable this feature. The `aria-disabled` attribute is automatically managed\r\n   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.\r\n   *\r\n   * The full list of directives that interface with ngAria:\r\n   * * **ngModel**\r\n   * * **ngChecked**\r\n   * * **ngReadonly**\r\n   * * **ngRequired**\r\n   * * **ngDisabled**\r\n   * * **ngValue**\r\n   * * **ngShow**\r\n   * * **ngHide**\r\n   * * **ngClick**\r\n   * * **ngDblclick**\r\n   * * **ngMessages**\r\n   *\r\n   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each\r\n   * directive.\r\n   *\r\n   *\r\n   * ## Dependencies\r\n   * Requires the {@link ngAria} module to be installed.\r\n   */\r\n  this.$get = function() {\r\n    return {\r\n      config: function(key) {\r\n        return config[key];\r\n      },\r\n      $$watchExpr: watchExpr\r\n    };\r\n  };\r\n}\r\n\r\n\r\nngAriaModule.directive('ngShow', ['$aria', function($aria) {\r\n  return $aria.$$watchExpr('ngShow', 'aria-hidden', [], true);\r\n}])\r\n.directive('ngHide', ['$aria', function($aria) {\r\n  return $aria.$$watchExpr('ngHide', 'aria-hidden', [], false);\r\n}])\r\n.directive('ngValue', ['$aria', function($aria) {\r\n  return $aria.$$watchExpr('ngValue', 'aria-checked', nodeBlackList, false);\r\n}])\r\n.directive('ngChecked', ['$aria', function($aria) {\r\n  return $aria.$$watchExpr('ngChecked', 'aria-checked', nodeBlackList, false);\r\n}])\r\n.directive('ngReadonly', ['$aria', function($aria) {\r\n  return $aria.$$watchExpr('ngReadonly', 'aria-readonly', nodeBlackList, false);\r\n}])\r\n.directive('ngRequired', ['$aria', function($aria) {\r\n  return $aria.$$watchExpr('ngRequired', 'aria-required', nodeBlackList, false);\r\n}])\r\n.directive('ngModel', ['$aria', function($aria) {\r\n\r\n  function shouldAttachAttr(attr, normalizedAttr, elem, allowBlacklistEls) {\r\n    return $aria.config(normalizedAttr) && !elem.attr(attr) && (allowBlacklistEls || !isNodeOneOf(elem, nodeBlackList));\r\n  }\r\n\r\n  function shouldAttachRole(role, elem) {\r\n    // if element does not have role attribute\r\n    // AND element type is equal to role (if custom element has a type equaling shape) <-- remove?\r\n    // AND element is not in nodeBlackList\r\n    return !elem.attr('role') && (elem.attr('type') === role) && !isNodeOneOf(elem, nodeBlackList);\r\n  }\r\n\r\n  function getShape(attr, elem) {\r\n    var type = attr.type,\r\n        role = attr.role;\r\n\r\n    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :\r\n           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :\r\n           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' : '';\r\n  }\r\n\r\n  return {\r\n    restrict: 'A',\r\n    require: 'ngModel',\r\n    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value\r\n    compile: function(elem, attr) {\r\n      var shape = getShape(attr, elem);\r\n\r\n      return {\r\n        post: function(scope, elem, attr, ngModel) {\r\n          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem, false);\r\n\r\n          function ngAriaWatchModelValue() {\r\n            return ngModel.$modelValue;\r\n          }\r\n\r\n          function getRadioReaction(newVal) {\r\n            // Strict comparison would cause a BC\r\n            // eslint-disable-next-line eqeqeq\r\n            var boolVal = (attr.value == ngModel.$viewValue);\r\n            elem.attr('aria-checked', boolVal);\r\n          }\r\n\r\n          function getCheckboxReaction() {\r\n            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));\r\n          }\r\n\r\n          switch (shape) {\r\n            case 'radio':\r\n            case 'checkbox':\r\n              if (shouldAttachRole(shape, elem)) {\r\n                elem.attr('role', shape);\r\n              }\r\n              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem, false)) {\r\n                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?\r\n                    getRadioReaction : getCheckboxReaction);\r\n              }\r\n              if (needsTabIndex) {\r\n                elem.attr('tabindex', 0);\r\n              }\r\n              break;\r\n            case 'range':\r\n              if (shouldAttachRole(shape, elem)) {\r\n                elem.attr('role', 'slider');\r\n              }\r\n              if ($aria.config('ariaValue')) {\r\n                var needsAriaValuemin = !elem.attr('aria-valuemin') &&\r\n                    (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'));\r\n                var needsAriaValuemax = !elem.attr('aria-valuemax') &&\r\n                    (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'));\r\n                var needsAriaValuenow = !elem.attr('aria-valuenow');\r\n\r\n                if (needsAriaValuemin) {\r\n                  attr.$observe('min', function ngAriaValueMinReaction(newVal) {\r\n                    elem.attr('aria-valuemin', newVal);\r\n                  });\r\n                }\r\n                if (needsAriaValuemax) {\r\n                  attr.$observe('max', function ngAriaValueMinReaction(newVal) {\r\n                    elem.attr('aria-valuemax', newVal);\r\n                  });\r\n                }\r\n                if (needsAriaValuenow) {\r\n                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {\r\n                    elem.attr('aria-valuenow', newVal);\r\n                  });\r\n                }\r\n              }\r\n              if (needsTabIndex) {\r\n                elem.attr('tabindex', 0);\r\n              }\r\n              break;\r\n          }\r\n\r\n          if (!attr.hasOwnProperty('ngRequired') && ngModel.$validators.required\r\n            && shouldAttachAttr('aria-required', 'ariaRequired', elem, false)) {\r\n            // ngModel.$error.required is undefined on custom controls\r\n            attr.$observe('required', function() {\r\n              elem.attr('aria-required', !!attr['required']);\r\n            });\r\n          }\r\n\r\n          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem, true)) {\r\n            scope.$watch(function ngAriaInvalidWatch() {\r\n              return ngModel.$invalid;\r\n            }, function ngAriaInvalidReaction(newVal) {\r\n              elem.attr('aria-invalid', !!newVal);\r\n            });\r\n          }\r\n        }\r\n      };\r\n    }\r\n  };\r\n}])\r\n.directive('ngDisabled', ['$aria', function($aria) {\r\n  return $aria.$$watchExpr('ngDisabled', 'aria-disabled', nodeBlackList, false);\r\n}])\r\n.directive('ngMessages', function() {\r\n  return {\r\n    restrict: 'A',\r\n    require: '?ngMessages',\r\n    link: function(scope, elem, attr, ngMessages) {\r\n      if (!elem.attr('aria-live')) {\r\n        elem.attr('aria-live', 'assertive');\r\n      }\r\n    }\r\n  };\r\n})\r\n.directive('ngClick',['$aria', '$parse', function($aria, $parse) {\r\n  return {\r\n    restrict: 'A',\r\n    compile: function(elem, attr) {\r\n      var fn = $parse(attr.ngClick);\r\n      return function(scope, elem, attr) {\r\n\r\n        if (!isNodeOneOf(elem, nodeBlackList)) {\r\n\r\n          if ($aria.config('bindRoleForClick') && !elem.attr('role')) {\r\n            elem.attr('role', 'button');\r\n          }\r\n\r\n          if ($aria.config('tabindex') && !elem.attr('tabindex')) {\r\n            elem.attr('tabindex', 0);\r\n          }\r\n\r\n          if ($aria.config('bindKeydown') && !attr.ngKeydown && !attr.ngKeypress && !attr.ngKeyup) {\r\n            elem.on('keydown', function(event) {\r\n              var keyCode = event.which || event.keyCode;\r\n              if (keyCode === 32 || keyCode === 13) {\r\n                scope.$apply(callback);\r\n              }\r\n\r\n              function callback() {\r\n                fn(scope, { $event: event });\r\n              }\r\n            });\r\n          }\r\n        }\r\n      };\r\n    }\r\n  };\r\n}])\r\n.directive('ngDblclick', ['$aria', function($aria) {\r\n  return function(scope, elem, attr) {\r\n    if ($aria.config('tabindex') && !elem.attr('tabindex') && !isNodeOneOf(elem, nodeBlackList)) {\r\n      elem.attr('tabindex', 0);\r\n    }\r\n  };\r\n}]);\r\n\r\n\r\n})(window, window.angular);\r\n"]}